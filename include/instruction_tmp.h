<<<<<<< Updated upstream
INSTRUCTION_INPUT(ADD, 0, "add", "Adds two values")
INSTRUCTION_INPUT(SUB, 1, "sub", "Subtracts second value from the first")
INSTRUCTION_INPUT(MUL, 2, "mul", "Multiplies two values")
INSTRUCTION_INPUT(DIV, 3, "div", "Divides first value by the second")
INSTRUCTION_INPUT(MOV, 4, "mov", "Moves data from one place to another")
INSTRUCTION_INPUT(LOAD, 5, "load", "Loads data from memory")
INSTRUCTION_INPUT(STORE, 6, "store", "Stores data into memory")
INSTRUCTION_INPUT(AND, 7, "and", "Logical AND operation")
INSTRUCTION_INPUT(OR, 8, "or", "Logical OR operation")
INSTRUCTION_INPUT(XOR, 9, "xor", "Logical XOR operation")
INSTRUCTION_INPUT(SHL, 10, "shift_left", "Shifts bits to the left")
INSTRUCTION_INPUT(SHR, 11, "shift_right", "Shifts bits to the right")
INSTRUCTION_INPUT(JMP, 12, "jump", "Jumps to a new instruction address")
INSTRUCTION_INPUT(CMP, 13, "compare", "Compares two values")
INSTRUCTION_INPUT(CALL, 14, "call", "Calls a function or subroutine")
INSTRUCTION_INPUT(RET, 15, "return", "Returns from a function or subroutine")
INSTRUCTION_INPUT(PUSH, 16, "push", "Pushes a value onto the stack")
INSTRUCTION_INPUT(POP, 17, "pop", "Pops a value from the stack")
=======
INSTRUCTION_INPUT(AAA, "37", "ASCII adjust AL after addition.")
INSTRUCTION_INPUT(AAD, "D5 0A", "ASCII adjust AX before division.")
INSTRUCTION_INPUT(AADimm8, "D5 ib", "Adjust AX before division to number base imm8.")
INSTRUCTION_INPUT(AAM, "D4 0A", "ASCII adjust AX after multiply.")
INSTRUCTION_INPUT(AAMimm8, "D4 ib", "Adjust AX after multiply to number base imm8.")
INSTRUCTION_INPUT(AAS, "3F", "ASCII adjust AL after subtraction.")
INSTRUCTION_INPUT(ADCAL, imm8, "14 ib", "Add with carry imm8 to AL.")
INSTRUCTION_INPUT(ADCAX, imm16, "15 iw", "Add with carry imm16 to AX.")
INSTRUCTION_INPUT(ADCEAX, imm32, "15 id", "Add with carry imm32 to EAX.")
INSTRUCTION_INPUT(ADCRAX, imm32, "REX.W + 15 id", "Add with carry imm32 sign extended to 64-bits to RAX.")
INSTRUCTION_INPUT(ADCr/m8, imm8, "80 /2 ib", "Add with carry imm8 to r/m8.")
INSTRUCTION_INPUT(ADCr/m8, imm8, "REX + 80 /2 ib", "Add with carry imm8 to r/m8.")
INSTRUCTION_INPUT(ADCr/m16, imm16, "81 /2 iw", "Add with carry imm16 to r/m16.")
INSTRUCTION_INPUT(ADCr/m32, imm32, "81 /2 id", "Add with CF imm32 to r/m32.")
INSTRUCTION_INPUT(ADCr/m64, imm32, "REX.W + 81 /2 id", "Add with CF imm32 sign extended to 64-bits to r/m64.")
INSTRUCTION_INPUT(ADCr/m16, imm8, "83 /2 ib", "Add with CF sign-extended imm8 to r/m16.")
INSTRUCTION_INPUT(ADCr/m32, imm8, "83 /2 ib", "Add with CF sign-extended imm8 into r/m32.")
INSTRUCTION_INPUT(ADCr/m64, imm8, "REX.W + 83 /2 ib", "Add with CF sign-extended imm8 into r/m64.")
INSTRUCTION_INPUT(ADCr/m8, r8, "10 /r", "Add with carry byte register to r/m8.")
INSTRUCTION_INPUT(ADCr/m8, r8, "REX + 10 /r", "Add with carry byte register to r/m64.")
INSTRUCTION_INPUT(ADCr/m16, r16, "11 /r", "Add with carry r16 to r/m16.")
INSTRUCTION_INPUT(ADCr/m32, r32, "11 /r", "Add with CF r32 to r/m32.")
INSTRUCTION_INPUT(ADCr/m64, r64, "REX.W + 11 /r", "Add with CF r64 to r/m64.")
INSTRUCTION_INPUT(ADCr8, r/m8, "12 /r", "Add with carry r/m8 to byte register.")
INSTRUCTION_INPUT(ADCr8, r/m8, "REX + 12 /r", "Add with carry r/m64 to byte register.")
INSTRUCTION_INPUT(ADCr16, r/m16, "13 /r", "Add with carry r/m16 to r16.")
INSTRUCTION_INPUT(ADCr32, r/m32, "13 /r", "Add with CF r/m32 to r32.")
INSTRUCTION_INPUT(ADCr64, r/m64, "REX.W + 13 /r", "Add with CF r/m64 to r64.")
INSTRUCTION_INPUT(ADCXr32, r/m32, "66 0F 38 F6 /r", "Unsigned addition of r32 with CF, r/m32 to r32, writes CF.")
INSTRUCTION_INPUT(ADCXr64, r/m64, "66 REX.w 0F 38 F6 /r", "Unsigned addition of r64 with CF, r/m64 to r64, writes CF.")
INSTRUCTION_INPUT(ADDAL, imm8, "04 ib", "Add imm8 to AL.")
INSTRUCTION_INPUT(ADDAX, imm16, "05 iw", "Add imm16 to AX.")
INSTRUCTION_INPUT(ADDEAX, imm32, "05 id", "Add imm32 to EAX.")
INSTRUCTION_INPUT(ADDRAX, imm32, "REX.W + 05 id", "Add imm32 sign-extended to 64-bits to RAX.")
INSTRUCTION_INPUT(ADDr/m8, imm8, "80 /0 ib", "Add imm8 to r/m8.")
INSTRUCTION_INPUT(ADDr/m8, imm8, "REX + 80 /0 ib", "Add sign-extended imm8 to r/m64.")
INSTRUCTION_INPUT(ADDr/m16, imm16, "81 /0 iw", "Add imm16 to r/m16.")
INSTRUCTION_INPUT(ADDr/m32, imm32, "81 /0 id", "Add imm32 to r/m32.")
INSTRUCTION_INPUT(ADDr/m64, imm32, "REX.W + 81 /0 id", "Add imm32 sign-extended to 64-bits to r/m64.")
INSTRUCTION_INPUT(ADDr/m16, imm8, "83 /0 ib", "Add sign-extended imm8 to r/m16.")
INSTRUCTION_INPUT(ADDr/m32, imm8, "83 /0 ib", "Add sign-extended imm8 to r/m32.")
INSTRUCTION_INPUT(ADDr/m64, imm8, "REX.W + 83 /0 ib", "Add sign-extended imm8 to r/m64.")
INSTRUCTION_INPUT(ADDr/m8, r8, "00 /r", "Add r8 to r/m8.")
INSTRUCTION_INPUT(ADDr/m8, r8, "REX + 00 /r", "Add r8 to r/m8.")
INSTRUCTION_INPUT(ADDr/m16, r16, "01 /r", "Add r16 to r/m16.")
INSTRUCTION_INPUT(ADDr/m32, r32, "01 /r", "Add r32 to r/m32.")
INSTRUCTION_INPUT(ADDr/m64, r64, "REX.W + 01 /r", "Add r64 to r/m64.")
INSTRUCTION_INPUT(ADDr8, r/m8, "02 /r", "Add r/m8 to r8.")
INSTRUCTION_INPUT(ADDr8, r/m8, "REX + 02 /r", "Add r/m8 to r8.")
INSTRUCTION_INPUT(ADDr16, r/m16, "03 /r", "Add r/m16 to r16.")
INSTRUCTION_INPUT(ADDr32, r/m32, "03 /r", "Add r/m32 to r32.")
INSTRUCTION_INPUT(ADDr64, r/m64, "REX.W + 03 /r", "Add r/m64 to r64.")
INSTRUCTION_INPUT(ADDPDxmm1, xmm2/m128, "66 0F 58 /r", "Add packed double-precision floating-point values from xmm2/mem to xmm1 and store result in xmm1.")
INSTRUCTION_INPUT(VADDPDxmm1,xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 58 /r", "Add packed double-precision floating-point values from xmm3/mem to xmm2 and store result in xmm1.")
INSTRUCTION_INPUT(VADDPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 58 /r", "Add packed double-precision floating-point values from ymm3/mem to ymm2 and store result in ymm1.")
INSTRUCTION_INPUT(VADDPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 58 /r", "Add packed double-precision floating-point values from xmm3/m128/m64bcst to xmm2 and store result in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VADDPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 58 /r", "Add packed double-precision floating-point values from ymm3/m256/m64bcst to ymm2 and store result in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VADDPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}, "EVEX.NDS.512.66.0F.W1 58 /r", "Add packed double-precision floating-point values from zmm3/m512/m64bcst to zmm2 and store result in zmm1 with writemask k1.")
INSTRUCTION_INPUT(ADDPSxmm1, xmm2/m128, "0F 58 /r", "Add packed single-precision floating-point values from xmm2/m128 to xmm1 and store result in xmm1.")
INSTRUCTION_INPUT(VADDPSxmm1,xmm2, xmm3/m128, "VEX.NDS.128.0F.WIG 58 /r", "Add packed single-precision floating-point values from xmm3/m128 to xmm2 and store result in xmm1.")
INSTRUCTION_INPUT(VADDPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F.WIG 58 /r", "Add packed single-precision floating-point values from ymm3/m256 to ymm2 and store result in ymm1.")
INSTRUCTION_INPUT(VADDPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 58 /r", "Add packed single-precision floating-point values from xmm3/m128/m32bcst to xmm2 and store result in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VADDPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 58 /r", "Add packed single-precision floating-point values from ymm3/m256/m32bcst to ymm2 and store result in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VADDPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst {er}, "EVEX.NDS.512.0F.W0 58 /r", "Add packed single-precision floating-point values from zmm3/m512/m32bcst to zmm2 and store result in zmm1 with writemask k1.")
INSTRUCTION_INPUT(ADDSDxmm1, xmm2/m64, "F2 0F 58 /r", "Add the low double-precision floating-point value from xmm2/mem to xmm1 and store the result in xmm1.")
INSTRUCTION_INPUT(VADDSDxmm1, xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 58 /r", "Add the low double-precision floating-point value from xmm3/mem to xmm2 and store the result in xmm1.")
INSTRUCTION_INPUT(VADDSDxmm1 {k1}{z}, xmm2, xmm3/m64{er}, "EVEX.NDS.LIG.F2.0F.W1 58 /r", "Add the low double-precision floating-point value from xmm3/m64 to xmm2 and store the result in xmm1 with writemask k1.")
INSTRUCTION_INPUT(ADDSSxmm1, xmm2/m32, "F3 0F 58 /r", "Add the low single-precision floating-point value from xmm2/mem to xmm1 and store the result in xmm1.")
INSTRUCTION_INPUT(VADDSSxmm1,xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 58 /r", "Add the low single-precision floating-point value from xmm3/mem to xmm2 and store the result in xmm1.")
INSTRUCTION_INPUT(VADDSSxmm1{k1}{z}, xmm2, xmm3/m32{er}, "EVEX.NDS.LIG.F3.0F.W0 58 /r", "Add the low single-precision floating-point value from xmm3/m32 to xmm2 and store the result in xmm1with writemask k1.")
INSTRUCTION_INPUT(ADDSUBPDxmm1, xmm2/m128, "66 0F D0 /r", "Add/subtract double-precision floating-point values from xmm2/m128 to xmm1.")
INSTRUCTION_INPUT(VADDSUBPDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG D0 /r", "Add/subtract packed double-precision floating-point values from xmm3/mem to xmm2 and stores result in xmm1.")
INSTRUCTION_INPUT(VADDSUBPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG D0 /r", "Add / subtract packed double-precision floating-point values from ymm3/mem to ymm2 and stores result in ymm1.")
INSTRUCTION_INPUT(ADDSUBPSxmm1, xmm2/m128, "F2 0F D0 /r", "Add/subtract single-precision floating-point values from xmm2/m128 to xmm1.")
INSTRUCTION_INPUT(VADDSUBPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.F2.0F.WIG D0 /r", "Add/subtract single-precision floating-point values from xmm3/mem to xmm2 and stores result in xmm1.")
INSTRUCTION_INPUT(VADDSUBPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.F2.0F.WIG D0 /r", "Add / subtract single-precision floating-point values from ymm3/mem to ymm2 and stores result in ymm1.")
INSTRUCTION_INPUT(ADOXr32, r/m32, "F3 0F 38 F6 /r", "Unsigned addition of r32 with OF, r/m32 to r32, writes OF.")
INSTRUCTION_INPUT(ADOXr64, r/m64, "F3 REX.w 0F 38 F6 /r", "Unsigned addition of r64 with OF, r/m64 to r64, writes OF.")
INSTRUCTION_INPUT(AESDECxmm1, xmm2/m128, "66 0F 38 DE /r", "Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.")
INSTRUCTION_INPUT(VAESDECxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG DE /r", "Perform one round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from xmm2 with a 128-bit round key from xmm3/m128; store the result in xmm1.")
INSTRUCTION_INPUT(AESDECLASTxmm1, xmm2/m128, "66 0F 38 DF /r", "Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.")
INSTRUCTION_INPUT(VAESDECLASTxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG DF /r", "Perform the last round of an AES decryption flow, using the Equivalent Inverse Cipher, operating on a 128-bit data (state) from xmm2 with a 128-bit round key from xmm3/m128; store the result in xmm1.")
INSTRUCTION_INPUT(AESENCxmm1, xmm2/m128, "66 0F 38 DC /r", "Perform one round of an AES encryption flow, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.")
INSTRUCTION_INPUT(VAESENCxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG DC /r", "Perform one round of an AES encryption flow, operating on a 128-bit data (state) from xmm2 with a 128-bit round key from the xmm3/m128; store the result in xmm1.")
INSTRUCTION_INPUT(AESENCLASTxmm1, xmm2/m128, "66 0F 38 DD /r", "Perform the last round of an AES encryption flow, operating on a 128-bit data (state) from xmm1 with a 128-bit round key from xmm2/m128.")
INSTRUCTION_INPUT(VAESENCLASTxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG DD /r", "Perform the last round of an AES encryption flow, operating on a 128-bit data (state) from xmm2 with a 128 bit round key from xmm3/m128; store the result in xmm1.")
INSTRUCTION_INPUT(AESIMCxmm1, xmm2/m128, "66 0F 38 DB /r", "Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1.")
INSTRUCTION_INPUT(VAESIMCxmm1, xmm2/m128, "VEX.128.66.0F38.WIG DB /r", "Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1.")
INSTRUCTION_INPUT(AESKEYGENASSISTxmm1, xmm2/m128, imm8, "66 0F 3A DF /r ib", "Assist in AES round key generation using an 8 bits Round Constant (RCON) specified in the immediate byte, operating on 128 bits of data specified in xmm2/m128 and stores the result in xmm1.")
INSTRUCTION_INPUT(VAESKEYGENASSISTxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.WIG DF /r ib", "Assist in AES round key generation using 8 bits Round Constant (RCON) specified in the immediate byte, operating on 128 bits of data specified in xmm2/m128 and stores the result in xmm1.")
INSTRUCTION_INPUT(ANDAL, imm8, "24 ib", "AL AND imm8.")
INSTRUCTION_INPUT(ANDAX, imm16, "25 iw", "AX AND imm16.")
INSTRUCTION_INPUT(ANDEAX, imm32, "25 id", "EAX AND imm32.")
INSTRUCTION_INPUT(ANDRAX, imm32, "REX.W + 25 id", "RAX AND imm32 sign-extended to 64-bits.")
INSTRUCTION_INPUT(ANDr/m8, imm8, "80 /4 ib", "r/m8 AND imm8.")
INSTRUCTION_INPUT(ANDr/m8, imm8, "REX + 80 /4 ib", "r/m8 AND imm8.")
INSTRUCTION_INPUT(ANDr/m16, imm16, "81 /4 iw", "r/m16 AND imm16.")
INSTRUCTION_INPUT(ANDr/m32, imm32, "81 /4 id", "r/m32 AND imm32.")
INSTRUCTION_INPUT(ANDr/m64, imm32, "REX.W + 81 /4 id", "r/m64 AND imm32 sign extended to 64-bits.")
INSTRUCTION_INPUT(ANDr/m16, imm8, "83 /4 ib", "r/m16 AND imm8 (sign-extended).")
INSTRUCTION_INPUT(ANDr/m32, imm8, "83 /4 ib", "r/m32 AND imm8 (sign-extended).")
INSTRUCTION_INPUT(ANDr/m64, imm8, "REX.W + 83 /4 ib", "r/m64 AND imm8 (sign-extended).")
INSTRUCTION_INPUT(ANDr/m8, r8, "20 /r", "r/m8 AND r8.")
INSTRUCTION_INPUT(ANDr/m8, r8, "REX + 20 /r", "r/m64 AND r8 (sign-extended).")
INSTRUCTION_INPUT(ANDr/m16, r16, "21 /r", "r/m16 AND r16.")
INSTRUCTION_INPUT(ANDr/m32, r32, "21 /r", "r/m32 AND r32.")
INSTRUCTION_INPUT(ANDr/m64, r64, "REX.W + 21 /r", "r/m64 AND r32.")
INSTRUCTION_INPUT(ANDr8, r/m8, "22 /r", "r8 AND r/m8.")
INSTRUCTION_INPUT(ANDr8, r/m8, "REX + 22 /r", "r/m64 AND r8 (sign-extended).")
INSTRUCTION_INPUT(ANDr16, r/m16, "23 /r", "r16 AND r/m16.")
INSTRUCTION_INPUT(ANDr32, r/m32, "23 /r", "r32 AND r/m32.")
INSTRUCTION_INPUT(ANDr64, r/m64, "REX.W + 23 /r", "r64 AND r/m64.")
INSTRUCTION_INPUT(ANDNr32a, r32b, r/m32, "VEX.NDS.LZ.0F38.W0 F2 /r", "Bitwise AND of inverted r32b with r/m32, store result in r32a.")
INSTRUCTION_INPUT(ANDNr64a, r64b, r/m64, "VEX.NDS.LZ. 0F38.W1 F2 /r", "Bitwise AND of inverted r64b with r/m64, store result in r64a.")
INSTRUCTION_INPUT(ANDNPDxmm1, xmm2/m128, "66 0F 55 /r", "Return the bitwise logical AND NOT of packed double-precision floating-point values in xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VANDNPDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F 55 /r", "Return the bitwise logical AND NOT of packed double-precision floating-point values in xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VANDNPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F 55/r", "Return the bitwise logical AND NOT of packed double-precision floating-point values in ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VANDNPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 55 /r", "Return the bitwise logical AND NOT of packed double-precision floating-point values in xmm2 and xmm3/m128/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDNPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 55 /r", "Return the bitwise logical AND NOT of packed double-precision floating-point values in ymm2 and ymm3/m256/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDNPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 55 /r", "Return the bitwise logical AND NOT of packed double-precision floating-point values in zmm2 and zmm3/m512/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(ANDNPSxmm1, xmm2/m128, "0F 55 /r", "Return the bitwise logical AND NOT of packed single-precision floating-point values in xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VANDNPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.0F 55 /r", "Return the bitwise logical AND NOT of packed single-precision floating-point values in xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VANDNPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F 55 /r", "Return the bitwise logical AND NOT of packed single-precision floating-point values in ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VANDNPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 55 /r", "Return the bitwise logical AND of packed single-precision floating-point values in xmm2 and xmm3/m128/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDNPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 55 /r", "Return the bitwise logical AND of packed single-precision floating-point values in ymm2 and ymm3/m256/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDNPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.0F.W0 55 /r", "Return the bitwise logical AND of packed single-precision floating-point values in zmm2 and zmm3/m512/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(ANDPDxmm1, xmm2/m128, "66 0F 54 /r", "Return the bitwise logical AND of packed double-precision floating-point values in xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VANDPDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F 54 /r", "Return the bitwise logical AND of packed double-precision floating-point values in xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VANDPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F 54 /r", "Return the bitwise logical AND of packed double-precision floating-point values in ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VANDPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 54 /r", "Return the bitwise logical AND of packed double-precision floating-point values in xmm2 and xmm3/m128/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 54 /r", "Return the bitwise logical AND of packed double-precision floating-point values in ymm2 and ymm3/m256/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 54 /r", "Return the bitwise logical AND of packed double-precision floating-point values in zmm2 and zmm3/m512/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(ANDPSxmm1, xmm2/m128, "0F 54 /r", "Return the bitwise logical AND of packed single-precision floating-point values in xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VANDPSxmm1,xmm2, xmm3/m128, "VEX.NDS.128.0F 54 /r", "Return the bitwise logical AND of packed single-precision floating-point values in xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VANDPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F 54 /r", "Return the bitwise logical AND of packed single-precision floating-point values in ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VANDPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 54 /r", "Return the bitwise logical AND of packed single-precision floating-point values in xmm2 and xmm3/m128/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 54 /r", "Return the bitwise logical AND of packed single-precision floating-point values in ymm2 and ymm3/m256/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VANDPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.0F.W0 54 /r", "Return the bitwise logical AND of packed single-precision floating-point values in zmm2 and zmm3/m512/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(ARPLr/m16, r16, "63 /r", "Adjust RPL of r/m16 to not less than RPL of r16.")
INSTRUCTION_INPUT(BEXTRr32a, r/m32, r32b, "VEX.NDS.LZ.0F38.W0 F7 /r", "Contiguous bitwise extract from r/m32 using r32b as control; store result in r32a.")
INSTRUCTION_INPUT(BEXTRr64a, r/m64, r64b, "VEX.NDS.LZ.0F38.W1 F7 /r", "Contiguous bitwise extract from r/m64 using r64b as control; store result in r64a")
INSTRUCTION_INPUT(BLENDPDxmm1, xmm2/m128, imm8, "66 0F 3A 0D /r ib", "Select packed DP-FP values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.")
INSTRUCTION_INPUT(VBLENDPDxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 0D /r ib", "Select packed double-precision floating-point Values from xmm2 and xmm3/m128 from mask in imm8 and store the values in xmm1.")
INSTRUCTION_INPUT(VBLENDPDymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.WIG 0D /r ib", "Select packed double-precision floating-point Values from ymm2 and ymm3/m256 from mask in imm8 and store the values in ymm1.")
INSTRUCTION_INPUT(BLENDPSxmm1, xmm2/m128, imm8, "66 0F 3A 0C /r ib", "Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.")
INSTRUCTION_INPUT(VBLENDPSxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 0C /r ib", "Select packed single-precision floating-point values from xmm2 and xmm3/m128 from mask in imm8 and store the values in xmm1.")
INSTRUCTION_INPUT(VBLENDPSymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.WIG 0C /r ib", "Select packed single-precision floating-point values from ymm2 and ymm3/m256 from mask in imm8 and store the values in ymm1.")
INSTRUCTION_INPUT(BLENDVPDxmm1, xmm2/m128 , &lt;XMM0&gt;, "66 0F 38 15 /r", "Select packed DP FP values from xmm1 and xmm2 from mask specified in XMM0 and store the values in xmm1.")
INSTRUCTION_INPUT(VBLENDVPDxmm1, xmm2, xmm3/m128, xmm4, "VEX.NDS.128.66.0F3A.W0 4B /r /is4", "Conditionally copy double-precision floating-point values from xmm2 or xmm3/m128 to xmm1, based on mask bits in the mask operand, xmm4.")
INSTRUCTION_INPUT(VBLENDVPDymm1, ymm2, ymm3/m256, ymm4, "VEX.NDS.256.66.0F3A.W0 4B /r /is4", "Conditionally copy double-precision floating-point values from ymm2 or ymm3/m256 to ymm1, based on mask bits in the mask operand, ymm4.")
INSTRUCTION_INPUT(BLENDVPSxmm1, xmm2/m128, &lt;XMM0&gt;, "66 0F 38 14 /r", "Select packed single precision floating-point values from xmm1 and xmm2/m128 from mask specified in XMM0 and store the values into xmm1.")
INSTRUCTION_INPUT(VBLENDVPSxmm1, xmm2, xmm3/m128, xmm4, "VEX.NDS.128.66.0F3A.W0 4A /r /is4", "Conditionally copy single-precision floating-point values from xmm2 or xmm3/m128 to xmm1, based on mask bits in the specified mask operand, xmm4.")
INSTRUCTION_INPUT(VBLENDVPSymm1, ymm2, ymm3/m256, ymm4, "VEX.NDS.256.66.0F3A.W0 4A /r /is4", "Conditionally copy single-precision floating-point values from ymm2 or ymm3/m256 to ymm1, based on mask bits in the specified mask register, ymm4.")
INSTRUCTION_INPUT(BLSIr32, r/m32, "VEX.NDD.LZ.0F38.W0 F3 /3", "Extract lowest set bit from r/m32 and set that bit in r32.")
INSTRUCTION_INPUT(BLSIr64, r/m64, "VEX.NDD.LZ.0F38.W1 F3 /3", "Extract lowest set bit from r/m64, and set that bit in r64.")
INSTRUCTION_INPUT(BLSMSKr32, r/m32, "VEX.NDD.LZ.0F38.W0 F3 /2", "Set all lower bits in r32 to “1” starting from bit 0 to lowest set bit in r/m32.")
INSTRUCTION_INPUT(BLSMSKr64, r/m64, "VEX.NDD.LZ.0F38.W1 F3 /2", "Set all lower bits in r64 to “1” starting from bit 0 to lowest set bit in r/m64.")
INSTRUCTION_INPUT(BLSRr32, r/m32, "VEX.NDD.LZ.0F38.W0 F3 /1", "Reset lowest set bit of r/m32, keep all other bits of r/m32 and write result to r32.")
INSTRUCTION_INPUT(BLSRr64, r/m64, "VEX.NDD.LZ.0F38.W1 F3 /1", "Reset lowest set bit of r/m64, keep all other bits of r/m64 and write result to r64.")
INSTRUCTION_INPUT(BNDCLbnd, r/m32, "F3 0F 1A /r", "Generate a #BR if the address in r/m32 is lower than the lower bound in bnd.LB.")
INSTRUCTION_INPUT(BNDCLbnd, r/m64, "F3 0F 1A /r", "Generate a #BR if the address in r/m64 is lower than the lower bound in bnd.LB.")
INSTRUCTION_INPUT(BNDLDXbnd, mib, "0F 1A /r", "Load the bounds stored in a bound table entry (BTE) into bnd with address translation using the base of mib and conditional on the index of mib matching the pointer value in the BTE.")
INSTRUCTION_INPUT(BNDMKbnd, m32, "F3 0F 1B /r", "Make lower and upper bounds from m32 and store them in bnd.")
INSTRUCTION_INPUT(BNDMKbnd, m64, "F3 0F 1B /r", "Make lower and upper bounds from m64 and store them in bnd.")
INSTRUCTION_INPUT(BNDMOVbnd1, bnd2/m64, "66 0F 1A /r", "Move lower and upper bound from bnd2/m64 to bound register bnd1.")
INSTRUCTION_INPUT(BNDMOVbnd1, bnd2/m128, "66 0F 1A /r", "Move lower and upper bound from bnd2/m128 to bound register bnd1.")
INSTRUCTION_INPUT(BNDMOVbnd1/m64, bnd2, "66 0F 1B /r", "Move lower and upper bound from bnd2 to bnd1/m64.")
INSTRUCTION_INPUT(BNDMOVbnd1/m128, bnd2, "66 0F 1B /r", "Move lower and upper bound from bnd2 to bound register bnd1/m128.")
INSTRUCTION_INPUT(BNDSTXmib, bnd, "0F 1B /r", "Store the bounds in bnd and the pointer value in the index regis-ter of mib to a bound table entry (BTE) with address translation using the base of mib.")
INSTRUCTION_INPUT(BOUNDr16, m16&amp;16, "62 /r", "Check if r16 (array index) is within bounds specified by m16&amp;16.")
INSTRUCTION_INPUT(BOUNDr32, m32&amp;32, "62 /r", "Check if r32 (array index) is within bounds specified by m32&amp;32.")
INSTRUCTION_INPUT(BSFr16, r/m16, "0F BC /r", "Bit scan forward on r/m16.")
INSTRUCTION_INPUT(BSFr32, r/m32, "0F BC /r", "Bit scan forward on r/m32.")
INSTRUCTION_INPUT(BSFr64, r/m64, "REX.W + 0F BC /r", "Bit scan forward on r/m64.")
INSTRUCTION_INPUT(BSRr16, r/m16, "0F BD /r", "Bit scan reverse on r/m16.")
INSTRUCTION_INPUT(BSRr32, r/m32, "0F BD /r", "Bit scan reverse on r/m32.")
INSTRUCTION_INPUT(BSRr64, r/m64, "REX.W + 0F BD /r", "Bit scan reverse on r/m64.")
INSTRUCTION_INPUT(BSWAPr32, "0F C8+rd", "Reverses the byte order of a 32-bit register.")
INSTRUCTION_INPUT(BSWAPr64, "REX.W + 0F C8+rd", "Reverses the byte order of a 64-bit register.")
INSTRUCTION_INPUT(BTr/m16, r16, "0F A3 /r", "Store selected bit in CF flag.")
INSTRUCTION_INPUT(BTr/m32, r32, "0F A3 /r", "Store selected bit in CF flag.")
INSTRUCTION_INPUT(BTr/m64, r64, "REX.W + 0F A3 /r", "Store selected bit in CF flag.")
INSTRUCTION_INPUT(BTr/m16, imm8, "0F BA /4 ib", "Store selected bit in CF flag.")
INSTRUCTION_INPUT(BTr/m32, imm8, "0F BA /4 ib", "Store selected bit in CF flag.")
INSTRUCTION_INPUT(BTr/m64, imm8, "REX.W + 0F BA /4 ib", "Store selected bit in CF flag.")
INSTRUCTION_INPUT(BTCr/m16, r16, "0F BB /r", "Store selected bit in CF flag and complement.")
INSTRUCTION_INPUT(BTCr/m32, r32, "0F BB /r", "Store selected bit in CF flag and complement.")
INSTRUCTION_INPUT(BTCr/m64, r64, "REX.W + 0F BB /r", "Store selected bit in CF flag and complement.")
INSTRUCTION_INPUT(BTCr/m16, imm8, "0F BA /7 ib", "Store selected bit in CF flag and complement.")
INSTRUCTION_INPUT(BTCr/m32, imm8, "0F BA /7 ib", "Store selected bit in CF flag and complement.")
INSTRUCTION_INPUT(BTCr/m64, imm8, "REX.W + 0F BA /7 ib", "Store selected bit in CF flag and complement.")
INSTRUCTION_INPUT(BTRr/m16, r16, "0F B3 /r", "Store selected bit in CF flag and clear.")
INSTRUCTION_INPUT(BTRr/m32, r32, "0F B3 /r", "Store selected bit in CF flag and clear.")
INSTRUCTION_INPUT(BTRr/m64, r64, "REX.W + 0F B3 /r", "Store selected bit in CF flag and clear.")
INSTRUCTION_INPUT(BTRr/m16, imm8, "0F BA /6 ib", "Store selected bit in CF flag and clear.")
INSTRUCTION_INPUT(BTRr/m32, imm8, "0F BA /6 ib", "Store selected bit in CF flag and clear.")
INSTRUCTION_INPUT(BTRr/m64, imm8, "REX.W + 0F BA /6 ib", "Store selected bit in CF flag and clear.")
INSTRUCTION_INPUT(BTSr/m16, r16, "0F AB /r", "Store selected bit in CF flag and set.")
INSTRUCTION_INPUT(BTSr/m32, r32, "0F AB /r", "Store selected bit in CF flag and set.")
INSTRUCTION_INPUT(BTSr/m64, r64, "REX.W + 0F AB /r", "Store selected bit in CF flag and set.")
INSTRUCTION_INPUT(BTSr/m16, imm8, "0F BA /5 ib", "Store selected bit in CF flag and set.")
INSTRUCTION_INPUT(BTSr/m32, imm8, "0F BA /5 ib", "Store selected bit in CF flag and set.")
INSTRUCTION_INPUT(BTSr/m64, imm8, "REX.W + 0F BA /5 ib", "Store selected bit in CF flag and set.")
INSTRUCTION_INPUT(BZHIr32a, r/m32, r32b, "VEX.NDS.LZ.0F38.W0 F5 /r", "Zero bits in r/m32 starting with the position in r32b, write result to r32a.")
INSTRUCTION_INPUT(BZHIr64a, r/m64, r64b, "VEX.NDS.LZ.0F38.W1 F5 /r", "Zero bits in r/m64 starting with the position in r64b, write result to r64a.")
INSTRUCTION_INPUT(CALLrel16, "E8 cw", "Call near, relative, displacement relative to next instruction.")
INSTRUCTION_INPUT(CALLrel32, "E8 cd", "Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode.")
INSTRUCTION_INPUT(CALLr/m16, "FF /2", "Call near, absolute indirect, address given in r/m16.")
INSTRUCTION_INPUT(CALLr/m32, "FF /2", "Call near, absolute indirect, address given in r/m32.")
INSTRUCTION_INPUT(CALLr/m64, "FF /2", "Call near, absolute indirect, address given in r/m64.")
INSTRUCTION_INPUT(CALLptr16:16, "9A cd", "Call far, absolute, address given in operand.")
INSTRUCTION_INPUT(CALLptr16:32, "9A cp", "Call far, absolute, address given in operand.")
INSTRUCTION_INPUT(CALLm16:16, "FF /3", "
Call far, absolute indirect address given in m16:16.
In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction.")
INSTRUCTION_INPUT(CALLm16:32, "FF /3", "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction.")
INSTRUCTION_INPUT(CALLm16:64, "REX.W + FF /3", "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = 64-bit offset from far pointer referenced in the instruction.")
INSTRUCTION_INPUT(CLAC, "0F 01 CA", "Clear the AC flag in the EFLAGS register.")
INSTRUCTION_INPUT(CLC, "F8", "Clear CF flag.")
INSTRUCTION_INPUT(CLD, "FC", "Clear DF flag.")
INSTRUCTION_INPUT(CLFLUSHm8, "0F AE /7", "Flushes cache line containing m8.")
INSTRUCTION_INPUT(CLFLUSHOPTm8, "66 0F AE /7", "Flushes cache line containing m8.")
INSTRUCTION_INPUT(CLI, "FA", "Clear interrupt flag; interrupts disabled when interrupt flag cleared.")
INSTRUCTION_INPUT(CLTS, "0F 06", "Clears TS flag in CR0.")
INSTRUCTION_INPUT(CMC, "F5", "Complement CF flag.")
INSTRUCTION_INPUT(CMOVAr16, r/m16, "0F 47 /r", "Move if above (CF=0 and ZF=0).")
INSTRUCTION_INPUT(CMOVAr32, r/m32, "0F 47 /r", "Move if above (CF=0 and ZF=0).")
INSTRUCTION_INPUT(CMOVAr64, r/m64, "REX.W + 0F 47 /r", "Move if above (CF=0 and ZF=0).")
INSTRUCTION_INPUT(CMOVAEr16, r/m16, "0F 43 /r", "Move if above or equal (CF=0).")
INSTRUCTION_INPUT(CMOVAEr32, r/m32, "0F 43 /r", "Move if above or equal (CF=0).")
INSTRUCTION_INPUT(CMOVAEr64, r/m64, "REX.W + 0F 43 /r", "Move if above or equal (CF=0).")
INSTRUCTION_INPUT(CMOVBr16, r/m16, "0F 42 /r", "Move if below (CF=1).")
INSTRUCTION_INPUT(CMOVBr32, r/m32, "0F 42 /r", "Move if below (CF=1).")
INSTRUCTION_INPUT(CMOVBr64, r/m64, "REX.W + 0F 42 /r", "Move if below (CF=1).")
INSTRUCTION_INPUT(CMOVBEr16, r/m16, "0F 46 /r", "Move if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(CMOVBEr32, r/m32, "0F 46 /r", "Move if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(CMOVBEr64, r/m64, "REX.W + 0F 46 /r", "Move if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(CMOVCr16, r/m16, "0F 42 /r", "Move if carry (CF=1).")
INSTRUCTION_INPUT(CMOVCr32, r/m32, "0F 42 /r", "Move if carry (CF=1).")
INSTRUCTION_INPUT(CMOVCr64, r/m64, "REX.W + 0F 42 /r", "Move if carry (CF=1).")
INSTRUCTION_INPUT(CMOVEr16, r/m16, "0F 44 /r", "Move if equal (ZF=1).")
INSTRUCTION_INPUT(CMOVEr32, r/m32, "0F 44 /r", "Move if equal (ZF=1).")
INSTRUCTION_INPUT(CMOVEr64, r/m64, "REX.W + 0F 44 /r", "Move if equal (ZF=1).")
INSTRUCTION_INPUT(CMOVGr16, r/m16, "0F 4F /r", "Move if greater (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(CMOVGr32, r/m32, "0F 4F /r", "Move if greater (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(CMOVGr64, r/m64, "REX.W + 0F 4F /r", "Move if greater (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(CMOVGEr16, r/m16, "0F 4D /r", "Move if greater or equal (SF=OF).")
INSTRUCTION_INPUT(CMOVGEr32, r/m32, "0F 4D /r", "Move if greater or equal (SF=OF).")
INSTRUCTION_INPUT(CMOVGEr64, r/m64, "REX.W + 0F 4D /r", "Move if greater or equal (SF=OF).")
INSTRUCTION_INPUT(CMOVLr16, r/m16, "0F 4C /r", "Move if less (SF≠ OF).")
INSTRUCTION_INPUT(CMOVLr32, r/m32, "0F 4C /r", "Move if less (SF≠ OF).")
INSTRUCTION_INPUT(CMOVLr64, r/m64, "REX.W + 0F 4C /r", "Move if less (SF≠ OF).")
INSTRUCTION_INPUT(CMOVLEr16, r/m16, "0F 4E /r", "Move if less or equal (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(CMOVLEr32, r/m32, "0F 4E /r", "Move if less or equal (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(CMOVLEr64, r/m64, "REX.W + 0F 4E /r", "Move if less or equal (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(CMOVNAr16, r/m16, "0F 46 /r", "Move if not above (CF=1 or ZF=1).")
INSTRUCTION_INPUT(CMOVNAr32, r/m32, "0F 46 /r", "Move if not above (CF=1 or ZF=1).")
INSTRUCTION_INPUT(CMOVNAr64, r/m64, "REX.W + 0F 46 /r", "Move if not above (CF=1 or ZF=1).")
INSTRUCTION_INPUT(CMOVNAEr16, r/m16, "0F 42 /r", "Move if not above or equal (CF=1).")
INSTRUCTION_INPUT(CMOVNAEr32, r/m32, "0F 42 /r", "Move if not above or equal (CF=1).")
INSTRUCTION_INPUT(CMOVNAEr64, r/m64, "REX.W + 0F 42 /r", "Move if not above or equal (CF=1).")
INSTRUCTION_INPUT(CMOVNBr16, r/m16, "0F 43 /r", "Move if not below (CF=0).")
INSTRUCTION_INPUT(CMOVNBr32, r/m32, "0F 43 /r", "Move if not below (CF=0).")
INSTRUCTION_INPUT(CMOVNBr64, r/m64, "REX.W + 0F 43 /r", "Move if not below (CF=0).")
INSTRUCTION_INPUT(CMOVNBEr16, r/m16, "0F 47 /r", "Move if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(CMOVNBEr32, r/m32, "0F 47 /r", "Move if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(CMOVNBEr64, r/m64, "REX.W + 0F 47 /r", "Move if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(CMOVNCr16, r/m16, "0F 43 /r", "Move if not carry (CF=0).")
INSTRUCTION_INPUT(CMOVNCr32, r/m32, "0F 43 /r", "Move if not carry (CF=0).")
INSTRUCTION_INPUT(CMOVNCr64, r/m64, "REX.W + 0F 43 /r", "Move if not carry (CF=0).")
INSTRUCTION_INPUT(CMOVNEr16, r/m16, "0F 45 /r", "Move if not equal (ZF=0).")
INSTRUCTION_INPUT(CMOVNEr32, r/m32, "0F 45 /r", "Move if not equal (ZF=0).")
INSTRUCTION_INPUT(CMOVNEr64, r/m64, "REX.W + 0F 45 /r", "Move if not equal (ZF=0).")
INSTRUCTION_INPUT(CMOVNGr16, r/m16, "0F 4E /r", "Move if not greater (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(CMOVNGr32, r/m32, "0F 4E /r", "Move if not greater (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(CMOVNGr64, r/m64, "REX.W + 0F 4E /r", "Move if not greater (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(CMOVNGEr16, r/m16, "0F 4C /r", "Move if not greater or equal (SF≠ OF).")
INSTRUCTION_INPUT(CMOVNGEr32, r/m32, "0F 4C /r", "Move if not greater or equal (SF≠ OF).")
INSTRUCTION_INPUT(CMOVNGEr64, r/m64, "REX.W + 0F 4C /r", "Move if not greater or equal (SF≠ OF).")
INSTRUCTION_INPUT(CMOVNLr16, r/m16, "0F 4D /r", "Move if not less (SF=OF).")
INSTRUCTION_INPUT(CMOVNLr32, r/m32, "0F 4D /r", "Move if not less (SF=OF).")
INSTRUCTION_INPUT(CMOVNLr64, r/m64, "REX.W + 0F 4D /r", "Move if not less (SF=OF).")
INSTRUCTION_INPUT(CMOVNLEr16, r/m16, "0F 4F /r", "Move if not less or equal (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(CMOVNLEr32, r/m32, "0F 4F /r", "Move if not less or equal (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(CMOVNLEr64, r/m64, "REX.W + 0F 4F /r", "Move if not less or equal (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(CMOVNOr16, r/m16, "0F 41 /r", "Move if not overflow (OF=0).")
INSTRUCTION_INPUT(CMOVNOr32, r/m32, "0F 41 /r", "Move if not overflow (OF=0).")
INSTRUCTION_INPUT(CMOVNOr64, r/m64, "REX.W + 0F 41 /r", "Move if not overflow (OF=0).")
INSTRUCTION_INPUT(CMOVNPr16, r/m16, "0F 4B /r", "Move if not parity (PF=0).")
INSTRUCTION_INPUT(CMOVNPr32, r/m32, "0F 4B /r", "Move if not parity (PF=0).")
INSTRUCTION_INPUT(CMOVNPr64, r/m64, "REX.W + 0F 4B /r", "Move if not parity (PF=0).")
INSTRUCTION_INPUT(CMOVNSr16, r/m16, "0F 49 /r", "Move if not sign (SF=0).")
INSTRUCTION_INPUT(CMOVNSr32, r/m32, "0F 49 /r", "Move if not sign (SF=0).")
INSTRUCTION_INPUT(CMOVNSr64, r/m64, "REX.W + 0F 49 /r", "Move if not sign (SF=0).")
INSTRUCTION_INPUT(CMOVNZr16, r/m16, "0F 45 /r", "Move if not zero (ZF=0).")
INSTRUCTION_INPUT(CMOVNZr32, r/m32, "0F 45 /r", "Move if not zero (ZF=0).")
INSTRUCTION_INPUT(CMOVNZr64, r/m64, "REX.W + 0F 45 /r", "Move if not zero (ZF=0).")
INSTRUCTION_INPUT(CMOVOr16, r/m16, "0F 40 /r", "Move if overflow (OF=1).")
INSTRUCTION_INPUT(CMOVOr32, r/m32, "0F 40 /r", "Move if overflow (OF=1).")
INSTRUCTION_INPUT(CMOVOr64, r/m64, "REX.W + 0F 40 /r", "Move if overflow (OF=1).")
INSTRUCTION_INPUT(CMOVPr16, r/m16, "0F 4A /r", "Move if parity (PF=1).")
INSTRUCTION_INPUT(CMOVPr32, r/m32, "0F 4A /r", "Move if parity (PF=1).")
INSTRUCTION_INPUT(CMOVPr64, r/m64, "REX.W + 0F 4A /r", "Move if parity (PF=1).")
INSTRUCTION_INPUT(CMOVPEr16, r/m16, "0F 4A /r", "Move if parity even (PF=1).")
INSTRUCTION_INPUT(CMOVPEr32, r/m32, "0F 4A /r", "Move if parity even (PF=1).")
INSTRUCTION_INPUT(CMOVPEr64, r/m64, "REX.W + 0F 4A /r", "Move if parity even (PF=1).")
INSTRUCTION_INPUT(CMOVPOr16, r/m16, "0F 4B /r", "Move if parity odd (PF=0).")
INSTRUCTION_INPUT(CMOVPOr32, r/m32, "0F 4B /r", "Move if parity odd (PF=0).")
INSTRUCTION_INPUT(CMOVPOr64, r/m64, "REX.W + 0F 4B /r", "Move if parity odd (PF=0).")
INSTRUCTION_INPUT(CMOVSr16, r/m16, "0F 48 /r", "Move if sign (SF=1).")
INSTRUCTION_INPUT(CMOVSr32, r/m32, "0F 48 /r", "Move if sign (SF=1).")
INSTRUCTION_INPUT(CMOVSr64, r/m64, "REX.W + 0F 48 /r", "Move if sign (SF=1).")
INSTRUCTION_INPUT(CMOVZr16, r/m16, "0F 44 /r", "Move if zero (ZF=1).")
INSTRUCTION_INPUT(CMOVZr32, r/m32, "0F 44 /r", "Move if zero (ZF=1).")
INSTRUCTION_INPUT(CMOVZr64, r/m64, "REX.W + 0F 44 /r", "Move if zero (ZF=1).")
INSTRUCTION_INPUT(CMPAL, imm8, "3C ib", "Compare imm8 with AL.")
INSTRUCTION_INPUT(CMPAX, imm16, "3D iw", "Compare imm16 with AX.")
INSTRUCTION_INPUT(CMPEAX, imm32, "3D id", "Compare imm32 with EAX.")
INSTRUCTION_INPUT(CMPRAX, imm32, "REX.W + 3D id", "Compare imm32 sign-extended to 64-bits with RAX.")
INSTRUCTION_INPUT(CMPr/m8, imm8, "80 /7 ib", "Compare imm8 with r/m8.")
INSTRUCTION_INPUT(CMPr/m8, imm8, "REX + 80 /7 ib", "Compare imm8 with r/m8.")
INSTRUCTION_INPUT(CMPr/m16, imm16, "81 /7 iw", "Compare imm16 with r/m16.")
INSTRUCTION_INPUT(CMPr/m32, imm32, "81 /7 id", "Compare imm32 with r/m32.")
INSTRUCTION_INPUT(CMPr/m64, imm32, "REX.W + 81 /7 id", "Compare imm32 sign-extended to 64-bits with r/m64.")
INSTRUCTION_INPUT(CMPr/m16, imm8, "83 /7 ib", "Compare imm8 with r/m16.")
INSTRUCTION_INPUT(CMPr/m32, imm8, "83 /7 ib", "Compare imm8 with r/m32.")
INSTRUCTION_INPUT(CMPr/m64, imm8, "REX.W + 83 /7 ib", "Compare imm8 with r/m64.")
INSTRUCTION_INPUT(CMPr/m8, r8, "38 /r", "Compare r8 with r/m8.")
INSTRUCTION_INPUT(CMPr/m8, r8, "REX + 38 /r", "Compare r8 with r/m8.")
INSTRUCTION_INPUT(CMPr/m16, r16, "39 /r", "Compare r16 with r/m16.")
INSTRUCTION_INPUT(CMPr/m32, r32, "39 /r", "Compare r32 with r/m32.")
INSTRUCTION_INPUT(CMPr/m64,r64, "REX.W + 39 /r", "Compare r64 with r/m64.")
INSTRUCTION_INPUT(CMPr8, r/m8, "3A /r", "Compare r/m8 with r8.")
INSTRUCTION_INPUT(CMPr8, r/m8, "REX + 3A /r", "Compare r/m8 with r8.")
INSTRUCTION_INPUT(CMPr16, r/m16, "3B /r", "Compare r/m16 with r16.")
INSTRUCTION_INPUT(CMPr32, r/m32, "3B /r", "Compare r/m32 with r32.")
INSTRUCTION_INPUT(CMPr64, r/m64, "REX.W + 3B /r", "Compare r/m64 with r64.")
INSTRUCTION_INPUT(CMPPDxmm1, xmm2/m128, imm8, "66 0F C2 /r ib", "Compare packed double-precision floating-point values in xmm2/m128 and xmm1 using bits 2:0 of imm8 as a comparison predicate.")
INSTRUCTION_INPUT(VCMPPDxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F.WIG C2 /r ib", "Compare packed double-precision floating-point values in xmm3/m128 and xmm2 using bits 4:0 of imm8 as a comparison predicate.")
INSTRUCTION_INPUT(VCMPPDymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F.WIG C2 /r ib", "Compare packed double-precision floating-point values in ymm3/m256 and ymm2 using bits 4:0 of imm8 as a comparison predicate.")
INSTRUCTION_INPUT(VCMPPDk1 {k2}, xmm2, xmm3/m128/m64bcst, imm8, "EVEX.NDS.128.66.0F.W1 C2 /r ib", "Compare packed double-precision floating-point values in xmm3/m128/m64bcst and xmm2 using bits 4:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(VCMPPDk1 {k2}, ymm2, ymm3/m256/m64bcst, imm8, "EVEX.NDS.256.66.0F.W1 C2 /r ib", "Compare packed double-precision floating-point values in ymm3/m256/m64bcst and ymm2 using bits 4:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(VCMPPDk1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8, "EVEX.NDS.512.66.0F.W1 C2 /r ib", "Compare packed double-precision floating-point values in zmm3/m512/m64bcst and zmm2 using bits 4:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(CMPPSxmm1, xmm2/m128, imm8, "0F C2 /r ib", "Compare packed single-precision floating-point values in xmm2/m128 and xmm1 using bits 2:0 of imm8 as a comparison predicate.")
INSTRUCTION_INPUT(VCMPPSxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.0F.WIG C2 /r ib", "Compare packed single-precision floating-point values in xmm3/m128 and xmm2 using bits 4:0 of imm8 as a comparison predicate.")
INSTRUCTION_INPUT(VCMPPSymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.0F.WIG C2 /r ib", "Compare packed single-precision floating-point values in ymm3/m256 and ymm2 using bits 4:0 of imm8 as a comparison predicate.")
INSTRUCTION_INPUT(VCMPPSk1 {k2}, xmm2, xmm3/m128/m32bcst, imm8, "EVEX.NDS.128.0F.W0 C2 /r ib", "Compare packed single-precision floating-point values in xmm3/m128/m32bcst and xmm2 using bits 4:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(VCMPPSk1 {k2}, ymm2, ymm3/m256/m32bcst, imm8, "EVEX.NDS.256.0F.W0 C2 /r ib", "Compare packed single-precision floating-point values in ymm3/m256/m32bcst and ymm2 using bits 4:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(VCMPPSk1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8, "EVEX.NDS.512.0F.W0 C2 /r ib", "Compare packed single-precision floating-point values in zmm3/m512/m32bcst and zmm2 using bits 4:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(CMPSDxmm1, xmm2/m64, imm8, "F2 0F C2 /r ib", "Compare low double-precision floating-point value in xmm2/m64 and xmm1 using bits 2:0 of imm8 as comparison predicate.")
INSTRUCTION_INPUT(VCMPSDxmm1, xmm2, xmm3/m64, imm8, "VEX.NDS.128.F2.0F.WIG C2 /r ib", "Compare low double-precision floating-point value in xmm3/m64 and xmm2 using bits 4:0 of imm8 as comparison predicate.")
INSTRUCTION_INPUT(VCMPSDk1 {k2}, xmm2, xmm3/m64{sae}, imm8, "EVEX.NDS.LIG.F2.0F.W1 C2 /r ib", "Compare low double-precision floating-point value in xmm3/m64 and xmm2 using bits 4:0 of imm8 as comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(CMPSSxmm1, xmm2/m32, imm8, "F3 0F C2 /r ib", "Compare low single-precision floating-point value in xmm2/m32 and xmm1 using bits 2:0 of imm8 as comparison predicate.")
INSTRUCTION_INPUT(VCMPSSxmm1, xmm2, xmm3/m32, imm8, "VEX.NDS.128.F3.0F.WIG C2 /r ib", "Compare low single-precision floating-point value in xmm3/m32 and xmm2 using bits 4:0 of imm8 as comparison predicate.")
INSTRUCTION_INPUT(VCMPSSk1 {k2}, xmm2, xmm3/m32{sae}, imm8, "EVEX.NDS.LIG.F3.0F.W0 C2 /r ib", "Compare low single-precision floating-point value in xmm3/m32 and xmm2 using bits 4:0 of imm8 as comparison predicate with writemask k2 and leave the result in mask register k1.")
INSTRUCTION_INPUT(CMPXCHGr/m8, r8, "0F B0/r", "Compare AL with r/m8. If equal, ZF is set and r8 is loaded into r/m8. Else, clear ZF and load r/m8 into AL.")
INSTRUCTION_INPUT(CMPXCHGr/m8,r8, "REX + 0F B0/r", "Compare AL with r/m8. If equal, ZF is set and r8 is loaded into r/m8. Else, clear ZF and load r/m8 into AL.")
INSTRUCTION_INPUT(CMPXCHGr/m16, r16, "0F B1/r", "Compare AX with r/m16. If equal, ZF is set and r16 is loaded into r/m16. Else, clear ZF and load r/m16 into AX.")
INSTRUCTION_INPUT(CMPXCHGr/m32, r32, "0F B1/r", "Compare EAX with r/m32. If equal, ZF is set and r32 is loaded into r/m32. Else, clear ZF and load r/m32 into EAX.")
INSTRUCTION_INPUT(CMPXCHGr/m64, r64, "REX.W + 0F B1/r", "Compare RAX with r/m64. If equal, ZF is set and r64 is loaded into r/m64. Else, clear ZF and load r/m64 into RAX.")
INSTRUCTION_INPUT(COMISDxmm1, xmm2/m64, "66 0F 2F /r", "Compare low double-precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VCOMISDxmm1, xmm2/m64, "VEX.128.66.0F.WIG 2F /r", "Compare low double-precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VCOMISDxmm1, xmm2/m64{sae}, "EVEX.LIG.66.0F.W1 2F /r", "Compare low double-precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(COMISSxmm1, xmm2/m32, "0F 2F /r", "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VCOMISSxmm1, xmm2/m32, "VEX.128.0F.WIG 2F /r", "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VCOMISSxmm1, xmm2/m32{sae}, "EVEX.LIG.0F.W0 2F /r", "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(CPUID, "0F A2", "Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well).")
INSTRUCTION_INPUT(CRC32r32, r/m8, "F2 0F 38 F0 /r", "Accumulate CRC32 on r/m8.")
INSTRUCTION_INPUT(CRC32r32, r/m8, "F2 REX 0F 38 F0 /r", "Accumulate CRC32 on r/m8.")
INSTRUCTION_INPUT(CRC32r32, r/m16, "F2 0F 38 F1 /r", "Accumulate CRC32 on r/m16.")
INSTRUCTION_INPUT(CRC32r32, r/m32, "F2 0F 38 F1 /r", "Accumulate CRC32 on r/m32.")
INSTRUCTION_INPUT(CRC32r64, r/m8, "F2 REX.W 0F 38 F0 /r", "Accumulate CRC32 on r/m8.")
INSTRUCTION_INPUT(CRC32r64, r/m64, "F2 REX.W 0F 38 F1 /r", "Accumulate CRC32 on r/m64.")
INSTRUCTION_INPUT(CVTDQ2PDxmm1, xmm2/m64, "F3 0F E6 /r", "Convert two packed signed doubleword integers from xmm2/mem to two packed double-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTDQ2PDxmm1, xmm2/m64, "VEX.128.F3.0F.WIG E6 /r", "Convert two packed signed doubleword integers from xmm2/mem to two packed double-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTDQ2PDymm1, xmm2/m128, "VEX.256.F3.0F.WIG E6 /r", "Convert four packed signed doubleword integers from xmm2/mem to four packed double-precision floating-point values in ymm1.")
INSTRUCTION_INPUT(VCVTDQ2PDxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.F3.0F.W0 E6 /r", "Convert 2 packed signed doubleword integers from xmm2/m128/m32bcst to eight packed double-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTDQ2PDymm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.256.F3.0F.W0 E6 /r", "Convert 4 packed signed doubleword integers from xmm2/m128/m32bcst to 4 packed double-precision floating-point values in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTDQ2PDzmm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.512.F3.0F.W0 E6 /r", "Convert eight packed signed doubleword integers from ymm2/m256/m32bcst to eight packed double-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(CVTDQ2PSxmm1, xmm2/m128, "0F 5B /r", "Convert four packed signed doubleword integers from xmm2/mem to four packed single-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTDQ2PSxmm1, xmm2/m128, "VEX.128.0F.WIG 5B /r", "Convert four packed signed doubleword integers from xmm2/mem to four packed single-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTDQ2PSymm1, ymm2/m256, "VEX.256.0F.WIG 5B /r", "Convert eight packed signed doubleword integers from ymm2/mem to eight packed single-precision floating-point values in ymm1.")
INSTRUCTION_INPUT(VCVTDQ2PSxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.0F.W0 5B /r", "Convert four packed signed doubleword integers from xmm2/m128/m32bcst to four packed single-precision floating-point values in xmm1with writemask k1.")
INSTRUCTION_INPUT(VCVTDQ2PSymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.0F.W0 5B /r", "Convert eight packed signed doubleword integers from ymm2/m256/m32bcst to eight packed single-precision floating-point values in ymm1with writemask k1.")
INSTRUCTION_INPUT(VCVTDQ2PSzmm1 {k1}{z}, zmm2/m512/m32bcst{er}, "EVEX.512.0F.W0 5B /r", "Convert sixteen packed signed doubleword integers from zmm2/m512/m32bcst to sixteen packed single-precision floating-point values in zmm1with writemask k1.")
INSTRUCTION_INPUT(CVTPD2DQxmm1, xmm2/m128, "F2 0F E6 /r", "Convert two packed double-precision floating-point values in xmm2/mem to two signed doubleword integers in xmm1.")
INSTRUCTION_INPUT(VCVTPD2DQxmm1, xmm2/m128, "VEX.128.F2.0F.WIG E6 /r", "Convert two packed double-precision floating-point values in xmm2/mem to two signed doubleword integers in xmm1.")
INSTRUCTION_INPUT(VCVTPD2DQxmm1, ymm2/m256, "VEX.256.F2.0F.WIG E6 /r", "Convert four packed double-precision floating-point values in ymm2/mem to four signed doubleword integers in xmm1.")
INSTRUCTION_INPUT(VCVTPD2DQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.F2.0F.W1 E6 /r", "Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two signed doubleword integers in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPD2DQxmm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.F2.0F.W1 E6 /r", "Convert four packed double-precision floating-point values in ymm2/m256/m64bcst to four signed doubleword integers in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPD2DQymm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.F2.0F.W1 E6 /r", "Convert eight packed double-precision floating-point values in zmm2/m512/m64bcst to eight signed doubleword integers in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(CVTPD2PImm, xmm/m128, "66 0F 2D /r", "Convert two packed double-precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm.")
INSTRUCTION_INPUT(CVTPD2PSxmm1, xmm2/m128, "66 0F 5A /r", "Convert two packed double-precision floating-point values in xmm2/mem to two single-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTPD2PSxmm1, xmm2/m128, "VEX.128.66.0F.WIG 5A /r", "Convert two packed double-precision floating-point values in xmm2/mem to two single-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTPD2PSxmm1, ymm2/m256, " VEX.256.66.0F.WIG 5A /r", "Convert four packed double-precision floating-point values in ymm2/mem to four single-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTPD2PSxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F.W1 5A /r", "Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two single-precision floating-point values in xmm1with writemask k1.")
INSTRUCTION_INPUT(VCVTPD2PSxmm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F.W1 5A /r", "Convert four packed double-precision floating-point values in ymm2/m256/m64bcst to four single-precision floating-point values in xmm1with writemask k1.")
INSTRUCTION_INPUT(VCVTPD2PSymm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.66.0F.W1 5A /r", "Convert eight packed double-precision floating-point values in zmm2/m512/m64bcst to eight single-precision floating-point values in ymm1with writemask k1.")
INSTRUCTION_INPUT(CVTPI2PDxmm, mm/m64, "66 0F 2A /r", "Convert two packed signed doubleword integers from mm/mem64 to two packed double-precision floating-point values in xmm.")
INSTRUCTION_INPUT(CVTPI2PSxmm, mm/m64, "0F 2A /r", "Convert two signed doubleword integers from mm/m64 to two single-precision floating-point values in xmm.")
INSTRUCTION_INPUT(CVTPS2DQxmm1, xmm2/m128, "66 0F 5B /r", "Convert four packed single-precision floating-point values from xmm2/mem to four packed signed doubleword values in xmm1.")
INSTRUCTION_INPUT(VCVTPS2DQxmm1, xmm2/m128, "VEX.128.66.0F.WIG 5B /r", "Convert four packed single-precision floating-point values from xmm2/mem to four packed signed doubleword values in xmm1.")
INSTRUCTION_INPUT(VCVTPS2DQymm1, ymm2/m256, "VEX.256.66.0F.WIG 5B /r", "Convert eight packed single-precision floating-point values from ymm2/mem to eight packed signed doubleword values in ymm1.")
INSTRUCTION_INPUT(VCVTPS2DQxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.66.0F.W0 5B /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed signed doubleword values in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2DQymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.66.0F.W0 5B /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed signed doubleword values in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2DQzmm1 {k1}{z}, zmm2/m512/m32bcst{er}, "EVEX.512.66.0F.W0 5B /r", "Convert sixteen packed single-precision floating-point values from zmm2/m512/m32bcst to sixteen packed signed doubleword values in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(CVTPS2PDxmm1, xmm2/m64, "0F 5A /r", "Convert two packed single-precision floating-point values in xmm2/m64 to two packed double-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTPS2PDxmm1, xmm2/m64, "VEX.128.0F.WIG 5A /r", "Convert two packed single-precision floating-point values in xmm2/m64 to two packed double-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTPS2PDymm1, xmm2/m128, "VEX.256.0F.WIG 5A /r", "Convert four packed single-precision floating-point values in xmm2/m128 to four packed double-precision floating-point values in ymm1.")
INSTRUCTION_INPUT(VCVTPS2PDxmm1 {k1}{z}, xmm2/m64/m32bcst, "EVEX.128.0F.W0 5A /r", "Convert two packed single-precision floating-point values in xmm2/m64/m32bcst to packed double-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPS2PDymm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.256.0F.W0 5A /r", "Convert four packed single-precision floating-point values in xmm2/m128/m32bcst to packed double-precision floating-point values in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPS2PDzmm1 {k1}{z}, ymm2/m256/m32bcst{sae}, "EVEX.512.0F.W0 5A /r", "Convert eight packed single-precision floating-point values in ymm2/m256/b32bcst to eight packed double-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(CVTPS2PImm, xmm/m64, "0F 2D /r", "Convert two packed single-precision floating-point values from xmm/m64 to two packed signed doubleword integers in mm.")
INSTRUCTION_INPUT(CVTSD2SIr32, xmm1/m64, "F2 0F 2D /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer r32.")
INSTRUCTION_INPUT(CVTSD2SIr64, xmm1/m64, "F2 REX.W 0F 2D /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed quadword integer sign-extended into r64.")
INSTRUCTION_INPUT(VCVTSD2SIr32, xmm1/m64, "VEX.128.F2.0F.W0 2D /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer r32.")
INSTRUCTION_INPUT(VCVTSD2SIr64, xmm1/m64, "VEX.128.F2.0F.W1 2D /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed quadword integer sign-extended into r64.")
INSTRUCTION_INPUT(VCVTSD2SIr32, xmm1/m64{er}, "EVEX.LIG.F2.0F.W0 2D /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer r32.")
INSTRUCTION_INPUT(VCVTSD2SIr64, xmm1/m64{er}, "EVEX.LIG.F2.0F.W1 2D /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed quadword integer sign-extended into r64.")
INSTRUCTION_INPUT(CVTSD2SSxmm1, xmm2/m64, "F2 0F 5A /r", "Convert one double-precision floating-point value in xmm2/m64 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSD2SSxmm1,xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 5A /r", "Convert one double-precision floating-point value in xmm3/m64 to one single-precision floating-point value and merge with high bits in xmm2.")
INSTRUCTION_INPUT(VCVTSD2SSxmm1 {k1}{z}, xmm2, xmm3/m64{er}, "EVEX.NDS.LIG.F2.0F.W1 5A /r", "Convert one double-precision floating-point value in xmm3/m64 to one single-precision floating-point value and merge with high bits in xmm2 under writemask k1.")
INSTRUCTION_INPUT(CVTSI2SDxmm1, r32/m32, "F2 0F 2A /r", "Convert one signed doubleword integer from r32/m32 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(CVTSI2SDxmm1, r/m64, "F2 REX.W 0F 2A /r", "Convert one signed quadword integer from r/m64 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SDxmm1, xmm2, r/m32, "VEX.NDS.128.F2.0F.W0 2A /r", "Convert one signed doubleword integer from r/m32 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SDxmm1, xmm2, r/m64, "VEX.NDS.128.F2.0F.W1 2A /r", "Convert one signed quadword integer from r/m64 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SDxmm1, xmm2, r/m32, "EVEX.NDS.LIG.F2.0F.W0 2A /r", "Convert one signed doubleword integer from r/m32 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SDxmm1, xmm2, r/m64{er}, "EVEX.NDS.LIG.F2.0F.W1 2A /r", "Convert one signed quadword integer from r/m64 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(CVTSI2SSxmm1, r/m32, "F3 0F 2A /r", "Convert one signed doubleword integer from r/m32 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(CVTSI2SSxmm1, r/m64, "F3 REX.W 0F 2A /r", "Convert one signed quadword integer from r/m64 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SSxmm1, xmm2, r/m32, "VEX.NDS.128.F3.0F.W0 2A /r", "Convert one signed doubleword integer from r/m32 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SSxmm1, xmm2, r/m64, "VEX.NDS.128.F3.0F.W1 2A /r", "Convert one signed quadword integer from r/m64 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SSxmm1, xmm2, r/m32{er}, "EVEX.NDS.LIG.F3.0F.W0 2A /r", "Convert one signed doubleword integer from r/m32 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSI2SSxmm1, xmm2, r/m64{er}, "EVEX.NDS.LIG.F3.0F.W1 2A /r", "Convert one signed quadword integer from r/m64 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(CVTSS2SDxmm1, xmm2/m32, "F3 0F 5A /r", "Convert one single-precision floating-point value in xmm2/m32 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTSS2SDxmm1, xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 5A /r", "Convert one single-precision floating-point value in xmm3/m32 to one double-precision floating-point value and merge with high bits of xmm2.")
INSTRUCTION_INPUT(VCVTSS2SDxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, "EVEX.NDS.LIG.F3.0F.W0 5A /r", "Convert one single-precision floating-point value in xmm3/m32 to one double-precision floating-point value and merge with high bits of xmm2 under writemask k1.")
INSTRUCTION_INPUT(CVTSS2SIr32, xmm1/m32, "F3 0F 2D /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32.")
INSTRUCTION_INPUT(CVTSS2SIr64, xmm1/m32, "F3 REX.W 0F 2D /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64.")
INSTRUCTION_INPUT(VCVTSS2SIr32, xmm1/m32, "VEX.128.F3.0F.W0 2D /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32.")
INSTRUCTION_INPUT(VCVTSS2SIr64, xmm1/m32, "VEX.128.F3.0F.W1 2D /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64.")
INSTRUCTION_INPUT(VCVTSS2SIr32, xmm1/m32{er}, "EVEX.LIG.F3.0F.W0 2D /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32.")
INSTRUCTION_INPUT(VCVTSS2SIr64, xmm1/m32{er}, "EVEX.LIG.F3.0F.W1 2D /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64.")
INSTRUCTION_INPUT(CVTTPD2DQxmm1, xmm2/m128, "66 0F E6 /r", "Convert two packed double-precision floating-point values in xmm2/mem to two signed doubleword integers in xmm1 using truncation.")
INSTRUCTION_INPUT(VCVTTPD2DQxmm1, xmm2/m128, "VEX.128.66.0F.WIG E6 /r", "Convert two packed double-precision floating-point values in xmm2/mem to two signed doubleword integers in xmm1 using truncation.")
INSTRUCTION_INPUT(VCVTTPD2DQxmm1, ymm2/m256, "VEX.256.66.0F.WIG E6 /r", "Convert four packed double-precision floating-point values in ymm2/mem to four signed doubleword integers in xmm1 using truncation.")
INSTRUCTION_INPUT(VCVTTPD2DQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F.W1 E6 /r", "Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two signed doubleword integers in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2DQxmm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F.W1 E6 /r", "Convert four packed double-precision floating-point values in ymm2/m256/m64bcst to four signed doubleword integers in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2DQymm1 {k1}{z}, zmm2/m512/m64bcst{sae}, "EVEX.512.66.0F.W1 E6 /r", "Convert eight packed double-precision floating-point values in zmm2/m512/m64bcst to eight signed doubleword integers in ymm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(CVTTPD2PImm, xmm/m128, "66 0F 2C /r", "Convert two packer double-precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm using truncation.")
INSTRUCTION_INPUT(CVTTPS2DQxmm1, xmm2/m128, "F3 0F 5B /r", "Convert four packed single-precision floating-point values from xmm2/mem to four packed signed doubleword values in xmm1 using truncation.")
INSTRUCTION_INPUT(VCVTTPS2DQxmm1, xmm2/m128, "VEX.128.F3.0F.WIG 5B /r", "Convert four packed single-precision floating-point values from xmm2/mem to four packed signed doubleword values in xmm1 using truncation.")
INSTRUCTION_INPUT(VCVTTPS2DQymm1, ymm2/m256, "VEX.256.F3.0F.WIG 5B /r", "Convert eight packed single-precision floating-point values from ymm2/mem to eight packed signed doubleword values in ymm1 using truncation.")
INSTRUCTION_INPUT(VCVTTPS2DQxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.F3.0F.W0 5B /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed signed doubleword values in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2DQymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.F3.0F.W0 5B /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed signed doubleword values in ymm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2DQzmm1 {k1}{z}, zmm2/m512/m32bcst {sae}, "EVEX.512.F3.0F.W0 5B /r", "Convert sixteen packed single-precision floating-point values from zmm2/m512/m32bcst to sixteen packed signed doubleword values in zmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(CVTTPS2PImm, xmm/m64, "0F 2C /r", "Convert two single-precision floating-point values from xmm/m64 to two signed doubleword signed integers in mm using truncation.")
INSTRUCTION_INPUT(CVTTSD2SIr32, xmm1/m64, "F2 0F 2C /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer in r32 using truncation.")
INSTRUCTION_INPUT(CVTTSD2SIr64, xmm1/m64, "F2 REX.W 0F 2C /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed quadword integer in r64 using truncation.")
INSTRUCTION_INPUT(VCVTTSD2SIr32, xmm1/m64, "VEX.128.F2.0F.W0 2C /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer in r32 using truncation.")
INSTRUCTION_INPUT(VCVTTSD2SIr64, xmm1/m64, "VEX.128.F2.0F.W1 2C /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed quadword integer in r64 using truncation.")
INSTRUCTION_INPUT(VCVTTSD2SIr32, xmm1/m64{sae}, "EVEX.LIG.F2.0F.W0 2C /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed doubleword integer in r32 using truncation.")
INSTRUCTION_INPUT(VCVTTSD2SIr64, xmm1/m64{sae}, "EVEX.LIG.F2.0F.W1 2C /r", "Convert one double-precision floating-point value from xmm1/m64 to one signed quadword integer in r64 using truncation.")
INSTRUCTION_INPUT(CVTTSS2SIr32, xmm1/m32, "F3 0F 2C /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32 using truncation.")
INSTRUCTION_INPUT(CVTTSS2SIr64, xmm1/m32, "F3 REX.W 0F 2C /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64 using truncation.")
INSTRUCTION_INPUT(VCVTTSS2SIr32, xmm1/m32, "VEX.128.F3.0F.W0 2C /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32 using truncation.")
INSTRUCTION_INPUT(VCVTTSS2SIr64, xmm1/m32, "VEX.128.F3.0F.W1 2C /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64 using truncation.")
INSTRUCTION_INPUT(VCVTTSS2SIr32, xmm1/m32{sae}, "EVEX.LIG.F3.0F.W0 2C /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed doubleword integer in r32 using truncation.")
INSTRUCTION_INPUT(VCVTTSS2SIr64, xmm1/m32{sae}, "EVEX.LIG.F3.0F.W1 2C /r", "Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64 using truncation.")
INSTRUCTION_INPUT(DAA, "27", "Decimal adjust AL after addition.")
INSTRUCTION_INPUT(DAS, "2F", "Decimal adjust AL after subtraction.")
INSTRUCTION_INPUT(DECr/m8, "FE /1", "Decrement r/m8 by 1.")
INSTRUCTION_INPUT(DECr/m8, "REX + FE /1", "Decrement r/m8 by 1.")
INSTRUCTION_INPUT(DECr/m16, "FF /1", "Decrement r/m16 by 1.")
INSTRUCTION_INPUT(DECr/m32, "FF /1", "Decrement r/m32 by 1.")
INSTRUCTION_INPUT(DECr/m64, "REX.W + FF /1", "Decrement r/m64 by 1.")
INSTRUCTION_INPUT(DECr16, "48+rw", "Decrement r16 by 1.")
INSTRUCTION_INPUT(DECr32, "48+rd", "Decrement r32 by 1.")
INSTRUCTION_INPUT(DIVr/m8, "F6 /6", "Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder.")
INSTRUCTION_INPUT(DIVr/m8, "REX + F6 /6", "Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder.")
INSTRUCTION_INPUT(DIVr/m16, "F7 /6", "Unsigned divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder.")
INSTRUCTION_INPUT(DIVr/m32, "F7 /6", "Unsigned divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder.")
INSTRUCTION_INPUT(DIVr/m64, "REX.W + F7 /6", "Unsigned divide RDX:RAX by r/m64, with result stored in RAX ← Quotient, RDX ← Remainder.")
INSTRUCTION_INPUT(DIVPDxmm1, xmm2/m128, "66 0F 5E /r", "Divide packed double-precision floating-point values in xmm1 by packed double-precision floating-point values in xmm2/mem.")
INSTRUCTION_INPUT(VDIVPDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 5E /r", "Divide packed double-precision floating-point values in xmm2 by packed double-precision floating-point values in xmm3/mem.")
INSTRUCTION_INPUT(VDIVPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 5E /r", "Divide packed double-precision floating-point values in ymm2 by packed double-precision floating-point values in ymm3/mem.")
INSTRUCTION_INPUT(VDIVPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 5E /r", "Divide packed double-precision floating-point values in xmm2 by packed double-precision floating-point values in xmm3/m128/m64bcst and write results to xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VDIVPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 5E /r", "Divide packed double-precision floating-point values in ymm2 by packed double-precision floating-point values in ymm3/m256/m64bcst and write results to ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VDIVPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}, "EVEX.NDS.512.66.0F.W1 5E /r", "Divide packed double-precision floating-point values in zmm2 by packed double-precision FP values in zmm3/m512/m64bcst and write results to zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(DIVPSxmm1, xmm2/m128, "0F 5E /r", "Divide packed single-precision floating-point values in xmm1 by packed single-precision floating-point values in xmm2/mem.")
INSTRUCTION_INPUT(VDIVPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.0F.WIG 5E /r", "Divide packed single-precision floating-point values in xmm2 by packed single-precision floating-point values in xmm3/mem.")
INSTRUCTION_INPUT(VDIVPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F.WIG 5E /r", "Divide packed single-precision floating-point values in ymm2 by packed single-precision floating-point values in ymm3/mem.")
INSTRUCTION_INPUT(VDIVPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 5E /r", "Divide packed single-precision floating-point values in xmm2 by packed single-precision floating-point values in xmm3/m128/m32bcst and write results to xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VDIVPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 5E /r", "Divide packed single-precision floating-point values in ymm2 by packed single-precision floating-point values in ymm3/m256/m32bcst and write results to ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VDIVPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}, "EVEX.NDS.512.0F.W0 5E /r", "Divide packed single-precision floating-point values in zmm2 by packed single-precision floating-point values in zmm3/m512/m32bcst and write results to zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(DIVSDxmm1, xmm2/m64, "F2 0F 5E /r", "Divide low double-precision floating-point value in xmm1 by low double-precision floating-point value in xmm2/m64.")
INSTRUCTION_INPUT(VDIVSDxmm1, xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 5E /r", "Divide low double-precision floating-point value in xmm2 by low double-precision floating-point value in xmm3/m64.")
INSTRUCTION_INPUT(VDIVSDxmm1 {k1}{z}, xmm2, xmm3/m64{er}, "EVEX.NDS.LIG.F2.0F.W1 5E /r", "Divide low double-precision floating-point value in xmm2 by low double-precision floating-point value in xmm3/m64.")
INSTRUCTION_INPUT(DIVSSxmm1, xmm2/m32, "F3 0F 5E /r", "Divide low single-precision floating-point value in xmm1 by low single-precision floating-point value in xmm2/m32.")
INSTRUCTION_INPUT(VDIVSSxmm1, xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 5E /r", "Divide low single-precision floating-point value in xmm2 by low single-precision floating-point value in xmm3/m32.")
INSTRUCTION_INPUT(VDIVSSxmm1 {k1}{z}, xmm2, xmm3/m32{er}, "EVEX.NDS.LIG.F3.0F.W0 5E /r", "Divide low single-precision floating-point value in xmm2 by low single-precision floating-point value in xmm3/m32.")
INSTRUCTION_INPUT(DPPDxmm1, xmm2/m128, imm8, "66 0F 3A 41 /r ib", "Selectively multiply packed DP floating-point values from xmm1 with packed DP floating-point values from xmm2, add and selectively store the packed DP floating-point values to xmm1.")
INSTRUCTION_INPUT(VDPPDxmm1,xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 41 /r ib", "Selectively multiply packed DP floating-point values from xmm2 with packed DP floating-point values from xmm3, add and selectively store the packed DP floating-point values to xmm1.")
INSTRUCTION_INPUT(DPPSxmm1, xmm2/m128, imm8, "66 0F 3A 40 /r ib", "Selectively multiply packed SP floating-point values from xmm1 with packed SP floating-point values from xmm2, add and selectively store the packed SP floating-point values or zero values to xmm1.")
INSTRUCTION_INPUT(VDPPSxmm1,xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 40 /r ib", "Multiply packed SP floating point values from xmm1 with packed SP floating point values from xmm2/mem selectively add and store to xmm1.")
INSTRUCTION_INPUT(VDPPSymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.WIG 40 /r ib", "Multiply packed single-precision floating-point values from ymm2 with packed SP floating point values from ymm3/mem, selectively add pairs of elements and store to ymm1.")
INSTRUCTION_INPUT(EMMS, "0F 77", "Set the x87 FPU tag word to empty.")
INSTRUCTION_INPUT(ENTERimm16, 0, "C8 iw 00", "Create a stack frame for a procedure.")
INSTRUCTION_INPUT(ENTERimm16,1, "C8 iw 01", "Create a stack frame with a nested pointer for a procedure.")
INSTRUCTION_INPUT(ENTERimm16, imm8, "C8 iw ib", "Create a stack frame with nested pointers for a procedure.")
INSTRUCTION_INPUT(EXTRACTPSreg/m32, xmm1, imm8, "66 0F 3A 17 /r ib", "Extract one single-precision floating-point value from xmm1 at the offset specified by imm8 and store the result in reg or m32. Zero extend the results in 64-bit register if applicable.")
INSTRUCTION_INPUT(VEXTRACTPSreg/m32, xmm1, imm8, "VEX.128.66.0F3A.WIG 17 /r ib", "Extract one single-precision floating-point value from xmm1 at the offset specified by imm8 and store the result in reg or m32. Zero extend the results in 64-bit register if applicable.")
INSTRUCTION_INPUT(VEXTRACTPSreg/m32, xmm1, imm8, "EVEX.128.66.0F3A.WIG 17 /r ib", "Extract one single-precision floating-point value from xmm1 at the offset specified by imm8 and store the result in reg or m32. Zero extend the results in 64-bit register if applicable.")
INSTRUCTION_INPUT(FABS, "D9 E1", "Replace ST with its absolute value.")
INSTRUCTION_INPUT(FBLDm80dec, "DF /4", "Convert BCD value to floating-point and push onto the FPU stack.")
INSTRUCTION_INPUT(FBSTPm80bcd, "DF /6", "Store ST(0) in m80bcd and pop ST(0).")
INSTRUCTION_INPUT(FCHS, "D9 E0", "Complements sign of ST(0).")
INSTRUCTION_INPUT(FCMOVBST(0), ST(i), "DA C0+i", "Move if below (CF=1).")
INSTRUCTION_INPUT(FCMOVEST(0), ST(i), "DA C8+i", "Move if equal (ZF=1).")
INSTRUCTION_INPUT(FCMOVBEST(0), ST(i), "DA D0+i", "Move if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(FCMOVUST(0), ST(i), "DA D8+i", "Move if unordered (PF=1).")
INSTRUCTION_INPUT(FCMOVNBST(0), ST(i), "DB C0+i", "Move if not below (CF=0).")
INSTRUCTION_INPUT(FCMOVNEST(0), ST(i), "DB C8+i", "Move if not equal (ZF=0).")
INSTRUCTION_INPUT(FCMOVNBEST(0), ST(i), "DB D0+i", "Move if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(FCMOVNUST(0), ST(i), "DB D8+i", "Move if not unordered (PF=0).")
INSTRUCTION_INPUT(FCOS, "D9 FF", "Replace ST(0) with its approximate cosine.")
INSTRUCTION_INPUT(FDECSTP, "D9 F6", "Decrement TOP field in FPU status word.")
INSTRUCTION_INPUT(FFREEST(i), "DD C0+i", "Sets tag for ST(i) to empty.")
INSTRUCTION_INPUT(FILDm16int, "DF /0", "Push m16int onto the FPU register stack.")
INSTRUCTION_INPUT(FILDm32int, "DB /0", "Push m32int onto the FPU register stack.")
INSTRUCTION_INPUT(FILDm64int, "DF /5", "Push m64int onto the FPU register stack.")
INSTRUCTION_INPUT(FINCSTP, "D9 F7", "Increment the TOP field in the FPU status register.")
INSTRUCTION_INPUT(FISTTPm16int, "DF /1", "Store ST(0) in m16int with truncation.")
INSTRUCTION_INPUT(FISTTPm32int, "DB /1", "Store ST(0) in m32int with truncation.")
INSTRUCTION_INPUT(FISTTPm64int, "DD /1", "Store ST(0) in m64int with truncation.")
INSTRUCTION_INPUT(FLDm32fp, "D9 /0", "Push m32fp onto the FPU register stack.")
INSTRUCTION_INPUT(FLDm64fp, "DD /0", "Push m64fp onto the FPU register stack.")
INSTRUCTION_INPUT(FLDm80fp, "DB /5", "Push m80fp onto the FPU register stack.")
INSTRUCTION_INPUT(FLDST(i), "D9 C0+i", "Push ST(i) onto the FPU register stack.")
INSTRUCTION_INPUT(FLDCWm2byte, "D9 /5", "Load FPU control word from m2byte.")
INSTRUCTION_INPUT(FLDENVm14/28byte, "D9 /4", "Load FPU environment from m14byte or m28byte.")
INSTRUCTION_INPUT(FNOP, "D9 D0", "No operation is performed.")
INSTRUCTION_INPUT(FPATAN, "D9 F3", "Replace ST(1) with arctan(ST(1)/ST(0)) and pop the register stack.")
INSTRUCTION_INPUT(FPREM, "D9 F8", "Replace ST(0) with the remainder obtained from dividing ST(0) by ST(1).")
INSTRUCTION_INPUT(FPREM1, "D9 F5", "Replace ST(0) with the IEEE remainder obtained from dividing ST(0) by ST(1).")
INSTRUCTION_INPUT(FPTAN, "D9 F2", "Replace ST(0) with its approximate tangent and push 1 onto the FPU stack.")
INSTRUCTION_INPUT(FRNDINT, "D9 FC", "Round ST(0) to an integer.")
INSTRUCTION_INPUT(FRSTORm94/108byte, "DD /4", "Load FPU state from m94byte or m108byte.")
INSTRUCTION_INPUT(FSCALE, "D9 FD", "Scale ST(0) by ST(1).")
INSTRUCTION_INPUT(FSIN, "D9 FE", "Replace ST(0) with the approximate of its sine.")
INSTRUCTION_INPUT(FSINCOS, "D9 FB", "Compute the sine and cosine of ST(0); replace ST(0) with the approximate sine, and push the approximate cosine onto the register stack.")
INSTRUCTION_INPUT(FSQRT, "D9 FA", "Computes square root of ST(0) and stores the result in ST(0).")
INSTRUCTION_INPUT(FTST, "D9 E4", "Compare ST(0) with 0.0.")
INSTRUCTION_INPUT(FXAM, "D9 E5", "Classify value or number in ST(0).")
INSTRUCTION_INPUT(FXCHST(i), "D9 C8+i", "Exchange the contents of ST(0) and ST(i).")
INSTRUCTION_INPUT(FXCH, "D9 C9", "Exchange the contents of ST(0) and ST(1).")
INSTRUCTION_INPUT(FXRSTORm512byte, "0F AE /1", "Restore the x87 FPU, MMX, XMM, and MXCSR register state from m512byte.")
INSTRUCTION_INPUT(FXRSTOR64m512byte, "REX.W+ 0F AE /1", "Restore the x87 FPU, MMX, XMM, and MXCSR register state from m512byte.")
INSTRUCTION_INPUT(FXSAVEm512byte, "0F AE /0", "Save the x87 FPU, MMX, XMM, and MXCSR register state to m512byte.")
INSTRUCTION_INPUT(FXSAVE64m512byte, "REX.W+ 0F AE /0", "Save the x87 FPU, MMX, XMM, and MXCSR register state to m512byte.")
INSTRUCTION_INPUT(FXTRACT, "D9 F4", "Separate value in ST(0) into exponent and significand, store exponent in ST(0), and push the significand onto the register stack.")
INSTRUCTION_INPUT(HADDPDxmm1, xmm2/m128, "66 0F 7C /r", "Horizontal add packed double-precision floating-point values from xmm2/m128 to xmm1.")
INSTRUCTION_INPUT(VHADDPDxmm1,xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 7C /r", "Horizontal add packed double-precision floating-point values from xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VHADDPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 7C /r", "Horizontal add packed double-precision floating-point values from ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(HADDPSxmm1, xmm2/m128, "F2 0F 7C /r", "Horizontal add packed single-precision floating-point values from xmm2/m128 to xmm1.")
INSTRUCTION_INPUT(VHADDPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.F2.0F.WIG 7C /r", "Horizontal add packed single-precision floating-point values from xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VHADDPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.F2.0F.WIG 7C /r", "Horizontal add packed single-precision floating-point values from ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(HLT, "F4", "Halt")
INSTRUCTION_INPUT(HSUBPDxmm1, xmm2/m128, "66 0F 7D /r", "Horizontal subtract packed double-precision floating-point values from xmm2/m128 to xmm1.")
INSTRUCTION_INPUT(VHSUBPDxmm1,xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 7D /r", "Horizontal subtract packed double-precision floating-point values from xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VHSUBPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 7D /r", "Horizontal subtract packed double-precision floating-point values from ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(HSUBPSxmm1, xmm2/m128, "F2 0F 7D /r", "Horizontal subtract packed single-precision floating-point values from xmm2/m128 to xmm1.")
INSTRUCTION_INPUT(VHSUBPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.F2.0F.WIG 7D /r", "Horizontal subtract packed single-precision floating-point values from xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VHSUBPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.F2.0F.WIG 7D /r", "Horizontal subtract packed single-precision floating-point values from ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(IDIVr/m8, "F6 /7", "Signed divide AX by r/m8, with result stored in: AL ← Quotient, AH ← Remainder.")
INSTRUCTION_INPUT(IDIVr/m8, "REX + F6 /7", "Signed divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder.")
INSTRUCTION_INPUT(IDIVr/m16, "F7 /7", "Signed divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder.")
INSTRUCTION_INPUT(IDIVr/m32, "F7 /7", "Signed divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder.")
INSTRUCTION_INPUT(IDIVr/m64, "REX.W + F7 /7", "Signed divide RDX:RAX by r/m64, with result stored in RAX ← Quotient, RDX ← Remainder.")
INSTRUCTION_INPUT(IMULr/m8, "F6 /5", "AX← AL ∗ r/m byte.")
INSTRUCTION_INPUT(IMULr/m16, "F7 /5", "DX:AX ← AX ∗ r/m word.")
INSTRUCTION_INPUT(IMULr/m32, "F7 /5", "EDX:EAX ← EAX ∗ r/m32.")
INSTRUCTION_INPUT(IMULr/m64, "REX.W + F7 /5", "RDX:RAX ← RAX ∗ r/m64.")
INSTRUCTION_INPUT(IMULr16, r/m16, "0F AF /r", "word register ← word register ∗ r/m16.")
INSTRUCTION_INPUT(IMULr32, r/m32, "0F AF /r", "doubleword register ← doubleword register ∗ r/m32.")
INSTRUCTION_INPUT(IMULr64, r/m64, "REX.W + 0F AF /r", "Quadword register ← Quadword register ∗ r/m64.")
INSTRUCTION_INPUT(IMULr16, r/m16, imm8, "6B /r ib", "word register ← r/m16 ∗ sign-extended immediate byte.")
INSTRUCTION_INPUT(IMULr32, r/m32, imm8, "6B /r ib", "doubleword register ← r/m32 ∗ sign-extended immediate byte.")
INSTRUCTION_INPUT(IMULr64, r/m64, imm8, "REX.W + 6B /r ib", "Quadword register ← r/m64 ∗ sign-extended immediate byte.")
INSTRUCTION_INPUT(IMULr16, r/m16, imm16, "69 /r iw", "word register ← r/m16 ∗ immediate word.")
INSTRUCTION_INPUT(IMULr32, r/m32, imm32, "69 /r id", "doubleword register ← r/m32 ∗ immediate doubleword.")
INSTRUCTION_INPUT(IMULr64, r/m64, imm32, "REX.W + 69 /r id", "Quadword register ← r/m64 ∗ immediate doubleword.")
INSTRUCTION_INPUT(INAL, imm8, "E4 ib", "Input byte from imm8 I/O port address into AL.")
INSTRUCTION_INPUT(INAX, imm8, "E5 ib", "Input word from imm8 I/O port address into AX.")
INSTRUCTION_INPUT(INEAX, imm8, "E5 ib", "Input dword from imm8 I/O port address into EAX.")
INSTRUCTION_INPUT(INAL,DX, "EC", "Input byte from I/O port in DX into AL.")
INSTRUCTION_INPUT(INAX,DX, "ED", "Input word from I/O port in DX into AX.")
INSTRUCTION_INPUT(INEAX,DX, "ED", "Input doubleword from I/O port in DX into EAX.")
INSTRUCTION_INPUT(INCr/m8, "FE /0", "Increment r/m byte by 1.")
INSTRUCTION_INPUT(INCr/m8, "REX + FE /0", "Increment r/m byte by 1.")
INSTRUCTION_INPUT(INCr/m16, "FF /0", "Increment r/m word by 1.")
INSTRUCTION_INPUT(INCr/m32, "FF /0", "Increment r/m doubleword by 1.")
INSTRUCTION_INPUT(INCr/m64, "REX.W + FF /0", "Increment r/m quadword by 1.")
INSTRUCTION_INPUT(INCr16, "40+ rw", "Increment word register by 1.")
INSTRUCTION_INPUT(INCr32, "40+ rd", "Increment doubleword register by 1.")
INSTRUCTION_INPUT(INSERTPSxmm1, xmm2/m32, imm8, "66 0F 3A 21 /r ib", "Insert a single-precision floating-point value selected by imm8 from xmm2/m32 into xmm1 at the specified destination element specified by imm8 and zero out destination elements in xmm1 as indicated in imm8.")
INSTRUCTION_INPUT(VINSERTPSxmm1, xmm2, xmm3/m32, imm8, "VEX.NDS.128.66.0F3A.WIG 21 /r ib", "Insert a single-precision floating-point value selected by imm8 from xmm3/m32 and merge with values in xmm2 at the specified destination element specified by imm8 and write out the result and zero out destination elements in xmm1 as indicated in imm8.")
INSTRUCTION_INPUT(VINSERTPSxmm1, xmm2, xmm3/m32, imm8, "EVEX.NDS.128.66.0F3A.W0 21 /r ib", "Insert a single-precision floating-point value selected by imm8 from xmm3/m32 and merge with values in xmm2 at the specified destination element specified by imm8 and write out the result and zero out destination elements in xmm1 as indicated in imm8.")
INSTRUCTION_INPUT(INVD, "0F 08", "Flush internal caches; initiate flushing of external caches.")
INSTRUCTION_INPUT(INVLPGm, "0F 01/7", "Invalidate TLB entries for page containing m.")
INSTRUCTION_INPUT(INVPCIDr32, m128, "66 0F 38 82 /r", "Invalidates entries in the TLBs and paging-structure caches based on invalidation type in r32 and descrip-tor in m128.")
INSTRUCTION_INPUT(INVPCIDr64, m128, "66 0F 38 82 /r", "Invalidates entries in the TLBs and paging-structure caches based on invalidation type in r64 and descrip-tor in m128.")
INSTRUCTION_INPUT(JMPrel8, "EB cb", "Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits")
INSTRUCTION_INPUT(JMPrel16, "E9 cw", "Jump near, relative, displacement relative to next instruction. Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JMPrel32, "E9 cd", "Jump near, relative, RIP = RIP + 32-bit displacement sign extended to 64-bits")
INSTRUCTION_INPUT(JMPr/m16, "FF /4", "Jump near, absolute indirect, address = zero-extended r/m16. Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JMPr/m32, "FF /4", "Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JMPr/m64, "FF /4", "Jump near, absolute indirect, RIP = 64-Bit offset from register or memory")
INSTRUCTION_INPUT(JMPptr16:16, "EA cd", "Jump far, absolute, address given in operand")
INSTRUCTION_INPUT(JMPptr16:32, "EA cp", "Jump far, absolute, address given in operand")
INSTRUCTION_INPUT(JMPm16:16, "FF /5", "Jump far, absolute indirect, address given in m16:16")
INSTRUCTION_INPUT(JMPm16:32, "FF /5", "Jump far, absolute indirect, address given in m16:32.")
INSTRUCTION_INPUT(JMPm16:64, "REX.W + FF /5", "Jump far, absolute indirect, address given in m16:64.")
INSTRUCTION_INPUT(JArel8, "77 cb", "Jump short if above (CF=0 and ZF=0).")
INSTRUCTION_INPUT(JAErel8, "73 cb", "Jump short if above or equal (CF=0).")
INSTRUCTION_INPUT(JBrel8, "72 cb", "Jump short if below (CF=1).")
INSTRUCTION_INPUT(JBErel8, "76 cb", "Jump short if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(JCrel8, "72 cb", "Jump short if carry (CF=1).")
INSTRUCTION_INPUT(JCXZrel8, "E3 cb", "Jump short if CX register is 0.")
INSTRUCTION_INPUT(JECXZrel8, "E3 cb", "Jump short if ECX register is 0.")
INSTRUCTION_INPUT(JRCXZrel8, "E3 cb", "Jump short if RCX register is 0.")
INSTRUCTION_INPUT(JErel8, "74 cb", "Jump short if equal (ZF=1).")
INSTRUCTION_INPUT(JGrel8, "7F cb", "Jump short if greater (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(JGErel8, "7D cb", "Jump short if greater or equal (SF=OF).")
INSTRUCTION_INPUT(JLrel8, "7C cb", "Jump short if less (SF≠ OF).")
INSTRUCTION_INPUT(JLErel8, "7E cb", "Jump short if less or equal (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(JNArel8, "76 cb", "Jump short if not above (CF=1 or ZF=1).")
INSTRUCTION_INPUT(JNAErel8, "72 cb", "Jump short if not above or equal (CF=1).")
INSTRUCTION_INPUT(JNBrel8, "73 cb", "Jump short if not below (CF=0).")
INSTRUCTION_INPUT(JNBErel8, "77 cb", "Jump short if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(JNCrel8, "73 cb", "Jump short if not carry (CF=0).")
INSTRUCTION_INPUT(JNErel8, "75 cb", "Jump short if not equal (ZF=0).")
INSTRUCTION_INPUT(JNGrel8, "7E cb", "Jump short if not greater (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(JNGErel8, "7C cb", "Jump short if not greater or equal (SF≠ OF).")
INSTRUCTION_INPUT(JNLrel8, "7D cb", "Jump short if not less (SF=OF).")
INSTRUCTION_INPUT(JNLErel8, "7F cb", "Jump short if not less or equal (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(JNOrel8, "71 cb", "Jump short if not overflow (OF=0).")
INSTRUCTION_INPUT(JNPrel8, "7B cb", "Jump short if not parity (PF=0).")
INSTRUCTION_INPUT(JNSrel8, "79 cb", "Jump short if not sign (SF=0).")
INSTRUCTION_INPUT(JNZrel8, "75 cb", "Jump short if not zero (ZF=0).")
INSTRUCTION_INPUT(JOrel8, "70 cb", "Jump short if overflow (OF=1).")
INSTRUCTION_INPUT(JPrel8, "7A cb", "Jump short if parity (PF=1).")
INSTRUCTION_INPUT(JPErel8, "7A cb", "Jump short if parity even (PF=1).")
INSTRUCTION_INPUT(JPOrel8, "7B cb", "Jump short if parity odd (PF=0).")
INSTRUCTION_INPUT(JSrel8, "78 cb", "Jump short if sign (SF=1).")
INSTRUCTION_INPUT(JZrel8, "74 cb", "Jump short if zero (ZF = 1).")
INSTRUCTION_INPUT(JArel16, "0F 87 cw", "Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JArel32, "0F 87 cd", "Jump near if above (CF=0 and ZF=0).")
INSTRUCTION_INPUT(JAErel16, "0F 83 cw", "Jump near if above or equal (CF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JAErel32, "0F 83 cd", "Jump near if above or equal (CF=0).")
INSTRUCTION_INPUT(JBrel16, "0F 82 cw", "Jump near if below (CF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JBrel32, "0F 82 cd", "Jump near if below (CF=1).")
INSTRUCTION_INPUT(JBErel16, "0F 86 cw", "Jump near if below or equal (CF=1 or ZF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JBErel32, "0F 86 cd", "Jump near if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(JCrel16, "0F 82 cw", "Jump near if carry (CF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JCrel32, "0F 82 cd", "Jump near if carry (CF=1).")
INSTRUCTION_INPUT(JErel16, "0F 84 cw", "Jump near if equal (ZF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JErel32, "0F 84 cd", "Jump near if equal (ZF=1).")
INSTRUCTION_INPUT(JZrel16, "0F 84 cw", "Jump near if 0 (ZF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JZrel32, "0F 84 cd", "Jump near if 0 (ZF=1).")
INSTRUCTION_INPUT(JGrel16, "0F 8F cw", "Jump near if greater (ZF=0 and SF=OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JGrel32, "0F 8F cd", "Jump near if greater (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(JGErel16, "0F 8D cw", "Jump near if greater or equal (SF=OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JGErel32, "0F 8D cd", "Jump near if greater or equal (SF=OF).")
INSTRUCTION_INPUT(JLrel16, "0F 8C cw", "Jump near if less (SF≠ OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JLrel32, "0F 8C cd", "Jump near if less (SF≠ OF).")
INSTRUCTION_INPUT(JLErel16, "0F 8E cw", "Jump near if less or equal (ZF=1 or SF≠ OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JLErel32, "0F 8E cd", "Jump near if less or equal (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(JNArel16, "0F 86 cw", "Jump near if not above (CF=1 or ZF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNArel32, "0F 86 cd", "Jump near if not above (CF=1 or ZF=1).")
INSTRUCTION_INPUT(JNAErel16, "0F 82 cw", "Jump near if not above or equal (CF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNAErel32, "0F 82 cd", "Jump near if not above or equal (CF=1).")
INSTRUCTION_INPUT(JNBrel16, "0F 83 cw", "Jump near if not below (CF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNBrel32, "0F 83 cd", "Jump near if not below (CF=0).")
INSTRUCTION_INPUT(JNBErel16, "0F 87 cw", "Jump near if not below or equal (CF=0 and ZF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNBErel32, "0F 87 cd", "Jump near if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(JNCrel16, "0F 83 cw", "Jump near if not carry (CF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNCrel32, "0F 83 cd", "Jump near if not carry (CF=0).")
INSTRUCTION_INPUT(JNErel16, "0F 85 cw", "Jump near if not equal (ZF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNErel32, "0F 85 cd", "Jump near if not equal (ZF=0).")
INSTRUCTION_INPUT(JNGrel16, "0F 8E cw", "Jump near if not greater (ZF=1 or SF≠ OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNGrel32, "0F 8E cd", "Jump near if not greater (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(JNGErel16, "0F 8C cw", "Jump near if not greater or equal (SF≠ OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNGErel32, "0F 8C cd", "Jump near if not greater or equal (SF≠ OF).")
INSTRUCTION_INPUT(JNLrel16, "0F 8D cw", "Jump near if not less (SF=OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNLrel32, "0F 8D cd", "Jump near if not less (SF=OF).")
INSTRUCTION_INPUT(JNLErel16, "0F 8F cw", "Jump near if not less or equal (ZF=0 and SF=OF). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNLErel32, "0F 8F cd", "Jump near if not less or equal (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(JNOrel16, "0F 81 cw", "Jump near if not overflow (OF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNOrel32, "0F 81 cd", "Jump near if not overflow (OF=0).")
INSTRUCTION_INPUT(JNPrel16, "0F 8B cw", "Jump near if not parity (PF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNPrel32, "0F 8B cd", "Jump near if not parity (PF=0).")
INSTRUCTION_INPUT(JNSrel16, "0F 89 cw", "Jump near if not sign (SF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNSrel32, "0F 89 cd", "Jump near if not sign (SF=0).")
INSTRUCTION_INPUT(JNZrel16, "0F 85 cw", "Jump near if not zero (ZF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JNZrel32, "0F 85 cd", "Jump near if not zero (ZF=0).")
INSTRUCTION_INPUT(JOrel16, "0F 80 cw", "Jump near if overflow (OF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JOrel32, "0F 80 cd", "Jump near if overflow (OF=1).")
INSTRUCTION_INPUT(JPrel16, "0F 8A cw", "Jump near if parity (PF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JPrel32, "0F 8A cd", "Jump near if parity (PF=1).")
INSTRUCTION_INPUT(JPErel16, "0F 8A cw", "Jump near if parity even (PF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JPErel32, "0F 8B cd", "Jump near if parity even (PF=1).")
INSTRUCTION_INPUT(JPOrel16, "0F 8A cw", "Jump near if parity odd (PF=0). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JPOrel32, "0F 8B cd", "Jump near if parity odd (PF=0).")
INSTRUCTION_INPUT(JSrel16, "0F 88 cw", "Jump near if sign (SF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JSrel32, "0F 88 cd", "Jump near if sign (SF=1).")
INSTRUCTION_INPUT(JZrel16, "0F 84 cw", "Jump near if 0 (ZF=1). Not supported in 64-bit mode.")
INSTRUCTION_INPUT(JZrel32, "0F 84 cd", "Jump near if 0 (ZF=1).")
INSTRUCTION_INPUT(LAHF, "9F", "Load: AH ← EFLAGS(SF:ZF:0:AF:0:PF:1:CF).")
INSTRUCTION_INPUT(LARr16, r16/m16, "0F 02 /r", "r16 ← access rights referenced by r16/m16")
INSTRUCTION_INPUT(LARreg, r32/m16, "0F 02 /r", "reg ← access rights referenced by r32/m16")
INSTRUCTION_INPUT(LDDQUxmm1, mem, "F2 0F F0 /r", "Load unaligned data from mem and return double quadword in xmm1.")
INSTRUCTION_INPUT(VLDDQUxmm1, m128, "VEX.128.F2.0F.WIG F0 /r", "Load unaligned packed integer values from mem to xmm1.")
INSTRUCTION_INPUT(VLDDQUymm1, m256, "VEX.256.F2.0F.WIG F0 /r", "Load unaligned packed integer values from mem to ymm1.")
INSTRUCTION_INPUT(LDMXCSRm32, "0F AE /2", "Load MXCSR register from m32.")
INSTRUCTION_INPUT(VLDMXCSRm32, "VEX.LZ.0F.WIG AE /2", "Load MXCSR register from m32.")
INSTRUCTION_INPUT(LEAr16,m, "8D /r", "Store effective address for m in register r16.")
INSTRUCTION_INPUT(LEAr32,m, "8D /r", "Store effective address for m in register r32.")
INSTRUCTION_INPUT(LEAr64,m, "REX.W + 8D /r", "Store effective address for m in register r64.")
INSTRUCTION_INPUT(LEAVE, "C9", "Set SP to BP, then pop BP.")
INSTRUCTION_INPUT(LEAVE, "C9", "Set ESP to EBP, then pop EBP.")
INSTRUCTION_INPUT(LEAVE, "C9", "Set RSP to RBP, then pop RBP.")
INSTRUCTION_INPUT(LFENCE, "0F AE E8", "Serializes load operations.")
INSTRUCTION_INPUT(LLDTr/m16, "0F 00 /2", "Load segment selector r/m16 into LDTR.")
INSTRUCTION_INPUT(LMSWr/m16, "0F 01 /6", "Loads r/m16 in machine status word of CR0.")
INSTRUCTION_INPUT(LOCK, "F0", "Asserts LOCK# signal for duration of the accompanying instruction.")
INSTRUCTION_INPUT(LSLr16, r16/m16, "0F 03 /r", "Load: r16 ← segment limit, selector r16/m16.")
INSTRUCTION_INPUT(LSLr32, r32/m16, "0F 03 /r", "Load: r32 ← segment limit, selector r32/m16.")
INSTRUCTION_INPUT(LSLr64, r32/m16, "REX.W + 0F 03 /r", "Load: r64 ← segment limit, selector r32/m16")
INSTRUCTION_INPUT(LTRr/m16, "0F 00 /3", "Load r/m16 into task register.")
INSTRUCTION_INPUT(LZCNTr16, r/m16, "F3 0F BD /r", "Count the number of leading zero bits in r/m16, return result in r16.")
INSTRUCTION_INPUT(LZCNTr32, r/m32, "F3 0F BD /r", "Count the number of leading zero bits in r/m32, return result in r32.")
INSTRUCTION_INPUT(LZCNTr64, r/m64, "F3 REX.W 0F BD /r", "Count the number of leading zero bits in r/m64, return result in r64.")
INSTRUCTION_INPUT(MASKMOVDQUxmm1, xmm2, "66 0F F7 /r", "Selectively write bytes from xmm1 to memory location using the byte mask in xmm2. The default memory location is specified by DS:DI/EDI/RDI.")
INSTRUCTION_INPUT(VMASKMOVDQUxmm1, xmm2, "VEX.128.66.0F.WIG F7 /r", "Selectively write bytes from xmm1 to memory location using the byte mask in xmm2. The default memory location is specified by DS:DI/EDI/RDI.")
INSTRUCTION_INPUT(MASKMOVQmm1, mm2, "0F F7 /r", "Selectively write bytes from mm1 to memory location using the byte mask in mm2. The default memory location is specified by DS:DI/EDI/RDI.")
INSTRUCTION_INPUT(MAXPDxmm1, xmm2/m128, "66 0F 5F /r", "Return the maximum double-precision floating-point values between xmm1 and xmm2/m128.")
INSTRUCTION_INPUT(VMAXPDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 5F /r", "Return the maximum double-precision floating-point values between xmm2 and xmm3/m128.")
INSTRUCTION_INPUT(VMAXPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 5F /r", "Return the maximum packed double-precision floating-point values between ymm2 and ymm3/m256.")
INSTRUCTION_INPUT(VMAXPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 5F /r", "Return the maximum packed double-precision floating-point values between xmm2 and xmm3/m128/m64bcst and store result in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMAXPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 5F /r", "Return the maximum packed double-precision floating-point values between ymm2 and ymm3/m256/m64bcst and store result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMAXPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, "EVEX.NDS.512.66.0F.W1 5F /r", "Return the maximum packed double-precision floating-point values between zmm2 and zmm3/m512/m64bcst and store result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(MAXPSxmm1, xmm2/m128, "0F 5F /r", "Return the maximum single-precision floating-point values between xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VMAXPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.0F.WIG 5F /r", "Return the maximum single-precision floating-point values between xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VMAXPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F.WIG 5F /r", "Return the maximum single-precision floating-point values between ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VMAXPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 5F /r", "Return the maximum packed single-precision floating-point values between xmm2 and xmm3/m128/m32bcst and store result in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMAXPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 5F /r", "Return the maximum packed single-precision floating-point values between ymm2 and ymm3/m256/m32bcst and store result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMAXPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, "EVEX.NDS.512.0F.W0 5F /r", "Return the maximum packed single-precision floating-point values between zmm2 and zmm3/m512/m32bcst and store result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(MAXSDxmm1, xmm2/m64, "F2 0F 5F /r", "Return the maximum scalar double-precision floating-point value between xmm2/m64 and xmm1.")
INSTRUCTION_INPUT(VMAXSDxmm1, xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 5F /r", "Return the maximum scalar double-precision floating-point value between xmm3/m64 and xmm2.")
INSTRUCTION_INPUT(VMAXSDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, "EVEX.NDS.LIG.F2.0F.W1 5F /r", "Return the maximum scalar double-precision floating-point value between xmm3/m64 and xmm2.")
INSTRUCTION_INPUT(MAXSSxmm1, xmm2/m32, "F3 0F 5F /r", "Return the maximum scalar single-precision floating-point value between xmm2/m32 and xmm1.")
INSTRUCTION_INPUT(VMAXSSxmm1, xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 5F /r", "Return the maximum scalar single-precision floating-point value between xmm3/m32 and xmm2.")
INSTRUCTION_INPUT(VMAXSSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, "EVEX.NDS.LIG.F3.0F.W0 5F /r", "Return the maximum scalar single-precision floating-point value between xmm3/m32 and xmm2.")
INSTRUCTION_INPUT(MFENCE, "0F AE F0", "Serializes load and store operations.")
INSTRUCTION_INPUT(MINPDxmm1, xmm2/m128, "66 0F 5D /r", "Return the minimum double-precision floating-point values between xmm1 and xmm2/mem")
INSTRUCTION_INPUT(VMINPDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 5D /r", "Return the minimum double-precision floating-point values between xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VMINPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 5D /r", "Return the minimum packed double-precision floating-point values between ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VMINPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 5D /r", "Return the minimum packed double-precision floating-point values between xmm2 and xmm3/m128/m64bcst and store result in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMINPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 5D /r", "Return the minimum packed double-precision floating-point values between ymm2 and ymm3/m256/m64bcst and store result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMINPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, "EVEX.NDS.512.66.0F.W1 5D /r", "Return the minimum packed double-precision floating-point values between zmm2 and zmm3/m512/m64bcst and store result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(MINPSxmm1, xmm2/m128, "0F 5D /r", "Return the minimum single-precision floating-point values between xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VMINPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.0F.WIG 5D /r", "Return the minimum single-precision floating-point values between xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VMINPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F.WIG 5D /r", "Return the minimum single double-precision floating-point values between ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VMINPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 5D /r", "Return the minimum packed single-precision floating-point values between xmm2 and xmm3/m128/m32bcst and store result in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMINPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 5D /r", "Return the minimum packed single-precision floating-point values between ymm2 and ymm3/m256/m32bcst and store result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMINPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, "EVEX.NDS.512.0F.W0 5D /r", "Return the minimum packed single-precision floating-point values between zmm2 and zmm3/m512/m32bcst and store result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(MINSDxmm1, xmm2/m64, "F2 0F 5D /r", "Return the minimum scalar double-precision floating-point value between xmm2/m64 and xmm1.")
INSTRUCTION_INPUT(VMINSDxmm1, xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 5D /r", "Return the minimum scalar double-precision floating-point value between xmm3/m64 and xmm2.")
INSTRUCTION_INPUT(VMINSDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, "EVEX.NDS.LIG.F2.0F.W1 5D /r", "Return the minimum scalar double-precision floating-point value between xmm3/m64 and xmm2.")
INSTRUCTION_INPUT(MINSSxmm1,xmm2/m32, "F3 0F 5D /r", "Return the minimum scalar single-precision floating-point value between xmm2/m32 and xmm1.")
INSTRUCTION_INPUT(VMINSSxmm1,xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 5D /r", "Return the minimum scalar single-precision floating-point value between xmm3/m32 and xmm2.")
INSTRUCTION_INPUT(VMINSSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, "EVEX.NDS.LIG.F3.0F.W0 5D /r", "Return the minimum scalar single-precision floating-point value between xmm3/m32 and xmm2.")
INSTRUCTION_INPUT(MONITOR, "0F 01 C8", "Sets up a linear address range to be monitored by hardware and activates the monitor. The address range should be a write-back memory caching type. The address is DS:EAX (DS:RAX in 64-bit mode).")
INSTRUCTION_INPUT(MOVAPDxmm1, xmm2/m128, "66 0F 28 /r", "Move aligned packed double-precision floating-point values from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(MOVAPDxmm2/m128, xmm1, "66 0F 29 /r", "Move aligned packed double-precision floating-point values from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVAPDxmm1, xmm2/m128, "VEX.128.66.0F.WIG 28 /r", "Move aligned packed double-precision floating-point values from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(VMOVAPDxmm2/m128, xmm1, "VEX.128.66.0F.WIG 29 /r", "Move aligned packed double-precision floating-point values from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVAPDymm1, ymm2/m256, "VEX.256.66.0F.WIG 28 /r", "Move aligned packed double-precision floating-point values from ymm2/mem to ymm1.")
INSTRUCTION_INPUT(VMOVAPDymm2/m256, ymm1, "VEX.256.66.0F.WIG 29 /r", "Move aligned packed double-precision floating-point values from ymm1 to ymm2/mem.")
INSTRUCTION_INPUT(VMOVAPDxmm1 {k1}{z}, xmm2/m128, "EVEX.128.66.0F.W1 28 /r", "Move aligned packed double-precision floating-point values from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPDymm1 {k1}{z}, ymm2/m256, "EVEX.256.66.0F.W1 28 /r", "Move aligned packed double-precision floating-point values from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPDzmm1 {k1}{z}, zmm2/m512, "EVEX.512.66.0F.W1 28 /r", "Move aligned packed double-precision floating-point values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPDxmm2/m128 {k1}{z}, xmm1, "EVEX.128.66.0F.W1 29 /r", "Move aligned packed double-precision floating-point values from xmm1 to xmm2/m128 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPDymm2/m256 {k1}{z}, ymm1, "EVEX.256.66.0F.W1 29 /r", "Move aligned packed double-precision floating-point values from ymm1 to ymm2/m256 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPDzmm2/m512 {k1}{z}, zmm1, "EVEX.512.66.0F.W1 29 /r", "Move aligned packed double-precision floating-point values from zmm1 to zmm2/m512 using writemask k1.")
INSTRUCTION_INPUT(MOVAPSxmm1, xmm2/m128, "0F 28 /r", "Move aligned packed single-precision floating-point values from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(MOVAPSxmm2/m128, xmm1, "0F 29 /r", "Move aligned packed single-precision floating-point values from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVAPSxmm1, xmm2/m128, "VEX.128.0F.WIG 28 /r", "Move aligned packed single-precision floating-point values from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(VMOVAPSxmm2/m128, xmm1, "VEX.128.0F.WIG 29 /r", "Move aligned packed single-precision floating-point values from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVAPSymm1, ymm2/m256, "VEX.256.0F.WIG 28 /r", "Move aligned packed single-precision floating-point values from ymm2/mem to ymm1.")
INSTRUCTION_INPUT(VMOVAPSymm2/m256, ymm1, "VEX.256.0F.WIG 29 /r", "Move aligned packed single-precision floating-point values from ymm1 to ymm2/mem.")
INSTRUCTION_INPUT(VMOVAPSxmm1 {k1}{z}, xmm2/m128, "EVEX.128.0F.W0 28 /r", "Move aligned packed single-precision floating-point values from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPSymm1 {k1}{z}, ymm2/m256, "EVEX.256.0F.W0 28 /r", "Move aligned packed single-precision floating-point values from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPSzmm1 {k1}{z}, zmm2/m512, "EVEX.512.0F.W0 28 /r", "Move aligned packed single-precision floating-point values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPSxmm2/m128 {k1}{z}, xmm1, "EVEX.128.0F.W0 29 /r", "Move aligned packed single-precision floating-point values from xmm1 to xmm2/m128 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPSymm2/m256 {k1}{z}, ymm1, "EVEX.256.0F.W0 29 /r", "Move aligned packed single-precision floating-point values from ymm1 to ymm2/m256 using writemask k1.")
INSTRUCTION_INPUT(VMOVAPSzmm2/m512 {k1}{z}, zmm1, "EVEX.512.0F.W0 29 /r", "Move aligned packed single-precision floating-point values from zmm1 to zmm2/m512 using writemask k1.")
INSTRUCTION_INPUT(MOVBEr16, m16, "0F 38 F0 /r", "Reverse byte order in m16 and move to r16.")
INSTRUCTION_INPUT(MOVBEr32, m32, "0F 38 F0 /r", "Reverse byte order in m32 and move to r32.")
INSTRUCTION_INPUT(MOVBEr64, m64, "REX.W + 0F 38 F0 /r", "Reverse byte order in m64 and move to r64.")
INSTRUCTION_INPUT(MOVBEm16, r16, "0F 38 F1 /r", "Reverse byte order in r16 and move to m16.")
INSTRUCTION_INPUT(MOVBEm32, r32, "0F 38 F1 /r", "Reverse byte order in r32 and move to m32.")
INSTRUCTION_INPUT(MOVBEm64, r64, "REX.W + 0F 38 F1 /r", "Reverse byte order in r64 and move to m64.")
INSTRUCTION_INPUT(MOVDDUPxmm1, xmm2/m64, "F2 0F 12 /r", "Move double-precision floating-point value from xmm2/m64 and duplicate into xmm1.")
INSTRUCTION_INPUT(VMOVDDUPxmm1, xmm2/m64, "VEX.128.F2.0F.WIG 12 /r", "Move double-precision floating-point value from xmm2/m64 and duplicate into xmm1.")
INSTRUCTION_INPUT(VMOVDDUPymm1, ymm2/m256, "VEX.256.F2.0F.WIG 12 /r", "Move even index double-precision floating-point values from ymm2/mem and duplicate each element into ymm1.")
INSTRUCTION_INPUT(VMOVDDUPxmm1 {k1}{z}, xmm2/m64, "EVEX.128.F2.0F.W1 12 /r", "Move double-precision floating-point value from xmm2/m64 and duplicate each element into xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMOVDDUPymm1 {k1}{z}, ymm2/m256, "EVEX.256.F2.0F.W1 12 /r", "Move even index double-precision floating-point values from ymm2/m256 and duplicate each element into ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VMOVDDUPzmm1 {k1}{z}, zmm2/m512, "EVEX.512.F2.0F.W1 12 /r", "Move even index double-precision floating-point values from zmm2/m512 and duplicate each element into zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(MOVDQ2Qmm, xmm, "F2 0F D6 /r", "Move low quadword from xmm to mmx register.")
INSTRUCTION_INPUT(MOVHLPSxmm1, xmm2, "0F 12 /r", "Move two packed single-precision floating-point values from high quadword of xmm2 to low quadword of xmm1.")
INSTRUCTION_INPUT(VMOVHLPSxmm1, xmm2, xmm3, "VEX.NDS.128.0F.WIG 12 /r", "Merge two packed single-precision floating-point values from high quadword of xmm3 and low quadword of xmm2.")
INSTRUCTION_INPUT(VMOVHLPSxmm1, xmm2, xmm3, "EVEX.NDS.128.0F.W0 12 /r", "Merge two packed single-precision floating-point values from high quadword of xmm3 and low quadword of xmm2.")
INSTRUCTION_INPUT(MOVHPDxmm1, m64, "66 0F 16 /r", "Move double-precision floating-point value from m64 to high quadword of xmm1.")
INSTRUCTION_INPUT(VMOVHPDxmm2, xmm1, m64, "VEX.NDS.128.66.0F.WIG 16 /r", "Merge double-precision floating-point value from m64 and the low quadword of xmm1.")
INSTRUCTION_INPUT(VMOVHPDxmm2, xmm1, m64, "EVEX.NDS.128.66.0F.W1 16 /r", "Merge double-precision floating-point value from m64 and the low quadword of xmm1.")
INSTRUCTION_INPUT(MOVHPDm64, xmm1, "66 0F 17 /r", "Move double-precision floating-point value from high quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVHPDm64, xmm1, "VEX.128.66.0F.WIG 17 /r", "Move double-precision floating-point value from high quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVHPDm64, xmm1, "EVEX.128.66.0F.W1 17 /r", "Move double-precision floating-point value from high quadword of xmm1 to m64.")
INSTRUCTION_INPUT(MOVHPSxmm1, m64, "0F 16 /r", "Move two packed single-precision floating-point values from m64 to high quadword of xmm1.")
INSTRUCTION_INPUT(VMOVHPSxmm2, xmm1, m64, "VEX.NDS.128.0F.WIG 16 /r", "Merge two packed single-precision floating-point values from m64 and the low quadword of xmm1.")
INSTRUCTION_INPUT(VMOVHPSxmm2, xmm1, m64, "EVEX.NDS.128.0F.W0 16 /r", "Merge two packed single-precision floating-point values from m64 and the low quadword of xmm1.")
INSTRUCTION_INPUT(MOVHPSm64, xmm1, "0F 17 /r", "Move two packed single-precision floating-point values from high quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVHPSm64, xmm1, "VEX.128.0F.WIG 17 /r", "Move two packed single-precision floating-point values from high quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVHPSm64, xmm1, "EVEX.128.0F.W0 17 /r", "Move two packed single-precision floating-point values from high quadword of xmm1 to m64.")
INSTRUCTION_INPUT(MOVLHPSxmm1, xmm2, "0F 16 /r", "Move two packed single-precision floating-point values from low quadword of xmm2 to high quadword of xmm1.")
INSTRUCTION_INPUT(VMOVLHPSxmm1, xmm2, xmm3, "VEX.NDS.128.0F.WIG 16 /r", "Merge two packed single-precision floating-point values from low quadword of xmm3 and low quadword of xmm2.")
INSTRUCTION_INPUT(VMOVLHPSxmm1, xmm2, xmm3, "EVEX.NDS.128.0F.W0 16 /r", "Merge two packed single-precision floating-point values from low quadword of xmm3 and low quadword of xmm2.")
INSTRUCTION_INPUT(MOVLPDxmm1, m64, "66 0F 12 /r", "Move double-precision floating-point value from m64 to low quadword of xmm1.")
INSTRUCTION_INPUT(VMOVLPDxmm2, xmm1, m64, "VEX.NDS.128.66.0F.WIG 12 /r", "Merge double-precision floating-point value from m64 and the high quadword of xmm1.")
INSTRUCTION_INPUT(VMOVLPDxmm2, xmm1, m64, "EVEX.NDS.128.66.0F.W1 12 /r", "Merge double-precision floating-point value from m64 and the high quadword of xmm1.")
INSTRUCTION_INPUT(MOVLPDm64, xmm1, "66 0F 13/r", "Move double-precision floating-point value from low quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVLPDm64, xmm1, "VEX.128.66.0F.WIG 13/r", "Move double-precision floating-point value from low quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVLPDm64, xmm1, "EVEX.128.66.0F.W1 13/r", "Move double-precision floating-point value from low quadword of xmm1 to m64.")
INSTRUCTION_INPUT(MOVLPSxmm1, m64, "0F 12 /r", "Move two packed single-precision floating-point values from m64 to low quadword of xmm1.")
INSTRUCTION_INPUT(VMOVLPSxmm2, xmm1, m64, "VEX.NDS.128.0F.WIG 12 /r", "Merge two packed single-precision floating-point values from m64 and the high quadword of xmm1.")
INSTRUCTION_INPUT(VMOVLPSxmm2, xmm1, m64, "EVEX.NDS.128.0F.W0 12 /r", "Merge two packed single-precision floating-point values from m64 and the high quadword of xmm1.")
INSTRUCTION_INPUT(MOVLPSm64, xmm1, "0F 13/r", "Move two packed single-precision floating-point values from low quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVLPSm64, xmm1, "VEX.128.0F.WIG 13/r", "Move two packed single-precision floating-point values from low quadword of xmm1 to m64.")
INSTRUCTION_INPUT(VMOVLPSm64, xmm1, "EVEX.128.0F.W0 13/r", "Move two packed single-precision floating-point values from low quadword of xmm1 to m64.")
INSTRUCTION_INPUT(MOVMSKPDreg, xmm, "66 0F 50 /r", "Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.")
INSTRUCTION_INPUT(VMOVMSKPDreg, xmm2, "VEX.128.66.0F.WIG 50 /r", "Extract 2-bit sign mask from xmm2 and store in reg. The upper bits of r32 or r64 are zeroed.")
INSTRUCTION_INPUT(VMOVMSKPDreg, ymm2, "VEX.256.66.0F.WIG 50 /r", "Extract 4-bit sign mask from ymm2 and store in reg. The upper bits of r32 or r64 are zeroed.")
INSTRUCTION_INPUT(MOVMSKPSreg, xmm, "0F 50 /r", "Extract 4-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.")
INSTRUCTION_INPUT(VMOVMSKPSreg, xmm2, "VEX.128.0F.WIG 50 /r", "Extract 4-bit sign mask from xmm2 and store in reg. The upper bits of r32 or r64 are zeroed.")
INSTRUCTION_INPUT(VMOVMSKPSreg, ymm2, "VEX.256.0F.WIG 50 /r", "Extract 8-bit sign mask from ymm2 and store in reg. The upper bits of r32 or r64 are zeroed.")
INSTRUCTION_INPUT(MOVNTDQm128, xmm1, "66 0F E7 /r", "Move packed integer values in xmm1 to m128 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTDQm128, xmm1, "VEX.128.66.0F.WIG E7 /r", "Move packed integer values in xmm1 to m128 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTDQm256, ymm1, "VEX.256.66.0F.WIG E7 /r", "Move packed integer values in ymm1 to m256 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTDQm128, xmm1, "EVEX.128.66.0F.W0 E7 /r", "Move packed integer values in xmm1 to m128 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTDQm256, ymm1, "EVEX.256.66.0F.W0 E7 /r", "Move packed integer values in zmm1 to m256 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTDQm512, zmm1, "EVEX.512.66.0F.W0 E7 /r", "Move packed integer values in zmm1 to m512 using non-temporal hint.")
INSTRUCTION_INPUT(MOVNTDQAxmm1, m128, "66 0F 38 2A /r", "Move double quadword from m128 to xmm1 using non-temporal hint if WC memory type.")
INSTRUCTION_INPUT(VMOVNTDQAxmm1, m128, "VEX.128.66.0F38.WIG 2A /r", "Move double quadword from m128 to xmm using non-temporal hint if WC memory type.")
INSTRUCTION_INPUT(VMOVNTDQAymm1, m256, "VEX.256.66.0F38.WIG 2A /r", "Move 256-bit data from m256 to ymm using non-temporal hint if WC memory type.")
INSTRUCTION_INPUT(VMOVNTDQAxmm1, m128, "EVEX.128.66.0F38.W0 2A /r", "Move 128-bit data from m128 to xmm using non-temporal hint if WC memory type.")
INSTRUCTION_INPUT(VMOVNTDQAymm1, m256, "EVEX.256.66.0F38.W0 2A /r", "Move 256-bit data from m256 to ymm using non-temporal hint if WC memory type.")
INSTRUCTION_INPUT(VMOVNTDQAzmm1, m512, "EVEX.512.66.0F38.W0 2A /r", "Move 512-bit data from m512 to zmm using non-temporal hint if WC memory type.")
INSTRUCTION_INPUT(MOVNTIm32, r32, "0F C3 /r", "Move doubleword from r32 to m32 using non-temporal hint.")
INSTRUCTION_INPUT(MOVNTIm64, r64, "REX.W + 0F C3 /r", "Move quadword from r64 to m64 using non-temporal hint.")
INSTRUCTION_INPUT(MOVNTPDm128, xmm1, "66 0F 2B /r", "Move packed double-precision values in xmm1 to m128 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPDm128, xmm1, "VEX.128.66.0F.WIG 2B /r", "Move packed double-precision values in xmm1 to m128 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPDm256, ymm1, "VEX.256.66.0F.WIG 2B /r", "Move packed double-precision values in ymm1 to m256 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPDm128, xmm1, "EVEX.128.66.0F.W1 2B /r", "Move packed double-precision values in xmm1 to m128 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPDm256, ymm1, "EVEX.256.66.0F.W1 2B /r", "Move packed double-precision values in ymm1 to m256 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPDm512, zmm1, "EVEX.512.66.0F.W1 2B /r", "Move packed double-precision values in zmm1 to m512 using non-temporal hint.")
INSTRUCTION_INPUT(MOVNTPSm128, xmm1, "0F 2B /r", "Move packed single-precision values xmm1 to mem using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPSm128, xmm1, "VEX.128.0F.WIG 2B /r", "Move packed single-precision values xmm1 to mem using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPSm256, ymm1, "VEX.256.0F.WIG 2B /r", "Move packed single-precision values ymm1 to mem using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPSm128, xmm1, "EVEX.128.0F.W0 2B /r", "Move packed single-precision values in xmm1 to m128 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPSm256, ymm1, "EVEX.256.0F.W0 2B /r", "Move packed single-precision values in ymm1 to m256 using non-temporal hint.")
INSTRUCTION_INPUT(VMOVNTPSm512, zmm1, "EVEX.512.0F.W0 2B /r", "Move packed single-precision values in zmm1 to m512 using non-temporal hint.")
INSTRUCTION_INPUT(MOVNTQm64, mm, "0F E7 /r", "Move quadword from mm to m64 using non-temporal hint.")
INSTRUCTION_INPUT(MOVQmm, mm/m64, "0F 6F /r", "Move quadword from mm/m64 to mm.")
INSTRUCTION_INPUT(MOVQmm/m64, mm, "0F 7F /r", "Move quadword from mm to mm/m64.")
INSTRUCTION_INPUT(MOVQxmm1, xmm2/m64, "F3 0F 7E /r", "Move quadword from xmm2/mem64 to xmm1.")
INSTRUCTION_INPUT(VMOVQxmm1, xmm2/m64, "VEX.128.F3.0F.WIG 7E /r", "Move quadword from xmm2 to xmm1.")
INSTRUCTION_INPUT(VMOVQxmm1, xmm2/m64, "EVEX.128.F3.0F.W1 7E /r", "Move quadword from xmm2/m64 to xmm1.")
INSTRUCTION_INPUT(MOVQxmm2/m64, xmm1, "66 0F D6 /r", "Move quadword from xmm1 to xmm2/mem64.")
INSTRUCTION_INPUT(VMOVQxmm1/m64, xmm2, "VEX.128.66.0F.WIG D6 /r", "Move quadword from xmm2 register to xmm1/m64.")
INSTRUCTION_INPUT(VMOVQxmm1/m64, xmm2, "EVEX.128.66.0F.W1 D6 /r", "Move quadword from xmm2 register to xmm1/m64.")
INSTRUCTION_INPUT(MOVQ2DQxmm, mm, "F3 0F D6 /r", "Move quadword from mmx to low quadword of xmm.")
INSTRUCTION_INPUT(MOVSDxmm1, xmm2, "F2 0F 10 /r", "Move scalar double-precision floating-point value from xmm2 to xmm1 register.")
INSTRUCTION_INPUT(MOVSDxmm1, m64, "F2 0F 10 /r", "Load scalar double-precision floating-point value from m64 to xmm1 register.")
INSTRUCTION_INPUT(MOVSDxmm1/m64, xmm2, "F2 0F 11 /r", "Move scalar double-precision floating-point value from xmm2 register to xmm1/m64.")
INSTRUCTION_INPUT(VMOVSDxmm1, xmm2, xmm3, "VEX.NDS.LIG.F2.0F.WIG 10 /r", "Merge scalar double-precision floating-point value from xmm2 and xmm3 to xmm1 register.")
INSTRUCTION_INPUT(VMOVSDxmm1, m64, "VEX.LIG.F2.0F.WIG 10 /r", "Load scalar double-precision floating-point value from m64 to xmm1 register.")
INSTRUCTION_INPUT(VMOVSDxmm1, xmm2, xmm3, "VEX.NDS.LIG.F2.0F.WIG 11 /r", "Merge scalar double-precision floating-point value from xmm2 and xmm3 registers to xmm1.")
INSTRUCTION_INPUT(VMOVSDm64, xmm1, "VEX.LIG.F2.0F.WIG 11 /r", "Store scalar double-precision floating-point value from xmm1 register to m64.")
INSTRUCTION_INPUT(VMOVSDxmm1 {k1}{z}, xmm2, xmm3, "EVEX.NDS.LIG.F2.0F.W1 10 /r", "Merge scalar double-precision floating-point value from xmm2 and xmm3 registers to xmm1 under writemask k1.")
INSTRUCTION_INPUT(VMOVSDxmm1 {k1}{z}, m64, "EVEX.LIG.F2.0F.W1 10 /r", "Load scalar double-precision floating-point value from m64 to xmm1 register under writemask k1.")
INSTRUCTION_INPUT(VMOVSDxmm1 {k1}{z}, xmm2, xmm3, "EVEX.NDS.LIG.F2.0F.W1 11 /r", "Merge scalar double-precision floating-point value from xmm2 and xmm3 registers to xmm1 under writemask k1.")
INSTRUCTION_INPUT(VMOVSDm64 {k1}, xmm1, "EVEX.LIG.F2.0F.W1 11 /r", "Store scalar double-precision floating-point value from xmm1 register to m64 under writemask k1.")
INSTRUCTION_INPUT(MOVSHDUPxmm1, xmm2/m128, "F3 0F 16 /r", "Move odd index single-precision floating-point values from xmm2/mem and duplicate each element into xmm1.")
INSTRUCTION_INPUT(VMOVSHDUPxmm1, xmm2/m128, "VEX.128.F3.0F.WIG 16 /r", "Move odd index single-precision floating-point values from xmm2/mem and duplicate each element into xmm1.")
INSTRUCTION_INPUT(VMOVSHDUPymm1, ymm2/m256, "VEX.256.F3.0F.WIG 16 /r", "Move odd index single-precision floating-point values from ymm2/mem and duplicate each element into ymm1.")
INSTRUCTION_INPUT(VMOVSHDUPxmm1 {k1}{z}, xmm2/m128, "EVEX.128.F3.0F.W0 16 /r", "Move odd index single-precision floating-point values from xmm2/m128 and duplicate each element into xmm1 under writemask.")
INSTRUCTION_INPUT(VMOVSHDUPymm1 {k1}{z}, ymm2/m256, "EVEX.256.F3.0F.W0 16 /r", "Move odd index single-precision floating-point values from ymm2/m256 and duplicate each element into ymm1 under writemask.")
INSTRUCTION_INPUT(VMOVSHDUPzmm1 {k1}{z}, zmm2/m512, "EVEX.512.F3.0F.W0 16 /r", "Move odd index single-precision floating-point values from zmm2/m512 and duplicate each element into zmm1 under writemask.")
INSTRUCTION_INPUT(MOVSLDUPxmm1, xmm2/m128, "F3 0F 12 /r", "Move even index single-precision floating-point values from xmm2/mem and duplicate each element into xmm1.")
INSTRUCTION_INPUT(VMOVSLDUPxmm1, xmm2/m128, "VEX.128.F3.0F.WIG 12 /r", "Move even index single-precision floating-point values from xmm2/mem and duplicate each element into xmm1.")
INSTRUCTION_INPUT(VMOVSLDUPymm1, ymm2/m256, "VEX.256.F3.0F.WIG 12 /r", "Move even index single-precision floating-point values from ymm2/mem and duplicate each element into ymm1.")
INSTRUCTION_INPUT(VMOVSLDUPxmm1 {k1}{z}, xmm2/m128, "EVEX.128.F3.0F.W0 12 /r", "Move even index single-precision floating-point values from xmm2/m128 and duplicate each element into xmm1 under writemask.")
INSTRUCTION_INPUT(VMOVSLDUPymm1 {k1}{z}, ymm2/m256, "EVEX.256.F3.0F.W0 12 /r", "Move even index single-precision floating-point values from ymm2/m256 and duplicate each element into ymm1 under writemask.")
INSTRUCTION_INPUT(VMOVSLDUPzmm1 {k1}{z}, zmm2/m512, "EVEX.512.F3.0F.W0 12 /r", "Move even index single-precision floating-point values from zmm2/m512 and duplicate each element into zmm1 under writemask.")
INSTRUCTION_INPUT(MOVSSxmm1, xmm2, "F3 0F 10 /r", "Merge scalar single-precision floating-point value from xmm2 to xmm1 register.")
INSTRUCTION_INPUT(MOVSSxmm1, m32, "F3 0F 10 /r", "Load scalar single-precision floating-point value from m32 to xmm1 register.")
INSTRUCTION_INPUT(VMOVSSxmm1, xmm2, xmm3, "VEX.NDS.LIG.F3.0F.WIG 10 /r", "Merge scalar single-precision floating-point value from xmm2 and xmm3 to xmm1 register")
INSTRUCTION_INPUT(VMOVSSxmm1, m32, "VEX.LIG.F3.0F.WIG 10 /r", "Load scalar single-precision floating-point value from m32 to xmm1 register.")
INSTRUCTION_INPUT(MOVSSxmm2/m32, xmm1, "F3 0F 11 /r", "Move scalar single-precision floating-point value from xmm1 register to xmm2/m32.")
INSTRUCTION_INPUT(VMOVSSxmm1, xmm2, xmm3, "VEX.NDS.LIG.F3.0F.WIG 11 /r", "Move scalar single-precision floating-point value from xmm2 and xmm3 to xmm1 register.")
INSTRUCTION_INPUT(VMOVSSm32, xmm1, "VEX.LIG.F3.0F.WIG 11 /r", "Move scalar single-precision floating-point value from xmm1 register to m32.")
INSTRUCTION_INPUT(VMOVSSxmm1 {k1}{z}, xmm2, xmm3, "EVEX.NDS.LIG.F3.0F.W0 10 /r", "Move scalar single-precision floating-point value from xmm2 and xmm3 to xmm1 register under writemask k1.")
INSTRUCTION_INPUT(VMOVSSxmm1 {k1}{z}, m32, "EVEX.LIG.F3.0F.W0 10 /r", "Move scalar single-precision floating-point values from m32 to xmm1 under writemask k1.")
INSTRUCTION_INPUT(VMOVSSxmm1 {k1}{z}, xmm2, xmm3, "EVEX.NDS.LIG.F3.0F.W0 11 /r", "Move scalar single-precision floating-point value from xmm2 and xmm3 to xmm1 register under writemask k1.")
INSTRUCTION_INPUT(VMOVSSm32 {k1}, xmm1, "EVEX.LIG.F3.0F.W0 11 /r", "Move scalar single-precision floating-point values from xmm1 to m32 under writemask k1.")
INSTRUCTION_INPUT(MOVUPDxmm1, xmm2/m128, "66 0F 10 /r", "Move unaligned packed double-precision floating-point from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(MOVUPDxmm2/m128, xmm1, "66 0F 11 /r", "Move unaligned packed double-precision floating-point from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVUPDxmm1, xmm2/m128, "VEX.128.66.0F.WIG 10 /r", "Move unaligned packed double-precision floating-point from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(VMOVUPDxmm2/m128, xmm1, "VEX.128.66.0F.WIG 11 /r", "Move unaligned packed double-precision floating-point from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVUPDymm1, ymm2/m256, "VEX.256.66.0F.WIG 10 /r", "Move unaligned packed double-precision floating-point from ymm2/mem to ymm1.")
INSTRUCTION_INPUT(VMOVUPDymm2/m256, ymm1, "VEX.256.66.0F.WIG 11 /r", "Move unaligned packed double-precision floating-point from ymm1 to ymm2/mem.")
INSTRUCTION_INPUT(VMOVUPDxmm1 {k1}{z}, xmm2/m128, "EVEX.128.66.0F.W1 10 /r", "Move unaligned packed double-precision floating-point from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPDxmm2/m128 {k1}{z}, xmm1, "EVEX.128.66.0F.W1 11 /r", "Move unaligned packed double-precision floating-point from xmm1 to xmm2/m128 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPDymm1 {k1}{z}, ymm2/m256, "EVEX.256.66.0F.W1 10 /r", "Move unaligned packed double-precision floating-point from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPDymm2/m256 {k1}{z}, ymm1, "EVEX.256.66.0F.W1 11 /r", "Move unaligned packed double-precision floating-point from ymm1 to ymm2/m256 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPDzmm1 {k1}{z}, zmm2/m512, "EVEX.512.66.0F.W1 10 /r", "Move unaligned packed double-precision floating-point values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPDzmm2/m512 {k1}{z}, zmm1, "EVEX.512.66.0F.W1 11 /r", "Move unaligned packed double-precision floating-point values from zmm1 to zmm2/m512 using writemask k1.")
INSTRUCTION_INPUT(MOVUPSxmm1, xmm2/m128, "0F 10 /r", "Move unaligned packed single-precision floating-point from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(MOVUPSxmm2/m128, xmm1, "0F 11 /r", "Move unaligned packed single-precision floating-point from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVUPSxmm1, xmm2/m128, "VEX.128.0F.WIG 10 /r", "Move unaligned packed single-precision floating-point from xmm2/mem to xmm1.")
INSTRUCTION_INPUT(VMOVUPSxmm2/m128, xmm1, "VEX.128.0F 11.WIG /r", "Move unaligned packed single-precision floating-point from xmm1 to xmm2/mem.")
INSTRUCTION_INPUT(VMOVUPSymm1, ymm2/m256, "VEX.256.0F 10.WIG /r", "Move unaligned packed single-precision floating-point from ymm2/mem to ymm1.")
INSTRUCTION_INPUT(VMOVUPSymm2/m256, ymm1, "VEX.256.0F 11.WIG /r", "Move unaligned packed single-precision floating-point from ymm1 to ymm2/mem.")
INSTRUCTION_INPUT(VMOVUPSxmm1 {k1}{z}, xmm2/m128, "EVEX.128.0F.W0 10 /r", "Move unaligned packed single-precision floating-point values from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPSymm1 {k1}{z}, ymm2/m256, "EVEX.256.0F.W0 10 /r", "Move unaligned packed single-precision floating-point values from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPSzmm1 {k1}{z}, zmm2/m512, "EVEX.512.0F.W0 10 /r", "Move unaligned packed single-precision floating-point values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPSxmm2/m128 {k1}{z}, xmm1, "EVEX.128.0F.W0 11 /r", "Move unaligned packed single-precision floating-point values from xmm1 to xmm2/m128 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPSymm2/m256 {k1}{z}, ymm1, "EVEX.256.0F.W0 11 /r", "Move unaligned packed single-precision floating-point values from ymm1 to ymm2/m256 using writemask k1.")
INSTRUCTION_INPUT(VMOVUPSzmm2/m512 {k1}{z}, zmm1, "EVEX.512.0F.W0 11 /r", "Move unaligned packed single-precision floating-point values from zmm1 to zmm2/m512 using writemask k1.")
INSTRUCTION_INPUT(MOVZXr16, r/m8, "0F B6 /r", "Move byte to word with zero-extension.")
INSTRUCTION_INPUT(MOVZXr32, r/m8, "0F B6 /r", "Move byte to doubleword, zero-extension.")
INSTRUCTION_INPUT(MOVZXr64, r/m8, "REX.W + 0F B6 /r", "Move byte to quadword, zero-extension.")
INSTRUCTION_INPUT(MOVZXr32, r/m16, "0F B7 /r", "Move word to doubleword, zero-extension.")
INSTRUCTION_INPUT(MOVZXr64, r/m16, "REX.W + 0F B7 /r", "Move word to quadword, zero-extension.")
INSTRUCTION_INPUT(MPSADBWxmm1, xmm2/m128, imm8, "66 0F 3A 42 /r ib", "Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in xmm1 and xmm2/m128 and writes the results in xmm1. Starting offsets within xmm1 and xmm2/m128 are determined by imm8.")
INSTRUCTION_INPUT(VMPSADBWxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 42 /r ib", "Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in xmm2 and xmm3/m128 and writes the results in xmm1. Starting offsets within xmm2 and xmm3/m128 are determined by imm8.")
INSTRUCTION_INPUT(VMPSADBWymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.WIG 42 /r ib", "Sums absolute 8-bit integer difference of adjacent groups of 4 byte integers in xmm2 and ymm3/m128 and writes the results in ymm1. Starting offsets within ymm2 and xmm3/m128 are determined by imm8.")
INSTRUCTION_INPUT(MULr/m8, "F6 /4", "Unsigned multiply (AX ← AL ∗ r/m8).")
INSTRUCTION_INPUT(MULr/m8, "REX + F6 /4", "Unsigned multiply (AX ← AL ∗ r/m8).")
INSTRUCTION_INPUT(MULr/m16, "F7 /4", "Unsigned multiply (DX:AX ← AX ∗ r/m16).")
INSTRUCTION_INPUT(MULr/m32, "F7 /4", "Unsigned multiply (EDX:EAX ← EAX ∗ r/m32).")
INSTRUCTION_INPUT(MULr/m64, "REX.W + F7 /4", "Unsigned multiply (RDX:RAX ← RAX ∗ r/m64).")
INSTRUCTION_INPUT(MULPDxmm1, xmm2/m128, "66 0F 59 /r", "Multiply packed double-precision floating-point values in xmm2/m128 with xmm1 and store result in xmm1.")
INSTRUCTION_INPUT(VMULPDxmm1,xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 59 /r", "Multiply packed double-precision floating-point values in xmm3/m128 with xmm2 and store result in xmm1.")
INSTRUCTION_INPUT(VMULPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 59 /r", "Multiply packed double-precision floating-point values in ymm3/m256 with ymm2 and store result in ymm1.")
INSTRUCTION_INPUT(VMULPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 59 /r", "Multiply packed double-precision floating-point values from xmm3/m128/m64bcst to xmm2 and store result in xmm1.")
INSTRUCTION_INPUT(VMULPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 59 /r", "Multiply packed double-precision floating-point values from ymm3/m256/m64bcst to ymm2 and store result in ymm1.")
INSTRUCTION_INPUT(VMULPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}, "EVEX.NDS.512.66.0F.W1 59 /r", "Multiply packed double-precision floating-point values in zmm3/m512/m64bcst with zmm2 and store result in zmm1.")
INSTRUCTION_INPUT(MULPSxmm1, xmm2/m128, "0F 59 /r", "Multiply packed single-precision floating-point values in xmm2/m128 with xmm1 and store result in xmm1.")
INSTRUCTION_INPUT(VMULPSxmm1,xmm2, xmm3/m128, "VEX.NDS.128.0F.WIG 59 /r", "Multiply packed single-precision floating-point values in xmm3/m128 with xmm2 and store result in xmm1.")
INSTRUCTION_INPUT(VMULPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F.WIG 59 /r", "Multiply packed single-precision floating-point values in ymm3/m256 with ymm2 and store result in ymm1.")
INSTRUCTION_INPUT(VMULPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 59 /r", "Multiply packed single-precision floating-point values from xmm3/m128/m32bcst to xmm2 and store result in xmm1.")
INSTRUCTION_INPUT(VMULPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 59 /r", "Multiply packed single-precision floating-point values from ymm3/m256/m32bcst to ymm2 and store result in ymm1.")
INSTRUCTION_INPUT(VMULPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst {er}, "EVEX.NDS.512.0F.W0 59 /r", "Multiply packed single-precision floating-point values in zmm3/m512/m32bcst with zmm2 and store result in zmm1.")
INSTRUCTION_INPUT(MULSDxmm1,xmm2/m64, "F2 0F 59 /r", "Multiply the low double-precision floating-point value in xmm2/m64 by low double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VMULSDxmm1,xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 59 /r", "Multiply the low double-precision floating-point value in xmm3/m64 by low double-precision floating-point value in xmm2.")
INSTRUCTION_INPUT(VMULSDxmm1 {k1}{z}, xmm2, xmm3/m64 {er}, "EVEX.NDS.LIG.F2.0F.W1 59 /r", "Multiply the low double-precision floating-point value in xmm3/m64 by low double-precision floating-point value in xmm2.")
INSTRUCTION_INPUT(MULSSxmm1,xmm2/m32, "F3 0F 59 /r", "Multiply the low single-precision floating-point value in xmm2/m32 by the low single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VMULSSxmm1,xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 59 /r", "Multiply the low single-precision floating-point value in xmm3/m32 by the low single-precision floating-point value in xmm2.")
INSTRUCTION_INPUT(VMULSSxmm1 {k1}{z}, xmm2, xmm3/m32 {er}, "EVEX.NDS.LIG.F3.0F.W0 59 /r", "Multiply the low single-precision floating-point value in xmm3/m32 by the low single-precision floating-point value in xmm2.")
INSTRUCTION_INPUT(MULXr32a, r32b, r/m32, "VEX.NDD.LZ.F2.0F38.W0 F6 /r", "Unsigned multiply of r/m32 with EDX without affecting arithmetic flags.")
INSTRUCTION_INPUT(MULXr64a, r64b, r/m64, "VEX.NDD.LZ.F2.0F38.W1 F6 /r", "Unsigned multiply of r/m64 with RDX without affecting arithmetic flags.")
INSTRUCTION_INPUT(MWAIT, "0F 01 C9", "A hint that allow the processor to stop instruction execution and enter an implementation-dependent optimized state until occurrence of a class of events.")
INSTRUCTION_INPUT(NEGr/m8, "F6 /3", "Two's complement negate r/m8.")
INSTRUCTION_INPUT(NEGr/m8, "REX + F6 /3", "Two's complement negate r/m8.")
INSTRUCTION_INPUT(NEGr/m16, "F7 /3", "Two's complement negate r/m16.")
INSTRUCTION_INPUT(NEGr/m32, "F7 /3", "Two's complement negate r/m32.")
INSTRUCTION_INPUT(NEGr/m64, "REX.W + F7 /3", "Two's complement negate r/m64.")
INSTRUCTION_INPUT(NOP, "90", "One byte no-operation instruction.")
INSTRUCTION_INPUT(NOPr/m16, "0F 1F /0", "Multi-byte no-operation instruction.")
INSTRUCTION_INPUT(NOPr/m32, "0F 1F /0", "Multi-byte no-operation instruction.")
INSTRUCTION_INPUT(NOTr/m8, "F6 /2", "Reverse each bit of r/m8.")
INSTRUCTION_INPUT(NOTr/m8, "REX + F6 /2", "Reverse each bit of r/m8.")
INSTRUCTION_INPUT(NOTr/m16, "F7 /2", "Reverse each bit of r/m16.")
INSTRUCTION_INPUT(NOTr/m32, "F7 /2", "Reverse each bit of r/m32.")
INSTRUCTION_INPUT(NOTr/m64, "REX.W + F7 /2", "Reverse each bit of r/m64.")
INSTRUCTION_INPUT(ORAL, imm8, "0C ib", "AL OR imm8.")
INSTRUCTION_INPUT(ORAX, imm16, "0D iw", "AX OR imm16.")
INSTRUCTION_INPUT(OREAX, imm32, "0D id", "EAX OR imm32.")
INSTRUCTION_INPUT(ORRAX, imm32, "REX.W + 0D id", "RAX OR imm32 (sign-extended).")
INSTRUCTION_INPUT(ORr/m8, imm8, "80 /1 ib", "r/m8 OR imm8.")
INSTRUCTION_INPUT(ORr/m8, imm8, "REX + 80 /1 ib", "r/m8 OR imm8.")
INSTRUCTION_INPUT(ORr/m16, imm16, "81 /1 iw", " r/m16 OR imm16.")
INSTRUCTION_INPUT(ORr/m32, imm32, "81 /1 id", " r/m32 OR imm32.")
INSTRUCTION_INPUT(ORr/m64, imm32, "REX.W + 81 /1 id", " r/m64 OR imm32 (sign-extended).")
INSTRUCTION_INPUT(ORr/m16, imm8, "83 /1 ib", "r/m16 OR imm8 (sign-extended).")
INSTRUCTION_INPUT(ORr/m32, imm8, "83 /1 ib", "r/m32 OR imm8 (sign-extended).")
INSTRUCTION_INPUT(ORr/m64, imm8, "REX.W + 83 /1 ib", "r/m64 OR imm8 (sign-extended).")
INSTRUCTION_INPUT(ORr/m8, r8, "08 /r", "r/m8 OR r8.")
INSTRUCTION_INPUT(ORr/m8, r8, "REX + 08 /r", "r/m8 OR r8.")
INSTRUCTION_INPUT(ORr/m16, r16, "09 /r", "r/m16 OR r16.")
INSTRUCTION_INPUT(ORr/m32, r32, "09 /r", "r/m32 OR r32.")
INSTRUCTION_INPUT(ORr/m64, r64, "REX.W + 09 /r", "r/m64 OR r64.")
INSTRUCTION_INPUT(ORr8, r/m8, "0A /r", "r8 OR r/m8.")
INSTRUCTION_INPUT(ORr8, r/m8, "REX + 0A /r", "r8 OR r/m8.")
INSTRUCTION_INPUT(ORr16, r/m16, "0B /r", "r16 OR r/m16.")
INSTRUCTION_INPUT(ORr32, r/m32, "0B /r", "r32 OR r/m32.")
INSTRUCTION_INPUT(ORr64, r/m64, "REX.W + 0B /r", "r64 OR r/m64.")
INSTRUCTION_INPUT(ORPDxmm1, xmm2/m128, "66 0F 56/r", "Return the bitwise logical OR of packed double-precision floating-point values in xmm1 and xmm2/mem")
INSTRUCTION_INPUT(VORPDxmm1,xmm2, xmm3/m128, "VEX.NDS.128.66.0F 56 /r", "Return the bitwise logical OR of packed double-precision floating-point values in xmm2 and xmm3/mem")
INSTRUCTION_INPUT(VORPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F 56 /r", "Return the bitwise logical OR of packed double-precision floating-point values in ymm2 and ymm3/mem")
INSTRUCTION_INPUT(VORPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 56 /r", "Return the bitwise logical OR of packed double-precision floating-point values in xmm2 and xmm3/m128/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VORPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 56 /r", "Return the bitwise logical OR of packed double-precision floating-point values in ymm2 and ymm3/m256/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VORPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 56 /r", "Return the bitwise logical OR of packed double-precision floating-point values in zmm2 and zmm3/m512/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(ORPSxmm1, xmm2/m128, "0F 56 /r", "Return the bitwise logical OR of packed single-precision floating-point values in xmm1 and xmm2/mem")
INSTRUCTION_INPUT(VORPSxmm1,xmm2, xmm3/m128, "VEX.NDS.128.0F 56 /r", "Return the bitwise logical OR of packed single-precision floating-point values in xmm2 and xmm3/mem")
INSTRUCTION_INPUT(VORPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F 56 /r", "Return the bitwise logical OR of packed single-precision floating-point values in ymm2 and ymm3/mem")
INSTRUCTION_INPUT(VORPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 56 /r", "Return the bitwise logical OR of packed single-precision floating-point values in xmm2 and xmm3/m128/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VORPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 56 /r", "Return the bitwise logical OR of packed single-precision floating-point values in ymm2 and ymm3/m256/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VORPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.0F.W0 56 /r", "Return the bitwise logical OR of packed single-precision floating-point values in zmm2 and zmm3/m512/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(OUTimm8, AL, "E6 ib", "Output byte in AL to I/O port address imm8.")
INSTRUCTION_INPUT(OUTimm8, AX, "E7 ib", "Output word in AX to I/O port address imm8.")
INSTRUCTION_INPUT(OUTimm8, EAX, "E7 ib", "Output doubleword in EAX to I/O port address imm8.")
INSTRUCTION_INPUT(OUTDX, AL, "EE", "Output byte in AL to I/O port address in DX.")
INSTRUCTION_INPUT(OUTDX, AX, "EF", "Output word in AX to I/O port address in DX.")
INSTRUCTION_INPUT(OUTDX, EAX, "EF", "Output doubleword in EAX to I/O port address in DX.")
INSTRUCTION_INPUT(PACKUSDWxmm1, xmm2/m128, "66 0F 38 2B /r", "Convert 4 packed signed doubleword integers from xmm1 and 4 packed signed doubleword integers from xmm2/m128 into 8 packed unsigned word integers in xmm1 using unsigned saturation.")
INSTRUCTION_INPUT(VPACKUSDWxmm1,xmm2, xmm3/m128, "VEX.NDS.128.66.0F38 2B /r", "Convert 4 packed signed doubleword integers from xmm2 and 4 packed signed doubleword integers from xmm3/m128 into 8 packed unsigned word integers in xmm1 using unsigned saturation.")
INSTRUCTION_INPUT(VPACKUSDWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38 2B /r", "Convert 8 packed signed doubleword integers from ymm2 and 8 packed signed doubleword integers from ymm3/m256 into 16 packed unsigned word integers in ymm1 using unsigned saturation.")
INSTRUCTION_INPUT(VPACKUSDWxmm1{k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.66.0F38.W0 2B /r", "Convert packed signed doubleword integers from xmm2 and packed signed doubleword integers from xmm3/m128/m32bcst into packed unsigned word integers in xmm1 using unsigned saturation under writemask k1.")
INSTRUCTION_INPUT(VPACKUSDWymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F38.W0 2B /r", "Convert packed signed doubleword integers from ymm2 and packed signed doubleword integers from ymm3/m256/m32bcst into packed unsigned word integers in ymm1 using unsigned saturation under writemask k1.")
INSTRUCTION_INPUT(VPACKUSDWzmm1{k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.66.0F38.W0 2B /r", "Convert packed signed doubleword integers from zmm2 and packed signed doubleword integers from zmm3/m512/m32bcst into packed unsigned word integers in zmm1 using unsigned saturation under writemask k1.")
INSTRUCTION_INPUT(PACKUSWBmm, mm/m64, "0F 67 /r", "Converts 4 signed word integers from mm and 4 signed word integers from mm/m64 into 8 unsigned byte integers in mm using unsigned saturation.")
INSTRUCTION_INPUT(PACKUSWBxmm1, xmm2/m128, "66 0F 67 /r", "Converts 8 signed word integers from xmm1 and 8 signed word integers from xmm2/m128 into 16 unsigned byte integers in xmm1 using unsigned saturation.")
INSTRUCTION_INPUT(VPACKUSWBxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 67 /r", "Converts 8 signed word integers from xmm2 and 8 signed word integers from xmm3/m128 into 16 unsigned byte integers in xmm1 using unsigned saturation.")
INSTRUCTION_INPUT(VPACKUSWBymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 67 /r", "Converts 16 signed word integers from ymm2 and 16signed word integers from ymm3/m256 into 32 unsigned byte integers in ymm1 using unsigned saturation.")
INSTRUCTION_INPUT(VPACKUSWBxmm1{k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F.WIG 67 /r", "Converts signed word integers from xmm2 and signed word integers from xmm3/m128 into unsigned byte integers in xmm1 using unsigned saturation under writemask k1.")
INSTRUCTION_INPUT(VPACKUSWBymm1{k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F.WIG 67 /r", "Converts signed word integers from ymm2 and signed word integers from ymm3/m256 into unsigned byte integers in ymm1 using unsigned saturation under writemask k1.")
INSTRUCTION_INPUT(VPACKUSWBzmm1{k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F.WIG 67 /r", "Converts signed word integers from zmm2 and signed word integers from zmm3/m512 into unsigned byte integers in zmm1 using unsigned saturation under writemask k1.")
INSTRUCTION_INPUT(PALIGNRmm1, mm2/m64, imm8, "0F 3A 0F /r ib", "Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into mm1.")
INSTRUCTION_INPUT(PALIGNRxmm1, xmm2/m128, imm8, "66 0F 3A 0F /r ib", "Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in imm8 into xmm1.")
INSTRUCTION_INPUT(VPALIGNRxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 0F /r ib", "Concatenate xmm2 and xmm3/m128, extract byte aligned result shifted to the right by constant value in imm8 and result is stored in xmm1.")
INSTRUCTION_INPUT(VPALIGNRymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.WIG 0F /r ib", "Concatenate pairs of 16 bytes in ymm2 and ymm3/m256 into 32-byte intermediate result, extract byte-aligned, 16-byte result shifted to the right by constant values in imm8 from each intermediate result, and two 16-byte results are stored in ymm1.")
INSTRUCTION_INPUT(VPALIGNRxmm1 {k1}{z}, xmm2, xmm3/m128, imm8, "EVEX.NDS.128.66.0F3A.WIG 0F /r ib", "Concatenate xmm2 and xmm3/m128 into a 32-byte intermediate result, extract byte aligned result shifted to the right by constant value in imm8 and result is stored in xmm1.")
INSTRUCTION_INPUT(VPALIGNRymm1 {k1}{z}, ymm2, ymm3/m256, imm8, "EVEX.NDS.256.66.0F3A.WIG 0F /r ib", "
Concatenate pairs of 16 bytes in ymm2 and ymm3/m256 into 32-byte intermediate result, extract byte-aligned, 16-byte result shifted to the right by constant values in imm8 from each intermediate result, and two 16-byte results are stored in ymm1.")
INSTRUCTION_INPUT(VPALIGNRzmm1 {k1}{z}, zmm2, zmm3/m512, imm8, "EVEX.NDS.512.66.0F3A.WIG 0F /r ib", "
Concatenate pairs of 32 bytes in zmm2 and zmm3/m512 into 32-byte intermediate result, extract byte-aligned, 32-byte result shifted to the right by constant values in imm8 from each intermediate result, and four 32-byte results are stored in zmm1.")
INSTRUCTION_INPUT(PANDmm, mm/m64, "0F DB /r", "Bitwise AND mm/m64 and mm.")
INSTRUCTION_INPUT(PANDxmm1, xmm2/m128, "66 0F DB /r", "Bitwise AND of xmm2/m128 and xmm1.")
INSTRUCTION_INPUT(VPANDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG DB /r", "Bitwise AND of xmm3/m128 and xmm.")
INSTRUCTION_INPUT(VPANDymm1, ymm2, ymm3/.m256, "VEX.NDS.256.66.0F.WIG DB /r", "Bitwise AND of ymm2, and ymm3/m256 and store result in ymm1.")
INSTRUCTION_INPUT(VPANDDxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.66.0F.W0 DB /r", "Bitwise AND of packed doubleword integers in xmm2 and xmm3/m128/m32bcst and store result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDDymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F.W0 DB /r", "Bitwise AND of packed doubleword integers in ymm2 and ymm3/m256/m32bcst and store result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDDzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.66.0F.W0 DB /r", "Bitwise AND of packed doubleword integers in zmm2 and zmm3/m512/m32bcst and store result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDQxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 DB /r", "Bitwise AND of packed quadword integers in xmm2 and xmm3/m128/m64bcst and store result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 DB /r", "Bitwise AND of packed quadword integers in ymm2 and ymm3/m256/m64bcst and store result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 DB /r", "Bitwise AND of packed quadword integers in zmm2 and zmm3/m512/m64bcst and store result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(PANDNmm, mm/m64, "0F DF /r", "Bitwise AND NOT of mm/m64 and mm.")
INSTRUCTION_INPUT(PANDNxmm1, xmm2/m128, "66 0F DF /r", "Bitwise AND NOT of xmm2/m128 and xmm1.")
INSTRUCTION_INPUT(VPANDNxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG DF /r", "Bitwise AND NOT of xmm3/m128 and xmm2.")
INSTRUCTION_INPUT(VPANDNymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG DF /r", "Bitwise AND NOT of ymm2, and ymm3/m256 and store result in ymm1.")
INSTRUCTION_INPUT(VPANDNDxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.66.0F.W0 DF /r", "Bitwise AND NOT of packed doubleword integers in xmm2 and xmm3/m128/m32bcst and store result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDNDymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F.W0 DF /r", "Bitwise AND NOT of packed doubleword integers in ymm2 and ymm3/m256/m32bcst and store result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDNDzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.66.0F.W0 DF /r", "Bitwise AND NOT of packed doubleword integers in zmm2 and zmm3/m512/m32bcst and store result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDNQxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 DF /r", "Bitwise AND NOT of packed quadword integers in xmm2 and xmm3/m128/m64bcst and store result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDNQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 DF /r", "Bitwise AND NOT of packed quadword integers in ymm2 and ymm3/m256/m64bcst and store result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPANDNQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 DF /r", "Bitwise AND NOT of packed quadword integers in zmm2 and zmm3/m512/m64bcst and store result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(PAUSE, "F3 90", "Gives hint to processor that improves performance of spin-wait loops.")
INSTRUCTION_INPUT(PBLENDVBxmm1, xmm2/m128, &lt;XMM0&gt;, "66 0F 38 10 /r", "Select byte values from xmm1 and xmm2/m128 from mask specified in the high bit of each byte in XMM0 and store the values into xmm1.")
INSTRUCTION_INPUT(VPBLENDVBxmm1, xmm2, xmm3/m128, xmm4, "VEX.NDS.128.66.0F3A.W0 4C /r /is4", "Select byte values from xmm2 and xmm3/m128 using mask bits in the specified mask register, xmm4, and store the values into xmm1.")
INSTRUCTION_INPUT(VPBLENDVBymm1, ymm2, ymm3/m256, ymm4, "VEX.NDS.256.66.0F3A.W0 4C /r /is4", "Select byte values from ymm2 and ymm3/m256 from mask specified in the high bit of each byte in ymm4 and store the values into ymm1.")
INSTRUCTION_INPUT(PBLENDWxmm1, xmm2/m128, imm8, "66 0F 3A 0E /r ib", "Select words from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.")
INSTRUCTION_INPUT(VPBLENDWxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 0E /r ib", "Select words from xmm2 and xmm3/m128 from mask specified in imm8 and store the values into xmm1.")
INSTRUCTION_INPUT(VPBLENDWymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.WIG 0E /r ib", "Select words from ymm2 and ymm3/m256 from mask specified in imm8 and store the values into ymm1.")
INSTRUCTION_INPUT(PCLMULQDQxmm1, xmm2/m128, imm8, "66 0F 3A 44 /r ib", "Carry-less multiplication of one quadword of xmm1 by one quadword of xmm2/m128, stores the 128-bit result in xmm1. The imme-diate is used to determine which quadwords of xmm1 and xmm2/m128 should be used.")
INSTRUCTION_INPUT(VPCLMULQDQxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.WIG 44 /r ib", "Carry-less multiplication of one quadword of xmm2 by one quadword of xmm3/m128, stores the 128-bit result in xmm1. The imme-diate is used to determine which quadwords of xmm2 and xmm3/m128 should be used.")
INSTRUCTION_INPUT(PCMPEQQxmm1, xmm2/m128, "66 0F 38 29 /r", "Compare packed qwords in xmm2/m128 and xmm1 for equality.")
INSTRUCTION_INPUT(VPCMPEQQxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 29 /r", "Compare packed quadwords in xmm3/m128 and xmm2 for equality.")
INSTRUCTION_INPUT(VPCMPEQQymm1, ymm2, ymm3 /m256, "VEX.NDS.256.66.0F38.WIG 29 /r", "Compare packed quadwords in ymm3/m256 and ymm2 for equality.")
INSTRUCTION_INPUT(VPCMPEQQk1 {k2}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F38.W1 29 /r", "Compare Equal between int64 vector xmm2 and int64 vector xmm3/m128/m64bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask.")
INSTRUCTION_INPUT(VPCMPEQQk1 {k2}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F38.W1 29 /r", "Compare Equal between int64 vector ymm2 and int64 vector ymm3/m256/m64bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask.")
INSTRUCTION_INPUT(VPCMPEQQk1 {k2}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F38.W1 29 /r", "Compare Equal between int64 vector zmm2 and int64 vector zmm3/m512/m64bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask.")
INSTRUCTION_INPUT(PCMPESTRIxmm1, xmm2/m128, imm8, "66 0F 3A 61 /r imm8 ", "Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in ECX.")
INSTRUCTION_INPUT(VPCMPESTRIxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.WIG 61 /r ib", "Perform a packed comparison of string data with explicit lengths, generating an index, and storing the result in ECX.")
INSTRUCTION_INPUT(PCMPESTRMxmm1, xmm2/m128, imm8, "66 0F 3A 60 /r imm8", "Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in XMM0")
INSTRUCTION_INPUT(VPCMPESTRMxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.WIG 60 /r ib", "Perform a packed comparison of string data with explicit lengths, generating a mask, and storing the result in XMM0.")
INSTRUCTION_INPUT(PCMPGTQxmm1,xmm2/m128, "66 0F 38 37 /r ", "Compare packed signed qwords in  xmm2/m128 and xmm1 for greater than.")
INSTRUCTION_INPUT(VPCMPGTQxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 37 /r", "Compare packed signed qwords in xmm2 and xmm3/m128 for greater than.")
INSTRUCTION_INPUT(VPCMPGTQymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.WIG 37 /r", "Compare packed signed qwords in ymm2 and ymm3/m256 for greater than.")
INSTRUCTION_INPUT(VPCMPGTQk1 {k2}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F38.W1 37 /r", "Compare Greater between int64 vector xmm2 and int64 vector xmm3/m128/m64bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask.")
INSTRUCTION_INPUT(VPCMPGTQk1 {k2}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F38.W1 37 /r", "Compare Greater between int64 vector ymm2 and int64 vector ymm3/m256/m64bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask.")
INSTRUCTION_INPUT(VPCMPGTQk1 {k2}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F38.W1 37 /r", "Compare Greater between int64 vector zmm2 and int64 vector zmm3/m512/m64bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask.")
INSTRUCTION_INPUT(PCMPISTRIxmm1, xmm2/m128, imm8, "66 0F 3A 63 /r imm8 ", "Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in ECX.")
INSTRUCTION_INPUT(VPCMPISTRIxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.WIG 63 /r ib", "Perform a packed comparison of string data with implicit lengths, generating an index, and storing the result in ECX.")
INSTRUCTION_INPUT(PCMPISTRMxmm1, xmm2/m128, imm8, "66 0F 3A 62 /r imm8 ", "Perform a packed comparison of string data with implicit lengths, generating a mask, and storing the result in XMM0.")
INSTRUCTION_INPUT(VPCMPISTRMxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.WIG 62 /r ib", "Perform a packed comparison of string data with implicit lengths, generating a Mask, and storing the result in XMM0.")
INSTRUCTION_INPUT(PDEPr32a, r32b, r/m32, "VEX.NDS.LZ.F2.0F38.W0 F5 /r", "Parallel deposit of bits from r32b using mask in r/m32, result is writ-ten to r32a.")
INSTRUCTION_INPUT(PDEPr64a, r64b, r/m64, "VEX.NDS.LZ.F2.0F38.W1 F5 /r", "Parallel deposit of bits from r64b using mask in r/m64, result is writ-ten to r64a.")
INSTRUCTION_INPUT(PEXTr32a, r32b, r/m32, "VEX.NDS.LZ.F3.0F38.W0 F5 /r", "Parallel extract of bits from r32b using mask in r/m32, result is writ-ten to r32a.")
INSTRUCTION_INPUT(PEXTr64a, r64b, r/m64, "VEX.NDS.LZ.F3.0F38.W1 F5 /r", "Parallel extract of bits from r64b using mask in r/m64, result is writ-ten to r64a.")
INSTRUCTION_INPUT(PEXTRWreg, mm, imm8, "0F C5 /r ib", "Extract the word specified by imm8 from mm and move it to reg, bits 15-0. The upper bits of r32 or r64 is zeroed.")
INSTRUCTION_INPUT(PEXTRWreg, xmm, imm8, "66 0F C5 /r ib", "Extract the word specified by imm8 from xmm and move it to reg, bits 15-0. The upper bits of r32 or r64 is zeroed.")
INSTRUCTION_INPUT(PEXTRWreg/m16, xmm, imm8, "66 0F 3A 15 /r ib", "Extract the word specified by imm8 from xmm and copy it to lowest 16 bits of reg or m16. Zero-extend the result in the destination, r32 or r64.")
INSTRUCTION_INPUT(VPEXTRWreg, xmm1, imm8, "VEX.128.66.0F.W0 C5 /r ib", "Extract the word specified by imm8 from xmm1 and move it to reg, bits 15:0. Zero-extend the result. The upper bits of r64/r32 is filled with zeros.")
INSTRUCTION_INPUT(VPEXTRWreg/m16, xmm2, imm8, "VEX.128.66.0F3A.W0 15 /r ib", "Extract a word integer value from xmm2 at the source word offset specified by imm8 into reg or m16. The upper bits of r64/r32 is filled with zeros.")
INSTRUCTION_INPUT(VPEXTRWreg, xmm1, imm8, "EVEX.128.66.0F.WIG C5 /r ib", "Extract the word specified by imm8 from xmm1 and move it to reg, bits 15:0. Zero-extend the result. The upper bits of r64/r32 is filled with zeros.")
INSTRUCTION_INPUT(VPEXTRWreg/m16, xmm2, imm8, "EVEX.128.66.0F3A.WIG 15 /r ib", "Extract a word integer value from xmm2 at the source word offset specified by imm8 into reg or m16. The upper bits of r64/r32 is filled with zeros.")
INSTRUCTION_INPUT(PHADDSWmm1, mm2/m64, "0F 38 03 /r", "Add 16-bit signed integers horizontally, pack saturated integers to mm1.")
INSTRUCTION_INPUT(PHADDSWxmm1, xmm2/m128, "66 0F 38 03 /r", "Add 16-bit signed integers horizontally, pack saturated integers to xmm1.")
INSTRUCTION_INPUT(VPHADDSWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 03 /r", "Add 16-bit signed integers horizontally, pack saturated integers to xmm1.")
INSTRUCTION_INPUT(VPHADDSWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.WIG 03 /r", "Add 16-bit signed integers horizontally, pack saturated integers to ymm1.")
INSTRUCTION_INPUT(PHMINPOSUWxmm1, xmm2/m128, "66 0F 38 41 /r", "Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the second-lowest word of xmm1.")
INSTRUCTION_INPUT(VPHMINPOSUWxmm1, xmm2/m128, "VEX.128.66.0F38.WIG 41 /r", "Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the second-lowest word of xmm1.")
INSTRUCTION_INPUT(PHSUBSWmm1, mm2/m64, "0F 38 07 /r", "Subtract 16-bit signed integer horizontally, pack saturated integers to mm1.")
INSTRUCTION_INPUT(PHSUBSWxmm1, xmm2/m128, "66 0F 38 07 /r", "Subtract 16-bit signed integer horizontally, pack saturated integers to xmm1.")
INSTRUCTION_INPUT(VPHSUBSWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 07 /r", "Subtract 16-bit signed integer horizontally, pack saturated integers to xmm1.")
INSTRUCTION_INPUT(VPHSUBSWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.WIG 07 /r", "Subtract 16-bit signed integer horizontally, pack saturated integers to ymm1.")
INSTRUCTION_INPUT(PINSRWmm, r32/m16, imm8, "0F C4 /r ib", "Insert the low word from r32 or from m16 into mm at the word position specified by imm8.")
INSTRUCTION_INPUT(PINSRWxmm, r32/m16, imm8, "66 0F C4 /r ib", "Move the low word of r32 or from m16 into xmm at the word position specified by imm8.")
INSTRUCTION_INPUT(VPINSRWxmm1, xmm2, r32/m16, imm8, "VEX.NDS.128.66.0F.W0 C4 /r ib", "Insert a word integer value from r32/m16 and rest from xmm2 into xmm1 at the word offset in imm8.")
INSTRUCTION_INPUT(VPINSRWxmm1, xmm2, r32/m16, imm8, "EVEX.NDS.128.66.0F.WIG C4 /r ib", "Insert a word integer value from r32/m16 and rest from xmm2 into xmm1 at the word offset in imm8.")
INSTRUCTION_INPUT(PMADDUBSWmm1, mm2/m64, "0F 38 04 /r", "Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to mm1.")
INSTRUCTION_INPUT(PMADDUBSWxmm1, xmm2/m128, "66 0F 38 04 /r", "Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to xmm1.")
INSTRUCTION_INPUT(VPMADDUBSWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 04 /r", "Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to xmm1.")
INSTRUCTION_INPUT(VPMADDUBSWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.WIG 04 /r", "Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to ymm1.")
INSTRUCTION_INPUT(VPMADDUBSWxmm1 {k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F38.WIG 04 /r", "Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to xmm1 under writemask k1.")
INSTRUCTION_INPUT(VPMADDUBSWymm1 {k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F38.WIG 04 /r", "
Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to ymm1 under writemask k1.")
INSTRUCTION_INPUT(VPMADDUBSWzmm1 {k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F38.WIG 04 /r", "Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to zmm1 under writemask k1.")
INSTRUCTION_INPUT(PMADDWDmm, mm/m64, "0F F5 /r", "Multiply the packed words in mm by the packed words in mm/m64, add adjacent doubleword results, and store in mm.")
INSTRUCTION_INPUT(PMADDWDxmm1, xmm2/m128, "66 0F F5 /r", "Multiply the packed word integers in xmm1 by the packed word integers in xmm2/m128, add adjacent doubleword results, and store in xmm1.")
INSTRUCTION_INPUT(VPMADDWDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG F5 /r", "Multiply the packed word integers in xmm2 by the packed word integers in xmm3/m128, add adjacent doubleword results, and store in xmm1.")
INSTRUCTION_INPUT(VPMADDWDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG F5 /r", "Multiply the packed word integers in ymm2 by the packed word integers in ymm3/m256, add adjacent doubleword results, and store in ymm1.")
INSTRUCTION_INPUT(VPMADDWDxmm1 {k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F.WIG F5 /r", "Multiply the packed word integers in xmm2 by the packed word integers in xmm3/m128, add adjacent doubleword results, and store in xmm1 under writemask k1.")
INSTRUCTION_INPUT(VPMADDWDymm1 {k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F.WIG F5 /r", "Multiply the packed word integers in ymm2 by the packed word integers in ymm3/m256, add adjacent doubleword results, and store in ymm1 under writemask k1.")
INSTRUCTION_INPUT(VPMADDWDzmm1 {k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F.WIG F5 /r", "Multiply the packed word integers in zmm2 by the packed word integers in zmm3/m512, add adjacent doubleword results, and store in zmm1 under writemask k1.")
INSTRUCTION_INPUT(PMOVMSKBreg, mm, "0F D7 /r", "Move a byte mask of mm to reg. The upper bits of r32 or r64 are zeroed")
INSTRUCTION_INPUT(PMOVMSKBreg, xmm, "66 0F D7 /r", "Move a byte mask of xmm to reg. The upper bits of r32 or r64 are zeroed")
INSTRUCTION_INPUT(VPMOVMSKBreg, xmm1, "VEX.128.66.0F.WIG D7 /r", "Move a byte mask of xmm1 to reg. The upper bits of r32 or r64 are filled with zeros.")
INSTRUCTION_INPUT(VPMOVMSKBreg, ymm1, "VEX.256.66.0F.WIG D7 /r", "Move a 32-bit mask of ymm1 to reg. The upper bits of r64 are filled with zeros.")
INSTRUCTION_INPUT(PMOVSXBWxmm1, xmm2/m64, "66 0f 38 20 /r", "Sign extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVSXBDxmm1, xmm2/m32, "66 0f 38 21 /r", "Sign extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVSXBQxmm1, xmm2/m16, "66 0f 38 22 /r", "Sign extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVSXWDxmm1, xmm2/m64, "66 0f 38 23/r", "Sign extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVSXWQxmm1, xmm2/m32, "66 0f 38 24 /r", "Sign extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVSXDQxmm1, xmm2/m64, "66 0f 38 25 /r", "Sign extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVSXBWxmm1, xmm2/m64, "VEX.128.66.0F38.WIG 20 /r", "Sign extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVSXBDxmm1, xmm2/m32, "VEX.128.66.0F38.WIG 21 /r", "Sign extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVSXBQxmm1, xmm2/m16, "VEX.128.66.0F38.WIG 22 /r", "Sign extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVSXWDxmm1, xmm2/m64, "VEX.128.66.0F38.WIG 23 /r", "Sign extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVSXWQxmm1, xmm2/m32, "VEX.128.66.0F38.WIG 24 /r", "Sign extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVSXDQxmm1, xmm2/m64, "VEX.128.66.0F38.WIG 25 /r", "Sign extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVSXBWymm1, xmm2/m128, "VEX.256.66.0F38.WIG 20 /r", "Sign extend 16 packed 8-bit integers in xmm2/m128 to 16 packed 16-bit integers in ymm1.")
INSTRUCTION_INPUT(VPMOVSXBDymm1, xmm2/m64, "VEX.256.66.0F38.WIG 21 /r", "Sign extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 32-bit integers in ymm1.")
INSTRUCTION_INPUT(VPMOVSXBQymm1, xmm2/m32, "VEX.256.66.0F38.WIG 22 /r", "Sign extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 64-bit integers in ymm1.")
INSTRUCTION_INPUT(VPMOVSXWDymm1, xmm2/m128, "VEX.256.66.0F38.WIG 23 /r", "Sign extend 8 packed 16-bit integers in the low 16 bytes of xmm2/m128 to 8 packed 32-bit integers in ymm1.")
INSTRUCTION_INPUT(PMOVZXBWxmm1, xmm2/m64, "66 0f 38 30 /r", "Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVZXBDxmm1, xmm2/m32, "66 0f 38 31 /r", "Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVZXBQxmm1, xmm2/m16, "66 0f 38 32 /r", "Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVZXWDxmm1, xmm2/m64, "66 0f 38 33 /r", "Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVZXWQxmm1, xmm2/m32, "66 0f 38 34 /r", "Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(PMOVZXDQxmm1, xmm2/m64, "66 0f 38 35 /r", "Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVZXBWxmm1, xmm2/m64, "VEX.128.66.0F38.WIG 30 /r", "Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVZXBDxmm1, xmm2/m32, "VEX.128.66.0F38.WIG 31 /r", "Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVZXBQxmm1, xmm2/m16, "VEX.128.66.0F38.WIG 32 /r", "Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVZXWDxmm1, xmm2/m64, "VEX.128.66.0F38.WIG 33 /r", "Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVZXWQxmm1, xmm2/m32, "VEX.128.66.0F38.WIG 34 /r", "Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVZXDQxmm1, xmm2/m64, "VEX.128.66.0F 38.WIG 35 /r", "Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1.")
INSTRUCTION_INPUT(VPMOVZXBWymm1, xmm2/m128, "VEX.256.66.0F38.WIG 30 /r", "Zero extend 16 packed 8-bit integers in xmm2/m128 to 16 packed 16-bit integers in ymm1.")
INSTRUCTION_INPUT(VPMOVZXBDymm1, xmm2/m64, "VEX.256.66.0F38.WIG 31 /r", "Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 32-bit integers in ymm1.")
INSTRUCTION_INPUT(VPMOVZXBQymm1, xmm2/m32, "VEX.256.66.0F38.WIG 32 /r", "Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 64-bit integers in ymm1.")
INSTRUCTION_INPUT(VPMOVZXWDymm1, xmm2/m128, "VEX.256.66.0F38.WIG 33 /r", "Zero extend 8 packed 16-bit integers xmm2/m128 to 8 packed 32-bit integers in ymm1.")
INSTRUCTION_INPUT(PMULDQxmm1, xmm2/m128, "66 0F 38 28 /r", "Multiply packed signed doubleword integers in xmm1 by packed signed doubleword integers in xmm2/m128, and store the quadword results in xmm1.")
INSTRUCTION_INPUT(VPMULDQxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 28 /r", "Multiply packed signed doubleword integers in xmm2 by packed signed doubleword integers in xmm3/m128, and store the quadword results in xmm1.")
INSTRUCTION_INPUT(VPMULDQymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.WIG 28 /r", "Multiply packed signed doubleword integers in ymm2 by packed signed doubleword integers in ymm3/m256, and store the quadword results in ymm1.")
INSTRUCTION_INPUT(VPMULDQxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F38.W1 28 /r", "Multiply packed signed doubleword integers in xmm2 by packed signed doubleword integers in xmm3/m128/m64bcst, and store the quadword results in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPMULDQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F38.W1 28 /r", "Multiply packed signed doubleword integers in ymm2 by packed signed doubleword integers in ymm3/m256/m64bcst, and store the quadword results in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPMULDQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F38.W1 28 /r", "Multiply packed signed doubleword integers in zmm2 by packed signed doubleword integers in zmm3/m512/m64bcst, and store the quadword results in zmm1 using writemask k1.")
INSTRUCTION_INPUT(PMULHRSWmm1, mm2/m64, "0F 38 0B /r", "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to mm1.")
INSTRUCTION_INPUT(PMULHRSWxmm1, xmm2/m128, "66 0F 38 0B /r", "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to xmm1.")
INSTRUCTION_INPUT(VPMULHRSWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 0B /r", "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to xmm1.")
INSTRUCTION_INPUT(VPMULHRSWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.WIG 0B /r", "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to ymm1.")
INSTRUCTION_INPUT(VPMULHRSWxmm1 {k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F38.WIG 0B /r", "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to xmm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULHRSWymm1 {k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F38.WIG 0B /r", "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to ymm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULHRSWzmm1 {k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F38.WIG 0B /r", "Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to zmm1 under writemask k1.")
INSTRUCTION_INPUT(PMULHUWmm1, mm2/m64, "0F E4 /r", "Multiply the packed unsigned word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1.")
INSTRUCTION_INPUT(PMULHUWxmm1, xmm2/m128, "66 0F E4 /r", "Multiply the packed unsigned word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1.")
INSTRUCTION_INPUT(VPMULHUWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG E4 /r", "Multiply the packed unsigned word integers in xmm2 and xmm3/m128, and store the high 16 bits of the results in xmm1.")
INSTRUCTION_INPUT(VPMULHUWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG E4 /r", "Multiply the packed unsigned word integers in ymm2 and ymm3/m256, and store the high 16 bits of the results in ymm1.")
INSTRUCTION_INPUT(VPMULHUWxmm1 {k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F.WIG E4 /r", "Multiply the packed unsigned word integers in xmm2 and xmm3/m128, and store the high 16 bits of the results in xmm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULHUWymm1 {k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F.WIG E4 /r", "Multiply the packed unsigned word integers in ymm2 and ymm3/m256, and store the high 16 bits of the results in ymm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULHUWzmm1 {k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F.WIG E4 /r", "Multiply the packed unsigned word integers in zmm2 and zmm3/m512, and store the high 16 bits of the results in zmm1 under writemask k1.")
INSTRUCTION_INPUT(PMULHWmm, mm/m64, "0F E5 /r", "Multiply the packed signed word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1.")
INSTRUCTION_INPUT(PMULHWxmm1, xmm2/m128, "66 0F E5 /r", "Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the high 16 bits of the results in xmm1.")
INSTRUCTION_INPUT(VPMULHWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG E5 /r", "Multiply the packed signed word integers in xmm2 and xmm3/m128, and store the high 16 bits of the results in xmm1.")
INSTRUCTION_INPUT(VPMULHWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG E5 /r", "Multiply the packed signed word integers in ymm2 and ymm3/m256, and store the high 16 bits of the results in ymm1.")
INSTRUCTION_INPUT(VPMULHWxmm1 {k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F.WIG E5 /r", "Multiply the packed signed word integers in xmm2 and xmm3/m128, and store the high 16 bits of the results in xmm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULHWymm1 {k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F.WIG E5 /r", "Multiply the packed signed word integers in ymm2 and ymm3/m256, and store the high 16 bits of the results in ymm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULHWzmm1 {k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F.WIG E5 /r", "Multiply the packed signed word integers in zmm2 and zmm3/m512, and store the high 16 bits of the results in zmm1 under writemask k1.")
INSTRUCTION_INPUT(PMULLWmm, mm/m64, "0F D5 /r", "Multiply the packed signed word integers in mm1 register and mm2/m64, and store the low 16 bits of the results in mm1.")
INSTRUCTION_INPUT(PMULLWxmm1, xmm2/m128, "66 0F D5 /r", "Multiply the packed signed word integers in xmm1 and xmm2/m128, and store the low 16 bits of the results in xmm1.")
INSTRUCTION_INPUT(VPMULLWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG D5 /r", "Multiply the packed dword signed integers in xmm2 and xmm3/m128 and store the low 32 bits of each product in xmm1.")
INSTRUCTION_INPUT(VPMULLWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG D5 /r", "Multiply the packed signed word integers in ymm2 and ymm3/m256, and store the low 16 bits of the results in ymm1.")
INSTRUCTION_INPUT(VPMULLWxmm1 {k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F.WIG D5 /r", "Multiply the packed signed word integers in xmm2 and xmm3/m128, and store the low 16 bits of the results in xmm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULLWymm1 {k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F.WIG D5 /r", "Multiply the packed signed word integers in ymm2 and ymm3/m256, and store the low 16 bits of the results in ymm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULLWzmm1 {k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F.WIG D5 /r", "Multiply the packed signed word integers in zmm2 and zmm3/m512, and store the low 16 bits of the results in zmm1 under writemask k1.")
INSTRUCTION_INPUT(PMULUDQmm1, mm2/m64, "0F F4 /r", "Multiply unsigned doubleword integer in mm1 by unsigned doubleword integer in mm2/m64, and store the quadword result in mm1.")
INSTRUCTION_INPUT(PMULUDQxmm1, xmm2/m128, "66 0F F4 /r", "Multiply packed unsigned doubleword integers in xmm1 by packed unsigned doubleword integers in xmm2/m128, and store the quadword results in xmm1.")
INSTRUCTION_INPUT(VPMULUDQxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG F4 /r", "Multiply packed unsigned doubleword integers in xmm2 by packed unsigned doubleword integers in xmm3/m128, and store the quadword results in xmm1.")
INSTRUCTION_INPUT(VPMULUDQymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG F4 /r", "Multiply packed unsigned doubleword integers in ymm2 by packed unsigned doubleword integers in ymm3/m256, and store the quadword results in ymm1.")
INSTRUCTION_INPUT(VPMULUDQxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 F4 /r", "Multiply packed unsigned doubleword integers in xmm2 by packed unsigned doubleword integers in xmm3/m128/m64bcst, and store the quadword results in xmm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULUDQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 F4 /r", "Multiply packed unsigned doubleword integers in ymm2 by packed unsigned doubleword integers in ymm3/m256/m64bcst, and store the quadword results in ymm1 under writemask k1.")
INSTRUCTION_INPUT(VPMULUDQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 F4 /r", "Multiply packed unsigned doubleword integers in zmm2 by packed unsigned doubleword integers in zmm3/m512/m64bcst, and store the quadword results in zmm1 under writemask k1.")
INSTRUCTION_INPUT(POPr/m16, "8F /0", "Pop top of stack into m16; increment stack pointer.")
INSTRUCTION_INPUT(POPr/m32, "8F /0", "Pop top of stack into m32; increment stack pointer.")
INSTRUCTION_INPUT(POPr/m64, "8F /0", "Pop top of stack into m64; increment stack pointer. Cannot encode 32-bit operand size.")
INSTRUCTION_INPUT(POPr16, "58+ rw", "Pop top of stack into r16; increment stack pointer.")
INSTRUCTION_INPUT(POPr32, "58+ rd", "Pop top of stack into r32; increment stack pointer.")
INSTRUCTION_INPUT(POPr64, "58+ rd", "Pop top of stack into r64; increment stack pointer. Cannot encode 32-bit operand size.")
INSTRUCTION_INPUT(POPDS, "1F", "Pop top of stack into DS; increment stack pointer.")
INSTRUCTION_INPUT(POPES, "07", "Pop top of stack into ES; increment stack pointer.")
INSTRUCTION_INPUT(POPSS, "17", "Pop top of stack into SS; increment stack pointer.")
INSTRUCTION_INPUT(POPFS, "0F A1", "Pop top of stack into FS; increment stack pointer by 16 bits.")
INSTRUCTION_INPUT(POPFS, "0F A1", "Pop top of stack into FS; increment stack pointer by 32 bits.")
INSTRUCTION_INPUT(POPFS, "0F A1", "Pop top of stack into FS; increment stack pointer by 64 bits.")
INSTRUCTION_INPUT(POPGS, "0F A9", "Pop top of stack into GS; increment stack pointer by 16 bits.")
INSTRUCTION_INPUT(POPGS, "0F A9", "Pop top of stack into GS; increment stack pointer by 32 bits.")
INSTRUCTION_INPUT(POPGS, "0F A9", "Pop top of stack into GS; increment stack pointer by 64 bits.")
INSTRUCTION_INPUT(POPCNTr16, r/m16, "F3  0F B8 /r", "POPCNT on r/m16")
INSTRUCTION_INPUT(POPCNTr32, r/m32, "F3  0F B8 /r", "POPCNT on r/m32")
INSTRUCTION_INPUT(POPCNTr64, r/m64, "F3 REX.W 0F B8 /r", "POPCNT on r/m64")
INSTRUCTION_INPUT(PORmm, mm/m64, "0F EB /r", "Bitwise OR of mm/m64 and mm.")
INSTRUCTION_INPUT(PORxmm1, xmm2/m128, "66 0F EB /r", "Bitwise OR of xmm2/m128 and xmm1.")
INSTRUCTION_INPUT(VPORxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG EB /r", "Bitwise OR of xmm2/m128 and xmm3.")
INSTRUCTION_INPUT(VPORymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG EB /r", "Bitwise OR of ymm2/m256 and ymm3.")
INSTRUCTION_INPUT(VPORDxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.66.0F.W0 EB /r", "Bitwise OR of packed doubleword integers in xmm2 and xmm3/m128/m32bcst using writemask k1.")
INSTRUCTION_INPUT(VPORDymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F.W0 EB /r", "Bitwise OR of packed doubleword integers in ymm2 and ymm3/m256/m32bcst using writemask k1.")
INSTRUCTION_INPUT(VPORDzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.66.0F.W0 EB /r", "Bitwise OR of packed doubleword integers in zmm2 and zmm3/m512/m32bcst using writemask k1.")
INSTRUCTION_INPUT(VPORQxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 EB /r", "Bitwise OR of packed quadword integers in xmm2 and xmm3/m128/m64bcst using writemask k1.")
INSTRUCTION_INPUT(VPORQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 EB /r", "Bitwise OR of packed quadword integers in ymm2 and ymm3/m256/m64bcst using writemask k1.")
INSTRUCTION_INPUT(VPORQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 EB /r", "Bitwise OR of packed quadword integers in zmm2 and zmm3/m512/m64bcst using writemask k1.")
INSTRUCTION_INPUT(PREFETCHWm8, "0F 0D /1", "Move data from m8 closer to the processor in anticipation of a write.")
INSTRUCTION_INPUT(PREFETCHWT1m8, "0F 0D /2", "Move data from m8 closer to the processor using T1 hint with intent to write.")
INSTRUCTION_INPUT(PREFETCHT0m8, "0F 18 /1", "Move data from m8 closer to the processor using T0 hint.")
INSTRUCTION_INPUT(PREFETCHT1m8, "0F 18 /2", "Move data from m8 closer to the processor using T1 hint.")
INSTRUCTION_INPUT(PREFETCHT2m8, "0F 18 /3", "Move data from m8 closer to the processor using T2 hint.")
INSTRUCTION_INPUT(PREFETCHNTAm8, "0F 18 /0", "Move data from m8 closer to the processor using NTA hint.")
INSTRUCTION_INPUT(PSADBWmm1, mm2/m64, "0F F6 /r", "Computes the absolute differences of the packed unsigned byte integers from mm2 /m64 and mm1; differences are then summed to produce an unsigned word integer result.")
INSTRUCTION_INPUT(PSADBWxmm1, xmm2/m128, "66 0F F6 /r", "Computes the absolute differences of the packed unsigned byte integers from xmm2 /m128 and xmm1; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.")
INSTRUCTION_INPUT(VPSADBWxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG F6 /r", "Computes the absolute differences of the packed unsigned byte integers from xmm3 /m128 and xmm2; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.")
INSTRUCTION_INPUT(VPSADBWymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG F6 /r", "Computes the absolute differences of the packed unsigned byte integers from ymm3 /m256 and ymm2; then each consecutive 8 differences are summed separately to produce four unsigned word integer results.")
INSTRUCTION_INPUT(VPSADBWxmm1, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F.WIG F6 /r", "Computes the absolute differences of the packed unsigned byte integers from xmm3 /m128 and xmm2; then each consecutive 8 differences are summed separately to produce four unsigned word integer results.")
INSTRUCTION_INPUT(VPSADBWymm1, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F.WIG F6 /r", "Computes the absolute differences of the packed unsigned byte integers from ymm3 /m256 and ymm2; then each consecutive 8 differences are summed separately to produce four unsigned word integer results.")
INSTRUCTION_INPUT(VPSADBWzmm1, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F.WIG F6 /r", "Computes the absolute differences of the packed unsigned byte integers from zmm3 /m512 and zmm2; then each consecutive 8 differences are summed separately to produce four unsigned word integer results.")
INSTRUCTION_INPUT(PSHUFBmm1, mm2/m64, "0F 38 00 /r", "Shuffle bytes in mm1 according to contents of mm2/m64.")
INSTRUCTION_INPUT(PSHUFBxmm1, xmm2/m128, "66 0F 38 00 /r", "Shuffle bytes in xmm1 according to contents of xmm2/m128.")
INSTRUCTION_INPUT(VPSHUFBxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.WIG 00 /r", "Shuffle bytes in xmm2 according to contents of xmm3/m128.")
INSTRUCTION_INPUT(VPSHUFBymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.WIG 00 /r", "Shuffle bytes in ymm2 according to contents of ymm3/m256.")
INSTRUCTION_INPUT(VPSHUFBxmm1 {k1}{z}, xmm2, xmm3/m128, "EVEX.NDS.128.66.0F38.WIG 00 /r", "Shuffle bytes in xmm2 according to contents of xmm3/m128 under write mask k1.")
INSTRUCTION_INPUT(VPSHUFBymm1 {k1}{z}, ymm2, ymm3/m256, "EVEX.NDS.256.66.0F38.WIG 00 /r", "Shuffle bytes in ymm2 according to contents of ymm3/m256 under write mask k1.")
INSTRUCTION_INPUT(VPSHUFBzmm1 {k1}{z}, zmm2, zmm3/m512, "EVEX.NDS.512.66.0F38.WIG 00 /r", "
Shuffle bytes in ymm2 according to contents of zmm3/m512 under write mask k1.")
INSTRUCTION_INPUT(PSHUFDxmm1, xmm2/m128, imm8, "66 0F 70 /r ib", "Shuffle the doublewords in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.")
INSTRUCTION_INPUT(VPSHUFDxmm1, xmm2/m128, imm8, "VEX.128.66.0F.WIG 70 /r ib", "Shuffle the doublewords in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.")
INSTRUCTION_INPUT(VPSHUFDymm1, ymm2/m256, imm8, "VEX.256.66.0F.WIG 70 /r ib", "Shuffle the doublewords in ymm2/m256 based on the encoding in imm8 and store the result in ymm1.")
INSTRUCTION_INPUT(VPSHUFDxmm1 {k1}{z}, xmm2/m128/m32bcst, imm8, "EVEX.128.66.0F.W0 70 /r ib", "Shuffle the doublewords in xmm2/m128/m32bcst based on the encoding in imm8 and store the result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPSHUFDymm1 {k1}{z}, ymm2/m256/m32bcst, imm8, "EVEX.256.66.0F.W0 70 /r ib", "Shuffle the doublewords in ymm2/m256/m32bcst based on the encoding in imm8 and store the result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPSHUFDzmm1 {k1}{z}, zmm2/m512/m32bcst, imm8, "EVEX.512.66.0F.W0 70 /r ib", "Shuffle the doublewords in zmm2/m512/m32bcst based on the encoding in imm8 and store the result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(PSHUFHWxmm1, xmm2/m128, imm8, "F3 0F 70 /r ib", "Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.")
INSTRUCTION_INPUT(VPSHUFHWxmm1, xmm2/m128, imm8, "VEX.128.F3.0F.WIG 70 /r ib", "Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.")
INSTRUCTION_INPUT(VPSHUFHWymm1, ymm2/m256, imm8, "VEX.256.F3.0F.WIG 70 /r ib", "Shuffle the high words in ymm2/m256 based on the encoding in imm8 and store the result in ymm1.")
INSTRUCTION_INPUT(VPSHUFHWxmm1 {k1}{z}, xmm2/m128, imm8, "EVEX.128.F3.0F.WIG 70 /r ib", "Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1 under write mask k1.")
INSTRUCTION_INPUT(VPSHUFHWymm1 {k1}{z}, ymm2/m256, imm8, "EVEX.256.F3.0F.WIG 70 /r ib", "Shuffle the high words in ymm2/m256 based on the encoding in imm8 and store the result in ymm1 under write mask k1.")
INSTRUCTION_INPUT(VPSHUFHWzmm1 {k1}{z}, zmm2/m512, imm8, "EVEX.512.F3.0F.WIG 70 /r ib", "Shuffle the high words in ymm2/m256 based on the encoding in imm8 and store the result in zmm1 under write mask k1.")
INSTRUCTION_INPUT(PSHUFLWxmm1, xmm2/m128, imm8, "F2 0F 70 /r ib", "Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.")
INSTRUCTION_INPUT(VPSHUFLWxmm1, xmm2/m128, imm8, "VEX.128.F2.0F.WIG 70 /r ib", "Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.")
INSTRUCTION_INPUT(VPSHUFLWymm1, ymm2/m256, imm8, "VEX.256.F2.0F.WIG 70 /r ib", "Shuffle the low words in ymm2/m256 based on the encoding in imm8 and store the result in ymm1.")
INSTRUCTION_INPUT(VPSHUFLWxmm1 {k1}{z}, xmm2/m128, imm8, "EVEX.128.F2.0F.WIG 70 /r ib", "Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1 under write mask k1.")
INSTRUCTION_INPUT(VPSHUFLWymm1 {k1}{z}, ymm2/m256, imm8, "EVEX.256.F2.0F.WIG 70 /r ib", "Shuffle the low words in ymm2/m256 based on the encoding in imm8 and store the result in ymm1 under write mask k1.")
INSTRUCTION_INPUT(VPSHUFLWzmm1 {k1}{z}, zmm2/m512, imm8, "EVEX.512.F2.0F.WIG 70 /r ib", "Shuffle the low words in zmm2/m512 based on the encoding in imm8 and store the result in zmm1 under write mask k1.")
INSTRUCTION_INPUT(PSHUFWmm1, mm2/m64, imm8, "0F 70 /r ib", "Shuffle the words in mm2/m64 based on the encoding in imm8 and store the result in mm1.")
INSTRUCTION_INPUT(PSLLDQxmm1, imm8, "66 0F 73 /7 ib", "Shift xmm1 left by imm8 bytes while shifting in 0s.")
INSTRUCTION_INPUT(VPSLLDQxmm1, xmm2, imm8, "VEX.NDD.128.66.0F.WIG 73 /7 ib", "Shift xmm2 left by imm8 bytes while shifting in 0s and store result in xmm1.")
INSTRUCTION_INPUT(VPSLLDQymm1, ymm2, imm8, "VEX.NDD.256.66.0F.WIG 73 /7 ib", "Shift ymm2 left by imm8 bytes while shifting in 0s and store result in ymm1.")
INSTRUCTION_INPUT(VPSLLDQxmm1,xmm2/ m128, imm8, "EVEX.NDD.128.66.0F.WIG 73 /7 ib", "Shift xmm2/m128 left by imm8 bytes while shifting in 0s and store result in xmm1.")
INSTRUCTION_INPUT(VPSLLDQymm1, ymm2/m256, imm8, "EVEX.NDD.256.66.0F.WIG 73 /7 ib", "Shift ymm2/m256 left by imm8 bytes while shifting in 0s and store result in ymm1.")
INSTRUCTION_INPUT(VPSLLDQzmm1, zmm2/m512, imm8, "EVEX.NDD.512.66.0F.WIG 73 /7 ib", "Shift zmm2/m512 left by imm8 bytes while shifting in 0s and store result in zmm1.")
INSTRUCTION_INPUT(PSRLDQxmm1, imm8, "66 0F 73 /3 ib", "Shift xmm1 right by imm8 while shifting in 0s.")
INSTRUCTION_INPUT(VPSRLDQxmm1, xmm2, imm8, "VEX.NDD.128.66.0F.WIG 73 /3 ib", "Shift xmm2 right by imm8 bytes while shifting in 0s.")
INSTRUCTION_INPUT(VPSRLDQymm1, ymm2, imm8, "VEX.NDD.256.66.0F.WIG 73 /3 ib", "Shift ymm1 right by imm8 bytes while shifting in 0s.")
INSTRUCTION_INPUT(VPSRLDQxmm1, xmm2/m128, imm8, "EVEX.NDD.128.66.0F.WIG 73 /3 ib", "Shift xmm2/m128 right by imm8 bytes while shifting in 0s and store result in xmm1.")
INSTRUCTION_INPUT(VPSRLDQymm1, ymm2/m256, imm8, "EVEX.NDD.256.66.0F.WIG 73 /3 ib", "Shift ymm2/m256 right by imm8 bytes while shifting in 0s and store result in ymm1.")
INSTRUCTION_INPUT(VPSRLDQzmm1, zmm2/m512, imm8, "EVEX.NDD.512.66.0F.WIG 73 /3 ib", "Shift zmm2/m512 right by imm8 bytes while shifting in 0s and store result in zmm1.")
INSTRUCTION_INPUT(PSUBQmm1, mm2/m64, "0F FB /r", "Subtract quadword integer in mm1 from mm2 /m64.")
INSTRUCTION_INPUT(PSUBQxmm1, xmm2/m128, "66 0F FB /r", "Subtract packed quadword integers in xmm1 from xmm2 /m128.")
INSTRUCTION_INPUT(VPSUBQxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG FB/r", "Subtract packed quadword integers in xmm3/m128 from xmm2.")
INSTRUCTION_INPUT(VPSUBQymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG FB /r", "Subtract packed quadword integers in ymm3/m256 from ymm2.")
INSTRUCTION_INPUT(VPSUBQxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 FB /r", "Subtract packed quadword integers in xmm3/m128/m64bcst from xmm2 and store in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPSUBQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 FB /r", "Subtract packed quadword integers in ymm3/m256/m64bcst from ymm2 and store in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPSUBQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 FB/r", "Subtract packed quadword integers in zmm3/m512/m64bcst from zmm2 and store in zmm1 using writemask k1.")
INSTRUCTION_INPUT(PTESTxmm1, xmm2/m128, "66 0F 38 17 /r", "Set ZF if xmm2/m128 AND xmm1 result is all 0s. Set CF if xmm2/m128 AND NOT xmm1 result is all 0s.")
INSTRUCTION_INPUT(VPTESTxmm1, xmm2/m128, "VEX.128.66.0F38.WIG 17 /r", "Set ZF and CF depending on bitwise AND and ANDN of sources.")
INSTRUCTION_INPUT(VPTESTymm1, ymm2/m256, "VEX.256.66.0F38.WIG 17 /r", "Set ZF and CF depending on bitwise AND and ANDN of sources.")
INSTRUCTION_INPUT(PTWRITEr64/m64, "F3 REX.W 0F AE /4", "Reads the data from r64/m64 to encod into a PTW packet if dependencies are met (see details below).")
INSTRUCTION_INPUT(PTWRITEr32/m32, "F3 0F AE /4", "Reads the data from r32/m32 to encode into a PTW packet if dependencies are met (see details below).")
INSTRUCTION_INPUT(PUSHr/m16, "FF /6", "Push r/m16.")
INSTRUCTION_INPUT(PUSHr/m32, "FF /6", "Push r/m32.")
INSTRUCTION_INPUT(PUSHr/m64, "FF /6", "Push r/m64.")
INSTRUCTION_INPUT(PUSHr16, "50+rw", "Push r16.")
INSTRUCTION_INPUT(PUSHr32, "50+rd", "Push r32.")
INSTRUCTION_INPUT(PUSHr64, "50+rd", "Push r64.")
INSTRUCTION_INPUT(PUSHimm8, "6A ib", "Push imm8.")
INSTRUCTION_INPUT(PUSHimm16, "68 iw", "Push imm16.")
INSTRUCTION_INPUT(PUSHimm32, "68 id", "Push imm32.")
INSTRUCTION_INPUT(PUSHCS, "0E", "Push CS.")
INSTRUCTION_INPUT(PUSHSS, "16", "Push SS.")
INSTRUCTION_INPUT(PUSHDS, "1E", "Push DS.")
INSTRUCTION_INPUT(PUSHES, "06", "Push ES.")
INSTRUCTION_INPUT(PUSHFS, "0F A0", "Push FS.")
INSTRUCTION_INPUT(PUSHGS, "0F A8", "Push GS.")
INSTRUCTION_INPUT(PXORmm, mm/m64, "0F EF /r", "Bitwise XOR of mm/m64 and mm.")
INSTRUCTION_INPUT(PXORxmm1, xmm2/m128, "66 0F EF /r", "Bitwise XOR of xmm2/m128 and xmm1.")
INSTRUCTION_INPUT(VPXORxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG EF /r", "Bitwise XOR of xmm3/m128 and xmm2.")
INSTRUCTION_INPUT(VPXORymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG EF /r", "Bitwise XOR of ymm3/m256 and ymm2.")
INSTRUCTION_INPUT(VPXORDxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.66.0F.W0 EF /r", "Bitwise XOR of packed doubleword integers in xmm2 and xmm3/m128 using writemask k1.")
INSTRUCTION_INPUT(VPXORDymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F.W0 EF /r", "Bitwise XOR of packed doubleword integers in ymm2 and ymm3/m256 using writemask k1.")
INSTRUCTION_INPUT(VPXORDzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.66.0F.W0 EF /r", "Bitwise XOR of packed doubleword integers in zmm2 and zmm3/m512/m32bcst using writemask k1.")
INSTRUCTION_INPUT(VPXORQxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 EF /r", "Bitwise XOR of packed quadword integers in xmm2 and xmm3/m128 using writemask k1.")
INSTRUCTION_INPUT(VPXORQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 EF /r", "Bitwise XOR of packed quadword integers in ymm2 and ymm3/m256 using writemask k1.")
INSTRUCTION_INPUT(VPXORQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F.W1 EF /r", "Bitwise XOR of packed quadword integers in zmm2 and zmm3/m512/m64bcst using writemask k1.")
INSTRUCTION_INPUT(RCPPSxmm1, xmm2/m128, "0F 53 /r", "Computes the approximate reciprocals of the packed single-precision floating-point values in xmm2/m128 and stores the results in xmm1.")
INSTRUCTION_INPUT(VRCPPSxmm1, xmm2/m128, "VEX.128.0F.WIG 53 /r", "Computes the approximate reciprocals of packed single-precision values in xmm2/mem and stores the results in xmm1.")
INSTRUCTION_INPUT(VRCPPSymm1, ymm2/m256, "VEX.256.0F.WIG 53 /r", "Computes the approximate reciprocals of packed single-precision values in ymm2/mem and stores the results in ymm1.")
INSTRUCTION_INPUT(RCPSSxmm1, xmm2/m32, "F3 0F 53 /r", "Computes the approximate reciprocal of the scalar single-precision floating-point value in xmm2/m32 and stores the result in xmm1.")
INSTRUCTION_INPUT(VRCPSSxmm1, xmm2, xmm3/m32, "VEX.NDS.LIG.F3.0F.WIG 53 /r", "Computes the approximate reciprocal of the scalar single-precision floating-point value in xmm3/m32 and stores the result in xmm1. Also, upper single precision floating-point values (bits[127:32]) from xmm2 are copied to xmm1[127:32].")
INSTRUCTION_INPUT(RDMSR, "0F 32", "Read MSR specified by ECX into EDX:EAX.")
INSTRUCTION_INPUT(RDPIDr32, "F3 0F C7 /7", "Read IA32_TSC_AUX into r32.")
INSTRUCTION_INPUT(RDPIDr64, "F3 0F C7 /7", "Read IA32_TSC_AUX into r64.")
INSTRUCTION_INPUT(RDPKRU, "0F 01 EE", "Reads PKRU into EAX.")
INSTRUCTION_INPUT(RDPMC, "0F 33", "Read performance-monitoring counter specified by ECX into EDX:EAX.")
INSTRUCTION_INPUT(RDRANDr16, "0F C7 /6", "Read a 16-bit random number and store in the destination register.")
INSTRUCTION_INPUT(RDRANDr32, "0F C7 /6", "Read a 32-bit random number and store in the destination register.")
INSTRUCTION_INPUT(RDRANDr64, "REX.W + 0F C7 /6", "Read a 64-bit random number and store in the destination register.")
INSTRUCTION_INPUT(RDSEEDr16, "0F C7 /7", "Read a 16-bit NIST SP800-90B &amp; C compliant random value and store in the destination register.")
INSTRUCTION_INPUT(RDSEEDr32, "0F C7 /7", "Read a 32-bit NIST SP800-90B &amp; C compliant random value and store in the destination register.")
INSTRUCTION_INPUT(RDSEEDr64, "REX.W + 0F C7 /7", "Read a 64-bit NIST SP800-90B &amp; C compliant random value and store in the destination register.")
INSTRUCTION_INPUT(RDTSC, "0F 31", "Read time-stamp counter into EDX:EAX.")
INSTRUCTION_INPUT(RDTSCP, "0F 01 F9", "Read 64-bit time-stamp counter and IA32_TSC_AUX value into EDX:EAX and ECX.")
INSTRUCTION_INPUT(RET, "C3", "Near return to calling procedure.")
INSTRUCTION_INPUT(RET, "CB", "Far return to calling procedure.")
INSTRUCTION_INPUT(RETimm16, "C2 iw", "Near return to calling procedure and pop imm16 bytes from stack.")
INSTRUCTION_INPUT(RETimm16, "CA iw", "Far return to calling procedure and pop imm16 bytes from stack.")
INSTRUCTION_INPUT(RORXr32, r/m32, imm8, "VEX.LZ.F2.0F3A.W0 F0 /r ib", "Rotate 32-bit r/m32 right imm8 times without affecting arithmetic flags.")
INSTRUCTION_INPUT(RORXr64, r/m64, imm8, "VEX.LZ.F2.0F3A.W1 F0 /r ib", "Rotate 64-bit r/m64 right imm8 times without affecting arithmetic flags.")
INSTRUCTION_INPUT(ROUNDPDxmm1, xmm2/m128, imm8, "66 0F 3A 09 /r ib", "Round packed double precision floating-point values in xmm2/m128 and place the result in xmm1.  The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(VROUNDPDxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.WIG 09 /r ib", "Round packed double-precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(VROUNDPDymm1, ymm2/m256, imm8, "VEX.256.66.0F3A.WIG 09 /r ib", "Round packed double-precision floating-point values in ymm2/m256 and place the result in ymm1. The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(ROUNDPSxmm1, xmm2/m128, imm8, "66 0F 3A 08 /r ib", "Round packed single precision floating-point values in xmm2/m128 and place the result in xmm1.  The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(VROUNDPSxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.WIG 08 /r ib", "Round packed single-precision floating-point values in xmm2/m128 and place the result in xmm1. The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(VROUNDPSymm1, ymm2/m256, imm8, "VEX.256.66.0F3A.WIG 08 /r ib", "Round packed single-precision floating-point values in ymm2/m256 and place the result in ymm1. The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(ROUNDSDxmm1, xmm2/m64, imm8, "66 0F 3A 0B /r ib", "Round the low packed double precision floating-point value in xmm2/m64 and place the result in xmm1. The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(VROUNDSDxmm1, xmm2, xmm3/m64, imm8, "VEX.NDS.LIG.66.0F3A.WIG 0B /r ib", "Round the low packed double precision floating-point value in xmm3/m64 and place the result in xmm1. The rounding mode is determined by imm8. Upper packed double precision floating-point value (bits[127:64]) from xmm2 is copied to xmm1[127:64].")
INSTRUCTION_INPUT(ROUNDSSxmm1, xmm2/m32, imm8, "66 0F 3A 0A /r ib", "Round the low packed single precision floating-point value in xmm2/m32 and place the result in xmm1.  The rounding mode is determined by imm8.")
INSTRUCTION_INPUT(VROUNDSSxmm1, xmm2, xmm3/m32, imm8, "VEX.NDS.LIG.66.0F3A.WIG 0A /r ib", "Round the low packed single precision floating-point value in xmm3/m32 and place the result in xmm1. The rounding mode is determined by imm8. Also, upper packed single precision floating-point values (bits[127:32]) from xmm2 are copied to xmm1[127:32].")
INSTRUCTION_INPUT(RSM, "0F AA", "Resume operation of interrupted program.")
INSTRUCTION_INPUT(RSQRTPSxmm1, xmm2/m128, "0F 52 /r", "Computes the approximate reciprocals of the square roots of the packed single-precision floating-point values in xmm2/m128 and stores the results in xmm1.")
INSTRUCTION_INPUT(VRSQRTPSxmm1, xmm2/m128, "VEX.128.0F.WIG 52 /r", "Computes the approximate reciprocals of the square roots of packed single-precision values in xmm2/mem and stores the results in xmm1.")
INSTRUCTION_INPUT(VRSQRTPSymm1, ymm2/m256, "VEX.256.0F.WIG 52 /r", "Computes the approximate reciprocals of the square roots of packed single-precision values in ymm2/mem and stores the results in ymm1.")
INSTRUCTION_INPUT(RSQRTSSxmm1, xmm2/m32, "F3 0F 52 /r", "Computes the approximate reciprocal of the square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1.")
INSTRUCTION_INPUT(VRSQRTSSxmm1, xmm2, xmm3/m32, "VEX.NDS.LIG.F3.0F.WIG 52 /r", "Computes the approximate reciprocal of the square root of the low single precision floating-point value in xmm3/m32 and stores the results in xmm1. Also, upper single precision floating-point values (bits[127:32]) from xmm2 are copied to xmm1[127:32].")
INSTRUCTION_INPUT(SAHF, "9E", "Loads SF, ZF, AF, PF, and CF from AH into EFLAGS register.")
INSTRUCTION_INPUT(SBBAL, imm8, "1C ib", "Subtract with borrow imm8 from AL.")
INSTRUCTION_INPUT(SBBAX, imm16, "1D iw", "Subtract with borrow imm16 from AX.")
INSTRUCTION_INPUT(SBBEAX, imm32, "1D id", "Subtract with borrow imm32 from EAX.")
INSTRUCTION_INPUT(SBBRAX, imm32, "REX.W + 1D id", "Subtract with borrow sign-extended imm.32 to 64-bits from RAX.")
INSTRUCTION_INPUT(SBBr/m8, imm8, "80 /3 ib", "Subtract with borrow imm8 from r/m8.")
INSTRUCTION_INPUT(SBBr/m8, imm8, "REX + 80 /3 ib", "Subtract with borrow imm8 from r/m8.")
INSTRUCTION_INPUT(SBBr/m16, imm16, "81 /3 iw", "Subtract with borrow imm16 from r/m16.")
INSTRUCTION_INPUT(SBBr/m32, imm32, "81 /3 id", "Subtract with borrow imm32 from r/m32.")
INSTRUCTION_INPUT(SBBr/m64, imm32, "REX.W + 81 /3 id", "Subtract with borrow sign-extended imm32 to 64-bits from r/m64.")
INSTRUCTION_INPUT(SBBr/m16, imm8, "83 /3 ib", "Subtract with borrow sign-extended imm8 from r/m16.")
INSTRUCTION_INPUT(SBBr/m32, imm8, "83 /3 ib", "Subtract with borrow sign-extended imm8 from r/m32.")
INSTRUCTION_INPUT(SBBr/m64, imm8, "REX.W + 83 /3 ib", "Subtract with borrow sign-extended imm8 from r/m64.")
INSTRUCTION_INPUT(SBBr/m8, r8, "18 /r", "Subtract with borrow r8 from r/m8.")
INSTRUCTION_INPUT(SBBr/m8, r8, "REX + 18 /r", "Subtract with borrow r8 from r/m8.")
INSTRUCTION_INPUT(SBBr/m16, r16, "19 /r", "Subtract with borrow r16 from r/m16.")
INSTRUCTION_INPUT(SBBr/m32, r32, "19 /r", "Subtract with borrow r32 from r/m32.")
INSTRUCTION_INPUT(SBBr/m64, r64, "REX.W + 19 /r", "Subtract with borrow r64 from r/m64.")
INSTRUCTION_INPUT(SBBr8, r/m8, "1A /r", "Subtract with borrow r/m8 from r8.")
INSTRUCTION_INPUT(SBBr8, r/m8, "REX + 1A /r", "Subtract with borrow r/m8 from r8.")
INSTRUCTION_INPUT(SBBr16, r/m16, "1B /r", "Subtract with borrow r/m16 from r16.")
INSTRUCTION_INPUT(SBBr32, r/m32, "1B /r", "Subtract with borrow r/m32 from r32.")
INSTRUCTION_INPUT(SBBr64, r/m64, "REX.W + 1B /r", "Subtract with borrow r/m64 from r64.")
INSTRUCTION_INPUT(SETAr/m8, "0F 97", "Set byte if above (CF=0 and ZF=0).")
INSTRUCTION_INPUT(SETAr/m8, "REX + 0F 97", "Set byte if above (CF=0 and ZF=0).")
INSTRUCTION_INPUT(SETAEr/m8, "0F 93", "Set byte if above or equal (CF=0).")
INSTRUCTION_INPUT(SETAEr/m8, "REX + 0F 93", "Set byte if above or equal (CF=0).")
INSTRUCTION_INPUT(SETBr/m8, "0F 92", "Set byte if below (CF=1).")
INSTRUCTION_INPUT(SETBr/m8, "REX + 0F 92", "Set byte if below (CF=1).")
INSTRUCTION_INPUT(SETBEr/m8, "0F 96", "Set byte if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(SETBEr/m8, "REX + 0F 96", "Set byte if below or equal (CF=1 or ZF=1).")
INSTRUCTION_INPUT(SETCr/m8, "0F 92", "Set byte if carry (CF=1).")
INSTRUCTION_INPUT(SETCr/m8, "REX + 0F 92", "Set byte if carry (CF=1).")
INSTRUCTION_INPUT(SETEr/m8, "0F 94", "Set byte if equal (ZF=1).")
INSTRUCTION_INPUT(SETEr/m8, "REX + 0F 94", "Set byte if equal (ZF=1).")
INSTRUCTION_INPUT(SETGr/m8, "0F 9F", "Set byte if greater (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(SETGr/m8, "REX + 0F 9F", "Set byte if greater (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(SETGEr/m8, "0F 9D", "Set byte if greater or equal (SF=OF).")
INSTRUCTION_INPUT(SETGEr/m8, "REX + 0F 9D", "Set byte if greater or equal (SF=OF).")
INSTRUCTION_INPUT(SETLr/m8, "0F 9C", "Set byte if less (SF≠ OF).")
INSTRUCTION_INPUT(SETLr/m8, "REX + 0F 9C", "Set byte if less (SF≠ OF).")
INSTRUCTION_INPUT(SETLEr/m8, "0F 9E", "Set byte if less or equal (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(SETLEr/m8, "REX + 0F 9E", "Set byte if less or equal (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(SETNAr/m8, "0F 96", "Set byte if not above (CF=1 or ZF=1).")
INSTRUCTION_INPUT(SETNAr/m8, "REX + 0F 96", "Set byte if not above (CF=1 or ZF=1).")
INSTRUCTION_INPUT(SETNAEr/m8, "0F 92", "Set byte if not above or equal (CF=1).")
INSTRUCTION_INPUT(SETNAEr/m8, "REX + 0F 92", "Set byte if not above or equal (CF=1).")
INSTRUCTION_INPUT(SETNBr/m8, "0F 93", "Set byte if not below (CF=0).")
INSTRUCTION_INPUT(SETNBr/m8, "REX + 0F 93", "Set byte if not below (CF=0).")
INSTRUCTION_INPUT(SETNBEr/m8, "0F 97", "Set byte if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(SETNBEr/m8, "REX + 0F 97", "Set byte if not below or equal (CF=0 and ZF=0).")
INSTRUCTION_INPUT(SETNCr/m8, "0F 93", "Set byte if not carry (CF=0).")
INSTRUCTION_INPUT(SETNCr/m8, "REX + 0F 93", "Set byte if not carry (CF=0).")
INSTRUCTION_INPUT(SETNEr/m8, "0F 95", "Set byte if not equal (ZF=0).")
INSTRUCTION_INPUT(SETNEr/m8, "REX + 0F 95", "Set byte if not equal (ZF=0).")
INSTRUCTION_INPUT(SETNGr/m8, "0F 9E", "Set byte if not greater (ZF=1 or SF≠ OF)")
INSTRUCTION_INPUT(SETNGr/m8, "REX + 0F 9E", "Set byte if not greater (ZF=1 or SF≠ OF).")
INSTRUCTION_INPUT(SETNGEr/m8, "0F 9C", "Set byte if not greater or equal (SF≠ OF).")
INSTRUCTION_INPUT(SETNGEr/m8, "REX + 0F 9C", "Set byte if not greater or equal (SF≠ OF).")
INSTRUCTION_INPUT(SETNLr/m8, "0F 9D", "Set byte if not less (SF=OF).")
INSTRUCTION_INPUT(SETNLr/m8, "REX + 0F 9D", "Set byte if not less (SF=OF).")
INSTRUCTION_INPUT(SETNLEr/m8, "0F 9F", "Set byte if not less or equal (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(SETNLEr/m8, "REX + 0F 9F", "Set byte if not less or equal (ZF=0 and SF=OF).")
INSTRUCTION_INPUT(SETNOr/m8, "0F 91", "Set byte if not overflow (OF=0).")
INSTRUCTION_INPUT(SETNOr/m8, "REX + 0F 91", "Set byte if not overflow (OF=0).")
INSTRUCTION_INPUT(SETNPr/m8, "0F 9B", "Set byte if not parity (PF=0).")
INSTRUCTION_INPUT(SETNPr/m8, "REX + 0F 9B", "Set byte if not parity (PF=0).")
INSTRUCTION_INPUT(SETNSr/m8, "0F 99", "Set byte if not sign (SF=0).")
INSTRUCTION_INPUT(SETNSr/m8, "REX + 0F 99", "Set byte if not sign (SF=0).")
INSTRUCTION_INPUT(SETNZr/m8, "0F 95", "Set byte if not zero (ZF=0).")
INSTRUCTION_INPUT(SETNZr/m8, "REX + 0F 95", "Set byte if not zero (ZF=0).")
INSTRUCTION_INPUT(SETOr/m8, "0F 90", "Set byte if overflow (OF=1)")
INSTRUCTION_INPUT(SETOr/m8, "REX + 0F 90", "Set byte if overflow (OF=1).")
INSTRUCTION_INPUT(SETPr/m8, "0F 9A", "Set byte if parity (PF=1).")
INSTRUCTION_INPUT(SETPr/m8, "REX + 0F 9A", "Set byte if parity (PF=1).")
INSTRUCTION_INPUT(SETPEr/m8, "0F 9A", "Set byte if parity even (PF=1).")
INSTRUCTION_INPUT(SETPEr/m8, "REX + 0F 9A", "Set byte if parity even (PF=1).")
INSTRUCTION_INPUT(SETPOr/m8, "0F 9B", "Set byte if parity odd (PF=0).")
INSTRUCTION_INPUT(SETPOr/m8, "REX + 0F 9B", "Set byte if parity odd (PF=0).")
INSTRUCTION_INPUT(SETSr/m8, "0F 98", "Set byte if sign (SF=1).")
INSTRUCTION_INPUT(SETSr/m8, "REX + 0F 98", "Set byte if sign (SF=1).")
INSTRUCTION_INPUT(SETZr/m8, "0F 94", "Set byte if zero (ZF=1).")
INSTRUCTION_INPUT(SETZr/m8, "REX + 0F 94", "Set byte if zero (ZF=1).")
INSTRUCTION_INPUT(SFENCE, "0F AE F8", "Serializes store operations.")
INSTRUCTION_INPUT(SGDTm, "0F 01 /0", "Store GDTR to m.")
INSTRUCTION_INPUT(SHA1MSG1xmm1, xmm2/m128, "0F 38 C9 /r", "Performs an intermediate calculation for the next four SHA1 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1.")
INSTRUCTION_INPUT(SHA1MSG2xmm1, xmm2/m128, "0F 38 CA /r", "Performs the final calculation for the next four SHA1 message dwords using intermediate results from xmm1 and the previous message dwords from xmm2/m128, storing the result in xmm1.")
INSTRUCTION_INPUT(SHA1NEXTExmm1, xmm2/m128, "0F 38 C8 /r", "Calculates SHA1 state variable E after four rounds of operation from the current SHA1 state variable A in xmm1. The calculated value of the SHA1 state variable E is added to the scheduled dwords in xmm2/m128, and stored with some of the scheduled dwords in xmm1.")
INSTRUCTION_INPUT(SHA1RNDS4xmm1, xmm2/m128, imm8, "0F 3A CC /r ib", "Performs four rounds of SHA1 operation operating on SHA1 state (A,B,C,D) from xmm1, with a pre-computed sum of the next 4 round message dwords and state variable E from xmm2/m128. The immediate byte controls logic functions and round constants.")
INSTRUCTION_INPUT(SHA256MSG1xmm1, xmm2/m128, "0F 38 CC /r", "Performs an intermediate calculation for the next four SHA256 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1.")
INSTRUCTION_INPUT(SHA256MSG2xmm1, xmm2/m128, "0F 38 CD /r", "Performs the final calculation for the next four SHA256 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1.")
INSTRUCTION_INPUT(SHA256RNDS2xmm1, xmm2/m128, &lt;XMM0&gt;, "0F 38 CB /r", "Perform 2 rounds of SHA256 operation using an initial SHA256 state (C,D,G,H) from xmm1, an initial SHA256 state (A,B,E,F) from xmm2/m128, and a pre-computed sum of the next 2 round mes-sage dwords and the corresponding round constants from the implicit operand XMM0, storing the updated SHA256 state (A,B,E,F) result in xmm1.")
INSTRUCTION_INPUT(SHLDr/m16, r16, imm8, "0F A4 /r ib", "Shift r/m16 to left imm8 places while shifting bits from r16 in from the right.")
INSTRUCTION_INPUT(SHLDr/m16, r16, CL, "0F A5 /r", "Shift r/m16 to left CL places while shifting bits from r16 in from the right.")
INSTRUCTION_INPUT(SHLDr/m32, r32, imm8, "0F A4 /r ib", "Shift r/m32 to left imm8 places while shifting bits from r32 in from the right.")
INSTRUCTION_INPUT(SHLDr/m64, r64, imm8, "REX.W + 0F A4 /r ib", "Shift r/m64 to left imm8 places while shifting bits from r64 in from the right.")
INSTRUCTION_INPUT(SHLDr/m32, r32, CL, "0F A5 /r", "Shift r/m32 to left CL places while shifting bits from r32 in from the right.")
INSTRUCTION_INPUT(SHLDr/m64, r64, CL, "REX.W + 0F A5 /r", "Shift r/m64 to left CL places while shifting bits from r64 in from the right.")
INSTRUCTION_INPUT(SHRDr/m16, r16, imm8, "0F AC /r ib", "Shift r/m16 to right imm8 places while shifting bits from r16 in from the left.")
INSTRUCTION_INPUT(SHRDr/m16, r16, CL, "0F AD /r", "Shift r/m16 to right CL places while shifting bits from r16 in from the left.")
INSTRUCTION_INPUT(SHRDr/m32, r32, imm8, "0F AC /r ib", "Shift r/m32 to right imm8 places while shifting bits from r32 in from the left.")
INSTRUCTION_INPUT(SHRDr/m64, r64, imm8, "REX.W + 0F AC /r ib", "Shift r/m64 to right imm8 places while shifting bits from r64 in from the left.")
INSTRUCTION_INPUT(SHRDr/m32, r32, CL, "0F AD /r", "Shift r/m32 to right CL places while shifting bits from r32 in from the left.")
INSTRUCTION_INPUT(SHRDr/m64, r64, CL, "REX.W + 0F AD /r", "Shift r/m64 to right CL places while shifting bits from r64 in from the left.")
INSTRUCTION_INPUT(SHUFPDxmm1, xmm2/m128, imm8, "66 0F C6 /r ib", "Shuffle two pairs of double-precision floating-point values from xmm1 and xmm2/m128 using imm8 to select from each pair, interleaved result is stored in xmm1.")
INSTRUCTION_INPUT(VSHUFPDxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F.WIG C6 /r ib", "Shuffle two pairs of double-precision floating-point values from xmm2 and xmm3/m128 using imm8 to select from each pair, interleaved result is stored in xmm1.")
INSTRUCTION_INPUT(VSHUFPDymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F.WIG C6 /r ib", "Shuffle four pairs of double-precision floating-point values from ymm2 and ymm3/m256 using imm8 to select from each pair, interleaved result is stored in xmm1.")
INSTRUCTION_INPUT(VSHUFPDxmm1{k1}{z}, xmm2, xmm3/m128/m64bcst, imm8, "EVEX.NDS.128.66.0F.W1 C6 /r ib", "Shuffle two paris of double-precision floating-point values from xmm2 and xmm3/m128/m64bcst using imm8 to select from each pair. store interleaved results in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VSHUFPDymm1{k1}{z}, ymm2, ymm3/m256/m64bcst, imm8, "EVEX.NDS.256.66.0F.W1 C6 /r ib", "Shuffle four paris of double-precision floating-point values from ymm2 and ymm3/m256/m64bcst using imm8 to select from each pair. store interleaved results in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VSHUFPDzmm1{k1}{z}, zmm2, zmm3/m512/m64bcst, imm8, "EVEX.NDS.512.66.0F.W1 C6 /r ib", "Shuffle eight paris of double-precision floating-point values from zmm2 and zmm3/m512/m64bcst using imm8 to select from each pair. store interleaved results in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(SHUFPSxmm1, xmm3/m128, imm8, "0F C6 /r ib", "Select from quadruplet of single-precision floating-point values in xmm1 and xmm2/m128 using imm8, interleaved result pairs are stored in xmm1.")
INSTRUCTION_INPUT(VSHUFPSxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.0F.WIG C6 /r ib", "Select from quadruplet of single-precision floating-point values in xmm1 and xmm2/m128 using imm8, interleaved result pairs are stored in xmm1.")
INSTRUCTION_INPUT(VSHUFPSymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.0F.WIG C6 /r ib", "Select from quadruplet of single-precision floating-point values in ymm2 and ymm3/m256 using imm8, interleaved result pairs are stored in ymm1.")
INSTRUCTION_INPUT(VSHUFPSxmm1{k1}{z}, xmm2, xmm3/m128/m32bcst, imm8, "EVEX.NDS.128.0F.W0 C6 /r ib", "Select from quadruplet of single-precision floating-point values in xmm1 and xmm2/m128 using imm8, interleaved result pairs are stored in xmm1, subject to writemask k1.")
INSTRUCTION_INPUT(VSHUFPSymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8, "EVEX.NDS.256.0F.W0 C6 /r ib", "Select from quadruplet of single-precision floating-point values in ymm2 and ymm3/m256 using imm8, interleaved result pairs are stored in ymm1, subject to writemask k1.")
INSTRUCTION_INPUT(VSHUFPSzmm1{k1}{z}, zmm2, zmm3/m512/m32bcst, imm8, "EVEX.NDS.512.0F.W0 C6 /r ib", "Select from quadruplet of single-precision floating-point values in zmm2 and zmm3/m512 using imm8, interleaved result pairs are stored in zmm1, subject to writemask k1.")
INSTRUCTION_INPUT(SIDTm, "0F 01 /1", "Store IDTR to m.")
INSTRUCTION_INPUT(SLDTr/m16, "0F 00 /0", "Stores segment selector from LDTR in r/m16.")
INSTRUCTION_INPUT(SLDTr64/m16, "REX.W + 0F 00 /0", "Stores segment selector from LDTR in r64/m16.")
INSTRUCTION_INPUT(SMSWr/m16, "0F 01 /4", "Store machine status word to r/m16.")
INSTRUCTION_INPUT(SMSWr32/m16, "0F 01 /4", "Store machine status word in low-order 16 bits of r32/m16; high-order 16 bits of r32 are undefined.")
INSTRUCTION_INPUT(SMSWr64/m16, "REX.W + 0F 01 /4", "Store machine status word in low-order 16 bits of r64/m16; high-order 16 bits of r32 are undefined.")
INSTRUCTION_INPUT(SQRTPDxmm1, xmm2/m128, "66 0F 51 /r", "Computes Square Roots of the packed double-precision floating-point values in xmm2/m128 and stores the result in xmm1.")
INSTRUCTION_INPUT(VSQRTPDxmm1, xmm2/m128, "VEX.128.66.0F.WIG 51 /r", "Computes Square Roots of the packed double-precision floating-point values in xmm2/m128 and stores the result in xmm1.")
INSTRUCTION_INPUT(VSQRTPDymm1, ymm2/m256, "VEX.256.66.0F.WIG 51 /r", "Computes Square Roots of the packed double-precision floating-point values in ymm2/m256 and stores the result in ymm1.")
INSTRUCTION_INPUT(VSQRTPDxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.66.0F.W1 51 /r", "Computes Square Roots of the packed double-precision floating-point values in xmm2/m128/m64bcst and stores the result in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VSQRTPDymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.66.0F.W1 51 /r", "Computes Square Roots of the packed double-precision floating-point values in ymm2/m256/m64bcst and stores the result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VSQRTPDzmm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.66.0F.W1 51 /r", "Computes Square Roots of the packed double-precision floating-point values in zmm2/m512/m64bcst and stores the result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(SQRTPSxmm1, xmm2/m128, "0F 51 /r", "Computes Square Roots of the packed single-precision floating-point values in xmm2/m128 and stores the result in xmm1.")
INSTRUCTION_INPUT(VSQRTPSxmm1, xmm2/m128, "VEX.128.0F.WIG 51 /r", "Computes Square Roots of the packed single-precision floating-point values in xmm2/m128 and stores the result in xmm1.")
INSTRUCTION_INPUT(VSQRTPSymm1, ymm2/m256, "VEX.256.0F.WIG 51/r", "Computes Square Roots of the packed single-precision floating-point values in ymm2/m256 and stores the result in ymm1.")
INSTRUCTION_INPUT(VSQRTPSxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.0F.W0 51 /r", "Computes Square Roots of the packed single-precision floating-point values in xmm2/m128/m32bcst and stores the result in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VSQRTPSymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.0F.W0 51 /r", "Computes Square Roots of the packed single-precision floating-point values in ymm2/m256/m32bcst and stores the result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VSQRTPSzmm1 {k1}{z}, zmm2/m512/m32bcst{er}, "EVEX.512.0F.W0 51/r", "Computes Square Roots of the packed single-precision floating-point values in zmm2/m512/m32bcst and stores the result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(SQRTSDxmm1,xmm2/m64, "F2 0F 51/r", "Computes square root of the low double-precision floating-point value in xmm2/m64 and stores the results in xmm1.")
INSTRUCTION_INPUT(VSQRTSDxmm1,xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 51/r", "Computes square root of the low double-precision floating-point value in xmm3/m64 and stores the results in xmm1. Also, upper double-precision floating-point value (bits[127:64]) from xmm2 is copied to xmm1[127:64].")
INSTRUCTION_INPUT(VSQRTSDxmm1 {k1}{z}, xmm2, xmm3/m64{er}, "EVEX.NDS.LIG.F2.0F.W1 51/r", "Computes square root of the low double-precision floating-point value in xmm3/m64 and stores the results in xmm1 under writemask k1. Also, upper double-precision floating-point value (bits[127:64]) from xmm2 is copied to xmm1[127:64].")
INSTRUCTION_INPUT(SQRTSSxmm1, xmm2/m32, "F3 0F 51 /r", "Computes square root of the low single-precision floating-point value in xmm2/m32 and stores the results in xmm1.")
INSTRUCTION_INPUT(VSQRTSSxmm1, xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 51 /r", "Computes square root of the low single-precision floating-point value in xmm3/m32 and stores the results in xmm1. Also, upper single-precision floating-point values (bits[127:32]) from xmm2 are copied to xmm1[127:32].")
INSTRUCTION_INPUT(VSQRTSSxmm1 {k1}{z}, xmm2, xmm3/m32{er}, "EVEX.NDS.LIG.F3.0F.W0 51 /r", "Computes square root of the low single-precision floating-point value in xmm3/m32 and stores the results in xmm1 under writemask k1. Also, upper single-precision floating-point values (bits[127:32]) from xmm2 are copied to xmm1[127:32].")
INSTRUCTION_INPUT(STAC, "0F 01 CB", "Set the AC flag in the EFLAGS register.")
INSTRUCTION_INPUT(STC, "F9", "Set CF flag.")
INSTRUCTION_INPUT(STD, "FD", "Set DF flag.")
INSTRUCTION_INPUT(STI, "FB", "Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction.")
INSTRUCTION_INPUT(STMXCSRm32, "0F AE /3", "Store contents of MXCSR register to m32.")
INSTRUCTION_INPUT(VSTMXCSRm32, "VEX.LZ.0F.WIG AE /3", "Store contents of MXCSR register to m32.")
INSTRUCTION_INPUT(STRr/m16, "0F 00 /1", "Stores segment selector from TR in r/m16.")
INSTRUCTION_INPUT(SUBAL, imm8, "2C ib", "Subtract imm8 from AL.")
INSTRUCTION_INPUT(SUBAX, imm16, "2D iw", "Subtract imm16 from AX.")
INSTRUCTION_INPUT(SUBEAX, imm32, "2D id", "Subtract imm32 from EAX.")
INSTRUCTION_INPUT(SUBRAX, imm32, "REX.W + 2D id", "Subtract imm32 sign-extended to 64-bits from RAX.")
INSTRUCTION_INPUT(SUBr/m8, imm8, "80 /5 ib", "Subtract imm8 from r/m8.")
INSTRUCTION_INPUT(SUBr/m8, imm8, "REX + 80 /5 ib", "Subtract imm8 from r/m8.")
INSTRUCTION_INPUT(SUBr/m16, imm16, "81 /5 iw", "Subtract imm16 from r/m16.")
INSTRUCTION_INPUT(SUBr/m32, imm32, "81 /5 id", "Subtract imm32 from r/m32.")
INSTRUCTION_INPUT(SUBr/m64, imm32, "REX.W + 81 /5 id", "Subtract imm32 sign-extended to 64-bits from r/m64.")
INSTRUCTION_INPUT(SUBr/m16, imm8, "83 /5 ib", "Subtract sign-extended imm8 from r/m16.")
INSTRUCTION_INPUT(SUBr/m32, imm8, "83 /5 ib", "Subtract sign-extended imm8 from r/m32.")
INSTRUCTION_INPUT(SUBr/m64, imm8, "REX.W + 83 /5 ib", "Subtract sign-extended imm8 from r/m64.")
INSTRUCTION_INPUT(SUBr/m8, r8, "28 /r", "Subtract r8 from r/m8.")
INSTRUCTION_INPUT(SUBr/m8, r8, "REX + 28 /r", "Subtract r8 from r/m8.")
INSTRUCTION_INPUT(SUBr/m16, r16, "29 /r", "Subtract r16 from r/m16.")
INSTRUCTION_INPUT(SUBr/m32, r32, "29 /r", "Subtract r32 from r/m32.")
INSTRUCTION_INPUT(SUBr/m64, r64, "REX.W + 29 /r", "Subtract r64 from r/m64.")
INSTRUCTION_INPUT(SUBr8, r/m8, "2A /r", "Subtract r/m8 from r8.")
INSTRUCTION_INPUT(SUBr8, r/m8, "REX + 2A /r", "Subtract r/m8 from r8.")
INSTRUCTION_INPUT(SUBr16, r/m16, "2B /r", "Subtract r/m16 from r16.")
INSTRUCTION_INPUT(SUBr32, r/m32, "2B /r", "Subtract r/m32 from r32.")
INSTRUCTION_INPUT(SUBr64, r/m64, "REX.W + 2B /r", "Subtract r/m64 from r64.")
INSTRUCTION_INPUT(SUBPDxmm1, xmm2/m128, "66 0F 5C /r", "Subtract packed double-precision floating-point values in xmm2/mem from xmm1 and store result in xmm1.")
INSTRUCTION_INPUT(VSUBPDxmm1,xmm2, xmm3/m128, "VEX.NDS.128.66.0F.WIG 5C /r", "Subtract packed double-precision floating-point values in xmm3/mem from xmm2 and store result in xmm1.")
INSTRUCTION_INPUT(VSUBPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F.WIG 5C /r", "Subtract packed double-precision floating-point values in ymm3/mem from ymm2 and store result in ymm1.")
INSTRUCTION_INPUT(VSUBPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F.W1 5C /r", "Subtract packed double-precision floating-point values from xmm3/m128/m64bcst to xmm2 and store result in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VSUBPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F.W1 5C /r", "Subtract packed double-precision floating-point values from ymm3/m256/m64bcst to ymm2 and store result in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VSUBPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}, "EVEX.NDS.512.66.0F.W1 5C /r", "Subtract packed double-precision floating-point values from zmm3/m512/m64bcst to zmm2 and store result in zmm1 with writemask k1.")
INSTRUCTION_INPUT(SUBPSxmm1, xmm2/m128, "0F 5C /r", "Subtract packed single-precision floating-point values in xmm2/mem from xmm1 and store result in xmm1.")
INSTRUCTION_INPUT(VSUBPSxmm1,xmm2, xmm3/m128, "VEX.NDS.128.0F.WIG 5C /r", "Subtract packed single-precision floating-point values in xmm3/mem from xmm2 and stores result in xmm1.")
INSTRUCTION_INPUT(VSUBPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F.WIG 5C /r", "Subtract packed single-precision floating-point values in ymm3/mem from ymm2 and stores result in ymm1.")
INSTRUCTION_INPUT(VSUBPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 5C /r", "Subtract packed single-precision floating-point values from xmm3/m128/m32bcst to xmm2 and stores result in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VSUBPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 5C /r", "Subtract packed single-precision floating-point values from ymm3/m256/m32bcst to ymm2 and stores result in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VSUBPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}, "EVEX.NDS.512.0F.W0 5C /r", "Subtract packed single-precision floating-point values in zmm3/m512/m32bcst from zmm2 and stores result in zmm1 with writemask k1.")
INSTRUCTION_INPUT(SUBSDxmm1, xmm2/m64, "F2 0F 5C /r", "Subtract the low double-precision floating-point value in xmm2/m64 from xmm1 and store the result in xmm1.")
INSTRUCTION_INPUT(VSUBSDxmm1,xmm2, xmm3/m64, "VEX.NDS.128.F2.0F.WIG 5C /r", "Subtract the low double-precision floating-point value in xmm3/m64 from xmm2 and store the result in xmm1.")
INSTRUCTION_INPUT(VSUBSDxmm1 {k1}{z}, xmm2, xmm3/m64{er}, "EVEX.NDS.LIG.F2.0F.W1 5C /r", "Subtract the low double-precision floating-point value in xmm3/m64 from xmm2 and store the result in xmm1 under writemask k1.")
INSTRUCTION_INPUT(SUBSSxmm1, xmm2/m32, "F3 0F 5C /r", "Subtract the low single-precision floating-point value in xmm2/m32 from xmm1 and store the result in xmm1.")
INSTRUCTION_INPUT(VSUBSSxmm1,xmm2, xmm3/m32, "VEX.NDS.128.F3.0F.WIG 5C /r", "Subtract the low single-precision floating-point value in xmm3/m32 from xmm2 and store the result in xmm1.")
INSTRUCTION_INPUT(VSUBSSxmm1 {k1}{z}, xmm2, xmm3/m32{er}, "EVEX.NDS.LIG.F3.0F.W0 5C /r", "Subtract the low single-precision floating-point value in xmm3/m32 from xmm2 and store the result in xmm1 under writemask k1.")
INSTRUCTION_INPUT(SWAPGS, "0F 01 F8", "Exchanges the current GS base register value with the value contained in MSR address C0000102H.")
INSTRUCTION_INPUT(SYSCALL, "0F 05", "Fast call to privilege level 0 system procedures.")
INSTRUCTION_INPUT(SYSENTER, "0F 34", "Fast call to privilege level 0 system procedures.")
INSTRUCTION_INPUT(SYSEXIT, "0F 35", "Fast return to privilege level 3 user code.")
INSTRUCTION_INPUT(SYSEXIT, "REX.W + 0F 35", "Fast return to 64-bit mode privilege level 3 user code.")
INSTRUCTION_INPUT(SYSRET, "0F 07", "Return to compatibility mode from fast system call")
INSTRUCTION_INPUT(SYSRET, "REX.W + 0F 07", "Return to 64-bit mode from fast system call")
INSTRUCTION_INPUT(TESTAL, imm8, "A8 ib", "AND imm8 with AL; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTAX, imm16, "A9 iw", "AND imm16 with AX; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTEAX, imm32, "A9 id", "AND imm32 with EAX; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTRAX, imm32, "REX.W + A9 id", "AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m8, imm8, "F6 /0 ib", "AND imm8 with r/m8; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m8, imm8, "REX + F6 /0 ib", "AND imm8 with r/m8; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m16, imm16, "F7 /0 iw", "AND imm16 with r/m16; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m32, imm32, "F7 /0 id", "AND imm32 with r/m32; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m64, imm32, "REX.W + F7 /0 id", "AND imm32 sign-extended to 64-bits with r/m64; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m8, r8, "84 /r", "AND r8 with r/m8; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m8, r8, "REX + 84 /r", "AND r8 with r/m8; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m16, r16, "85 /r", "AND r16 with r/m16; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m32, r32, "85 /r", "AND r32 with r/m32; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TESTr/m64, r64, "REX.W + 85 /r", "AND r64 with r/m64; set SF, ZF, PF according to result.")
INSTRUCTION_INPUT(TZCNTr16, r/m16, "F3 0F BC /r", "Count the number of trailing zero bits in r/m16, return result in r16.")
INSTRUCTION_INPUT(TZCNTr32, r/m32, "F3 0F BC /r", "Count the number of trailing zero bits in r/m32, return result in r32.")
INSTRUCTION_INPUT(TZCNTr64, r/m64, "F3 REX.W 0F BC /r", "Count the number of trailing zero bits in r/m64, return result in r64.")
INSTRUCTION_INPUT(UCOMISDxmm1, xmm2/m64, "66 0F 2E /r", "Compare low double-precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VUCOMISDxmm1, xmm2/m64, "VEX.128.66.0F.WIG 2E /r", "Compare low double-precision floating-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VUCOMISDxmm1, xmm2/m64{sae}, "EVEX.LIG.66.0F.W1 2E /r", "Compare low double-precision floating-point values in xmm1 and xmm2/m64 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(UCOMISSxmm1, xmm2/m32, "0F 2E /r", "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VUCOMISSxmm1, xmm2/m32, "VEX.128.0F.WIG 2E /r", "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(VUCOMISSxmm1, xmm2/m32{sae}, "EVEX.LIG.0F.W0 2E /r", "Compare low single-precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.")
INSTRUCTION_INPUT(UD2, "0F 0B", "Raise invalid opcode exception.")
INSTRUCTION_INPUT(UNPCKHPDxmm1, xmm2/m128, "66 0F 15 /r", "Unpacks and Interleaves double-precision floating-point values from high quadwords of xmm1 and xmm2/m128.")
INSTRUCTION_INPUT(VUNPCKHPDxmm1,xmm2, xmm3/m128, "VEX.128.66.0F.WIG 15 /r", "Unpacks and Interleaves double-precision floating-point values from high quadwords of xmm2 and xmm3/m128.")
INSTRUCTION_INPUT(VUNPCKHPDymm1,ymm2, ymm3/m256, "VEX.256.66.0F.WIG 15 /r", "Unpacks and Interleaves double-precision floating-point values from high quadwords of ymm2 and ymm3/m256.")
INSTRUCTION_INPUT(VUNPCKHPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.128.66.0F.W1 15 /r", "Unpacks and Interleaves double precision floating-point values from high quadwords of xmm2 and xmm3/m128/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VUNPCKHPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.256.66.0F.W1 15 /r", "Unpacks and Interleaves double precision floating-point values from high quadwords of ymm2 and ymm3/m256/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VUNPCKHPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.512.66.0F.W1 15 /r", "Unpacks and Interleaves double-precision floating-point values from high quadwords of zmm2 and zmm3/m512/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(UNPCKHPSxmm1, xmm2/m128, "NP 0F 15 /r", "Unpacks and Interleaves single-precision floating-point values from high quadwords of xmm1 and xmm2/m128.")
INSTRUCTION_INPUT(VUNPCKHPSxmm1, xmm2, xmm3/m128, "VEX.128.0F.WIG 15 /r", "Unpacks and Interleaves single-precision floating-point values from high quadwords of xmm2 and xmm3/m128.")
INSTRUCTION_INPUT(VUNPCKHPSymm1, ymm2, ymm3/m256, "VEX.256.0F.WIG 15 /r", "Unpacks and Interleaves single-precision floating-point values from high quadwords of ymm2 and ymm3/m256.")
INSTRUCTION_INPUT(VUNPCKHPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.128.0F.W0 15 /r", "Unpacks and Interleaves single-precision floating-point values from high quadwords of xmm2 and xmm3/m128/m32bcst and write result to xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VUNPCKHPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.256.0F.W0 15 /r", "Unpacks and Interleaves single-precision floating-point values from high quadwords of ymm2 and ymm3/m256/m32bcst and write result to ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VUNPCKHPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.512.0F.W0 15 /r", "Unpacks and Interleaves single-precision floating-point values from high quadwords of zmm2 and zmm3/m512/m32bcst and write result to zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(UNPCKLPDxmm1, xmm2/m128, "66 0F 14 /r", "Unpacks and Interleaves double-precision floating-point values from low quadwords of xmm1 and xmm2/m128.")
INSTRUCTION_INPUT(VUNPCKLPDxmm1,xmm2, xmm3/m128, "VEX.128.66.0F.WIG 14 /r", "Unpacks and Interleaves double-precision floating-point values from low quadwords of xmm2 and xmm3/m128.")
INSTRUCTION_INPUT(VUNPCKLPDymm1,ymm2, ymm3/m256, "VEX.256.66.0F.WIG 14 /r", "Unpacks and Interleaves double-precision floating-point values from low quadwords of ymm2 and ymm3/m256.")
INSTRUCTION_INPUT(VUNPCKLPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.128.66.0F.W1 14 /r", "Unpacks and Interleaves double precision floating-point values from low quadwords of xmm2 and xmm3/m128/m64bcst subject to write mask k1.")
INSTRUCTION_INPUT(VUNPCKLPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.256.66.0F.W1 14 /r", "Unpacks and Interleaves double precision floating-point values from low quadwords of ymm2 and ymm3/m256/m64bcst subject to write mask k1.")
INSTRUCTION_INPUT(VUNPCKLPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.512.66.0F.W1 14 /r", "Unpacks and Interleaves double-precision floating-point values from low quadwords of zmm2 and zmm3/m512/m64bcst subject to write mask k1.")
INSTRUCTION_INPUT(UNPCKLPSxmm1, xmm2/m128, "NP 0F 14 /r", "Unpacks and Interleaves single-precision floating-point values from low quadwords of xmm1 and xmm2/m128.")
INSTRUCTION_INPUT(VUNPCKLPSxmm1,xmm2, xmm3/m128, "VEX.128.0F.WIG 14 /r", "Unpacks and Interleaves single-precision floating-point values from low quadwords of xmm2 and xmm3/m128.")
INSTRUCTION_INPUT(VUNPCKLPSymm1,ymm2,ymm3/m256, "VEX.256.0F.WIG 14 /r", "Unpacks and Interleaves single-precision floating-point values from low quadwords of ymm2 and ymm3/m256.")
INSTRUCTION_INPUT(VUNPCKLPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.128.0F.W0 14 /r", "Unpacks and Interleaves single-precision floating-point values from low quadwords of xmm2 and xmm3/mem and write result to xmm1 subject to write mask k1.")
INSTRUCTION_INPUT(VUNPCKLPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.256.0F.W0 14 /r", "Unpacks and Interleaves single-precision floating-point values from low quadwords of ymm2 and ymm3/mem and write result to ymm1 subject to write mask k1.")
INSTRUCTION_INPUT(VUNPCKLPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.512.0F.W0 14 /r", "Unpacks and Interleaves single-precision floating-point values from low quadwords of zmm2 and zmm3/m512/m32bcst and write result to zmm1 subject to write mask k1.")
INSTRUCTION_INPUT(VBROADCASTSSxmm1, m32, "VEX.128.66.0F38.W0 18 /r", "Broadcast single-precision floating-point element in mem to four locations in xmm1.")
INSTRUCTION_INPUT(VBROADCASTSSymm1, m32, "VEX.256.66.0F38.W0 18 /r", "Broadcast single-precision floating-point element in mem to eight locations in ymm1.")
INSTRUCTION_INPUT(VBROADCASTSDymm1, m64, "VEX.256.66.0F38.W0 19 /r", "Broadcast double-precision floating-point element in mem to four locations in ymm1.")
INSTRUCTION_INPUT(VBROADCASTF128ymm1, m128, "VEX.256.66.0F38.W0 1A /r", "Broadcast 128 bits of floating-point data in mem to low and high 128-bits in ymm1.")
INSTRUCTION_INPUT(VBROADCASTSDymm1 {k1}{z}, xmm2/m64, "EVEX.256.66.0F38.W1 19 /r", "Broadcast low double-precision floating-point element in xmm2/m64 to four locations in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTSDzmm1 {k1}{z}, xmm2/m64, "EVEX.512.66.0F38.W1 19 /r", "Broadcast low double-precision floating-point element in xmm2/m64 to eight locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF32X2ymm1 {k1}{z}, xmm2/m64, "EVEX.256.66.0F38.W0 19 /r", "Broadcast two single-precision floating-point elements in xmm2/m64 to locations in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF32X2zmm1 {k1}{z}, xmm2/m64, "EVEX.512.66.0F38.W0 19 /r", "Broadcast two single-precision floating-point elements in xmm2/m64 to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTSSxmm1 {k1}{z}, xmm2/m32, "EVEX.128.66.0F38.W0 18 /r", "Broadcast low single-precision floating-point element in xmm2/m32 to all locations in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTSSymm1 {k1}{z}, xmm2/m32, "EVEX.256.66.0F38.W0 18 /r", "Broadcast low single-precision floating-point element in xmm2/m32 to all locations in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTSSzmm1 {k1}{z}, xmm2/m32, "EVEX.512.66.0F38.W0 18 /r", "Broadcast low single-precision floating-point element in xmm2/m32 to all locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF32X4ymm1 {k1}{z}, m128, "EVEX.256.66.0F38.W0 1A /r", "Broadcast 128 bits of 4 single-precision floating-point data in mem to locations in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF32X4zmm1 {k1}{z}, m128, "EVEX.512.66.0F38.W0 1A /r", "Broadcast 128 bits of 4 single-precision floating-point data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF64X2ymm1 {k1}{z}, m128, "EVEX.256.66.0F38.W1 1A /r", "Broadcast 128 bits of 2 double-precision floating-point data in mem to locations in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF64X2zmm1 {k1}{z}, m128, "EVEX.512.66.0F38.W1 1A /r", "Broadcast 128 bits of 2 double-precision floating-point data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF32X8zmm1 {k1}{z}, m256, "EVEX.512.66.0F38.W0 1B /r", "Broadcast 256 bits of 8 single-precision floating-point data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTF64X4zmm1 {k1}{z}, m256, "EVEX.512.66.0F38.W1 1B /r", "Broadcast 256 bits of 4 double-precision floating-point data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VCOMPRESSPDxmm1/m128 {k1}{z}, xmm2, "EVEX.128.66.0F38.W1 8A /r", "Compress packed double-precision floating-point values from xmm2 to xmm1/m128 using writemask k1.")
INSTRUCTION_INPUT(VCOMPRESSPDymm1/m256 {k1}{z}, ymm2, "EVEX.256.66.0F38.W1 8A /r", "Compress packed double-precision floating-point values from ymm2 to ymm1/m256 using writemask k1.")
INSTRUCTION_INPUT(VCOMPRESSPDzmm1/m512 {k1}{z}, zmm2, "EVEX.512.66.0F38.W1 8A /r", "Compress packed double-precision floating-point values from zmm2 using control mask k1 to zmm1/m512.")
INSTRUCTION_INPUT(VCOMPRESSPSxmm1/m128 {k1}{z}, xmm2, "EVEX.128.66.0F38.W0 8A /r", "Compress packed single-precision floating-point values from xmm2 to xmm1/m128 using writemask k1.")
INSTRUCTION_INPUT(VCOMPRESSPSymm1/m256 {k1}{z}, ymm2, "EVEX.256.66.0F38.W0 8A /r", "Compress packed single-precision floating-point values from ymm2 to ymm1/m256 using writemask k1.")
INSTRUCTION_INPUT(VCOMPRESSPSzmm1/m512 {k1}{z}, zmm2, "EVEX.512.66.0F38.W0 8A /r", "Compress packed single-precision floating-point values from zmm2 using control mask k1 to zmm1/m512.")
INSTRUCTION_INPUT(VCVTPD2QQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F.W1 7B /r", "Convert two packed double-precision floating-point values from xmm2/m128/m64bcst to two packed quadword integers in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPD2QQymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F.W1 7B /r", "Convert four packed double-precision floating-point values from ymm2/m256/m64bcst to four packed quadword integers in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPD2QQzmm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.66.0F.W1 7B /r", "Convert eight packed double-precision floating-point values from zmm2/m512/m64bcst to eight packed quadword integers in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPD2UDQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.0F.W1 79 /r", "Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two unsigned doubleword integers in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPD2UDQxmm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.0F.W1 79 /r", "Convert four packed double-precision floating-point values in ymm2/m256/m64bcst to four unsigned doubleword integers in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPD2UDQymm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.0F.W1 79 /r", "Convert eight packed double-precision floating-point values in zmm2/m512/m64bcst to eight unsigned doubleword integers in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPD2UQQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F.W1 79 /r", "Convert two packed double-precision floating-point values from xmm2/mem to two packed unsigned quadword integers in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPD2UQQymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F.W1 79 /r", "Convert fourth packed double-precision floating-point values from ymm2/mem to four packed unsigned quadword integers in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPD2UQQzmm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.66.0F.W1 79 /r", "Convert eight packed double-precision floating-point values from zmm2/mem to eight packed unsigned quadword integers in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTPH2PSxmm1, xmm2/m64, "VEX.128.66.0F38.W0 1313 /r", "Convert four packed half precision (16-bit) floating-point values in xmm2/m64 to packed single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTPH2PSymm1, xmm2/m128, "VEX.256.66.0F38.W0 1313 /r", "Convert eight packed half precision (16-bit) floating-point values in xmm2/m128 to packed single-precision floating-point value in ymm1.")
INSTRUCTION_INPUT(VCVTPH2PSxmm1 {k1}{z}, xmm2/m64, "EVEX.128.66.0F38.W0 1313 /r", "Convert four packed half precision (16-bit) floating-point values in xmm2/m64 to packed single-precision floating-point values in xmm1.")
INSTRUCTION_INPUT(VCVTPH2PSymm1 {k1}{z}, xmm2/m128, "EVEX.256.66.0F38.W0 1313 /r", "Convert eight packed half precision (16-bit) floating-point values in xmm2/m128 to packed single-precision floating-point values in ymm1.")
INSTRUCTION_INPUT(VCVTPH2PSzmm1 {k1}{z}, ymm2/m256 {sae}, "EVEX.512.66.0F38.W0 1313 /r", "Convert sixteen packed half precision (16-bit) floating-point values in ymm2/m256 to packed single-precision floating-point values in zmm1.")
INSTRUCTION_INPUT(VCVTPS2PHxmm1/m64, xmm2, imm8, "VEX.128.66.0F3A.W0 1D 1D/r ib", "Convert four packed single-precision floating-point values in xmm2 to packed half-precision (16-bit) floating-point values in xmm1/m64. Imm8 provides rounding controls.")
INSTRUCTION_INPUT(VCVTPS2PHxmm1/m128, ymm2, imm8, "VEX.256.66.0F3A.W0 1D1D /r ib", "Convert eight packed single-precision floating-point values in ymm2 to packed half-precision (16-bit) floating-point values in xmm1/m128. Imm8 provides rounding controls.")
INSTRUCTION_INPUT(VCVTPS2PHxmm1/m64 {k1}{z}, xmm2, imm8, "EVEX.128.66.0F3A.W0 1D1D /r ib", "Convert four packed single-precision floating-point values in xmm2 to packed half-precision (16-bit) floating-point values in xmm1/m64. Imm8 provides rounding controls.")
INSTRUCTION_INPUT(VCVTPS2PHxmm1/m128 {k1}{z}, ymm2, imm8, "EVEX.256.66.0F3A.W0 1D1D /r ib", "Convert eight packed single-precision floating-point values in ymm2 to packed half-precision (16-bit) floating-point values in xmm1/m128. Imm8 provides rounding controls.")
INSTRUCTION_INPUT(VCVTPS2PHymm1/m256 {k1}{z}, zmm2{sae}, imm8, "EVEX.512.66.0F3A.W0 1D1D /r ib", "Convert sixteen packed single-precision floating-point values in zmm2 to packed half-precision (16-bit) floating-point values in ymm1/m256. Imm8 provides rounding controls.")
INSTRUCTION_INPUT(VCVTPS2QQxmm1 {k1}{z}, xmm2/m64/m32bcst, "EVEX.128.66.0F.W0 7B /r", "Convert two packed single precision floating-point values from xmm2/m64/m32bcst to two packed signed quadword values in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2QQymm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.256.66.0F.W0 7B /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed signed quadword values in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2QQzmm1 {k1}{z}, ymm2/m256/m32bcst{er}, "EVEX.512.66.0F.W0 7B /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed signed quadword values in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2UDQxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.0F.W0 79 /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed unsigned doubleword values in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2UDQymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.0F.W0 79 /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed unsigned doubleword values in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2UDQzmm1 {k1}{z}, zmm2/m512/m32bcst{er}, "EVEX.512.0F.W0 79 /r", "Convert sixteen packed single-precision floating-point values from zmm2/m512/m32bcst to sixteen packed unsigned doubleword values in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2UQQxmm1 {k1}{z}, xmm2/m64/m32bcst, "EVEX.128.66.0F.W0 79 /r", "Convert two packed single precision floating-point values from zmm2/m64/m32bcst to two packed unsigned quadword values in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2UQQymm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.256.66.0F.W0 79 /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed unsigned quadword values in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTPS2UQQzmm1 {k1}{z}, ymm2/m256/m32bcst{er}, "EVEX.512.66.0F.W0 79 /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed unsigned quadword values in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VCVTQQ2PDxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.F3.0F.W1 E6 /r", "Convert two packed quadword integers from xmm2/m128/m64bcst to packed double-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTQQ2PDymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.F3.0F.W1 E6 /r", "Convert four packed quadword integers from ymm2/m256/m64bcst to packed double-precision floating-point values in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTQQ2PDzmm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.F3.0F.W1 E6 /r", "Convert eight packed quadword integers from zmm2/m512/m64bcst to eight packed double-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTQQ2PSxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.0F.W1 5B /r", "Convert two packed quadword integers from xmm2/mem to packed single-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTQQ2PSxmm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.0F.W1 5B /r", "Convert four packed quadword integers from ymm2/mem to packed single-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTQQ2PSymm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.0F.W1 5B /r", "Convert eight packed quadword integers from zmm2/mem to eight packed single-precision floating-point values in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTSD2USIr32, xmm1/m64{er}, "EVEX.LIG.F2.0F.W0 79 /r", "Convert one double-precision floating-point value from xmm1/m64 to one unsigned doubleword integer r32.")
INSTRUCTION_INPUT(VCVTSD2USIr64, xmm1/m64{er}, "EVEX.LIG.F2.0F.W1 79 /r", "Convert one double-precision floating-point value from xmm1/m64 to one unsigned quadword integer zero-extended into r64.")
INSTRUCTION_INPUT(VCVTSS2USIr32, xmm1/m32{er}, "EVEX.LIG.F3.0F.W0 79 /r", "Convert one single-precision floating-point value from xmm1/m32 to one unsigned doubleword integer in r32.")
INSTRUCTION_INPUT(VCVTSS2USIr64, xmm1/m32{er}, "EVEX.LIG.F3.0F.W1 79 /r", "Convert one single-precision floating-point value from xmm1/m32 to one unsigned quadword integer in r64.")
INSTRUCTION_INPUT(VCVTTPD2QQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F.W1 7A /r", "Convert two packed double-precision floating-point values from zmm2/m128/m64bcst to two packed quadword integers in zmm1 using truncation with writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2QQymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F.W1 7A /r", "Convert four packed double-precision floating-point values from ymm2/m256/m64bcst to four packed quadword integers in ymm1 using truncation with writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2QQzmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, "EVEX.512.66.0F.W1 7A /r", "Convert eight packed double-precision floating-point values from zmm2/m512 to eight packed quadword integers in zmm1 using truncation with writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2UDQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.0F.W1 78 /r", "Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two unsigned doubleword integers in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2UDQxmm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.0F.W1 78 02 /r", "Convert four packed double-precision floating-point values in ymm2/m256/m64bcst to four unsigned doubleword integers in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2UDQymm1 {k1}{z}, zmm2/m512/m64bcst{sae}, "EVEX.512.0F.W1 78 /r", "Convert eight packed double-precision floating-point values in zmm2/m512/m64bcst to eight unsigned doubleword integers in ymm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2UQQxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F.W1 78 /r", "Convert two packed double-precision floating-point values from xmm2/m128/m64bcst to two packed unsigned quadword integers in xmm1 using truncation with writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2UQQymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F.W1 78 /r", "Convert four packed double-precision floating-point values from ymm2/m256/m64bcst to four packed unsigned quadword integers in ymm1 using truncation with writemask k1.")
INSTRUCTION_INPUT(VCVTTPD2UQQzmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, "EVEX.512.66.0F.W1 78 /r", "Convert eight packed double-precision floating-point values from zmm2/mem to eight packed unsigned quadword integers in zmm1 using truncation with writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2QQxmm1 {k1}{z}, xmm2/m64/m32bcst, "EVEX.128.66.0F.W0 7A /r", "Convert two packed single precision floating-point values from xmm2/m64/m32bcst to two packed signed quadword values in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2QQymm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.256.66.0F.W0 7A /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed signed quadword values in ymm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2QQzmm1 {k1}{z}, ymm2/m256/m32bcst{sae}, "EVEX.512.66.0F.W0 7A /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed signed quadword values in zmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2UDQxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.0F.W0 78 /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed unsigned doubleword values in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2UDQymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.0F.W0 78 /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed unsigned doubleword values in ymm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2UDQzmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, "EVEX.512.0F.W0 78 /r", "Convert sixteen packed single-precision floating-point values from zmm2/m512/m32bcst to sixteen packed unsigned doubleword values in zmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2UQQxmm1 {k1}{z}, xmm2/m64/m32bcst, "EVEX.128.66.0F.W0 78 /r", "Convert two packed single precision floating-point values from xmm2/m64/m32bcst to two packed unsigned quadword values in xmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2UQQymm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.256.66.0F.W0 78 /r", "Convert four packed single precision floating-point values from xmm2/m128/m32bcst to four packed unsigned quadword values in ymm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTPS2UQQzmm1 {k1}{z}, ymm2/m256/m32bcst{sae}, "EVEX.512.66.0F.W0 78 /r", "Convert eight packed single precision floating-point values from ymm2/m256/m32bcst to eight packed unsigned quadword values in zmm1 using truncation subject to writemask k1.")
INSTRUCTION_INPUT(VCVTTSD2USIr32, xmm1/m64{sae}, "EVEX.LIG.F2.0F.W0 78 /r", "Convert one double-precision floating-point value from xmm1/m64 to one unsigned doubleword integer r32 using truncation.")
INSTRUCTION_INPUT(VCVTTSD2USIr64, xmm1/m64{sae}, "EVEX.LIG.F2.0F.W1 78 /r", "Convert one double-precision floating-point value from xmm1/m64 to one unsigned quadword integer zero-extended into r64 using truncation.")
INSTRUCTION_INPUT(VCVTTSS2USIr32, xmm1/m32{sae}, "EVEX.LIG.F3.0F.W0 78 /r", "Convert one single-precision floating-point value from xmm1/m32 to one unsigned doubleword integer in r32 using truncation.")
INSTRUCTION_INPUT(VCVTTSS2USIr64, xmm1/m32{sae}, "EVEX.LIG.F3.0F.W1 78 /r", "Convert one single-precision floating-point value from xmm1/m32 to one unsigned quadword integer in r64 using truncation.")
INSTRUCTION_INPUT(VCVTUDQ2PDxmm1 {k1}{z}, xmm2/m64/m32bcst, "EVEX.128.F3.0F.W0 7A /r", "Convert two packed unsigned doubleword integers from ymm2/m64/m32bcst to packed double-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUDQ2PDymm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.256.F3.0F.W0 7A /r", "Convert four packed unsigned doubleword integers from xmm2/m128/m32bcst to packed double-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUDQ2PDzmm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.512.F3.0F.W0 7A /r", "Convert eight packed unsigned doubleword integers from ymm2/m256/m32bcst to eight packed double-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUDQ2PSxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.F2.0F.W0 7A /r", "Convert four packed unsigned doubleword integers from xmm2/m128/m32bcst to packed single-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUDQ2PSymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.F2.0F.W0 7A /r", "Convert eight packed unsigned doubleword integers from ymm2/m256/m32bcst to packed single-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUDQ2PSzmm1 {k1}{z}, zmm2/m512/m32bcst{er}, "EVEX.512.F2.0F.W0 7A /r", "Convert sixteen packed unsigned doubleword integers from zmm2/m512/m32bcst to sixteen packed single-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUQQ2PDxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.F3.0F.W1 7A /r", "Convert two packed unsigned quadword integers from xmm2/m128/m64bcst to two packed double-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUQQ2PDymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.F3.0F.W1 7A /r", "Convert four packed unsigned quadword integers from ymm2/m256/m64bcst to packed double-precision floating-point values in ymm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUQQ2PDzmm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.F3.0F.W1 7A /r", "Convert eight packed unsigned quadword integers from zmm2/m512/m64bcst to eight packed double-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUQQ2PSxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.F2.0F.W1 7A /r", "Convert two packed unsigned quadword integers from xmm2/m128/m64bcst to packed single-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUQQ2PSxmm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.F2.0F.W1 7A /r", "Convert four packed unsigned quadword integers from ymm2/m256/m64bcst to packed single-precision floating-point values in xmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUQQ2PSymm1 {k1}{z}, zmm2/m512/m64bcst{er}, "EVEX.512.F2.0F.W1 7A /r", "Convert eight packed unsigned quadword integers from zmm2/m512/m64bcst to eight packed single-precision floating-point values in zmm1 with writemask k1.")
INSTRUCTION_INPUT(VCVTUSI2SDxmm1, xmm2, r/m32, "EVEX.NDS.LIG.F2.0F.W0 7B /r", "Convert one unsigned doubleword integer from r/m32 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTUSI2SDxmm1, xmm2, r/m64{er}, "EVEX.NDS.LIG.F2.0F.W1 7B /r", "Convert one unsigned quadword integer from r/m64 to one double-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTUSI2SSxmm1, xmm2, r/m32{er}, "EVEX.NDS.LIG.F3.0F.W0 7B /r", "Convert one signed doubleword integer from r/m32 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VCVTUSI2SSxmm1, xmm2, r/m64{er}, "EVEX.NDS.LIG.F3.0F.W1 7B /r", "Convert one signed quadword integer from r/m64 to one single-precision floating-point value in xmm1.")
INSTRUCTION_INPUT(VDBPSADBWxmm1 {k1}{z}, xmm2, xmm3/m128, imm8, "EVEX.NDS.128.66.0F3A.W0 42 /r ib", "Compute packed SAD word results of unsigned bytes in dword block from xmm2 with unsigned bytes of dword blocks transformed from xmm3/m128 using the shuffle controls in imm8. Results are written to xmm1 under the writemask k1.")
INSTRUCTION_INPUT(VDBPSADBWymm1 {k1}{z}, ymm2, ymm3/m256, imm8, "EVEX.NDS.256.66.0F3A.W0 42 /r ib", "Compute packed SAD word results of unsigned bytes in dword block from ymm2 with unsigned bytes of dword blocks transformed from ymm3/m256 using the shuffle controls in imm8. Results are written to ymm1 under the writemask k1.")
INSTRUCTION_INPUT(VDBPSADBWzmm1 {k1}{z}, zmm2, zmm3/m512, imm8, "EVEX.NDS.512.66.0F3A.W0 42 /r ib", "Compute packed SAD word results of unsigned bytes in dword block from zmm2 with unsigned bytes of dword blocks transformed from zmm3/m512 using the shuffle controls in imm8. Results are written to zmm1 under the writemask k1.")
INSTRUCTION_INPUT(VEXP2PDzmm1 {k1}{z}, zmm2/m512/m64bcst {sae}, "EVEX.512.66.0F38.W1 C8 /r", "Computes approximations to the exponential 2^x (with less than 2^-23 of maximum relative error) of the packed double-precision floating-point values from zmm2/m512/m64bcst and stores the floating-point result in zmm1with writemask k1.")
INSTRUCTION_INPUT(VEXP2PSzmm1 {k1}{z}, zmm2/m512/m32bcst {sae}, "EVEX.512.66.0F38.W0 C8 /r", "Computes approximations to the exponential 2^x (with less than 2^-23 of maximum relative error) of the packed single-precision floating-point values from zmm2/m512/m32bcst and stores the floating-point result in zmm1with writemask k1.")
INSTRUCTION_INPUT(VEXPANDPDxmm1 {k1}{z}, xmm2/m128, "EVEX.128.66.0F38.W1 88 /r", "Expand packed double-precision floating-point values from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VEXPANDPDymm1 {k1}{z}, ymm2/m256, "EVEX.256.66.0F38.W1 88 /r", "Expand packed double-precision floating-point values from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VEXPANDPDzmm1 {k1}{z}, zmm2/m512, "EVEX.512.66.0F38.W1 88 /r", "Expand packed double-precision floating-point values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VEXPANDPSxmm1 {k1}{z}, xmm2/m128, "EVEX.128.66.0F38.W0 88 /r", "Expand packed single-precision floating-point values from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VEXPANDPSymm1 {k1}{z}, ymm2/m256, "EVEX.256.66.0F38.W0 88 /r", "Expand packed single-precision floating-point values from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VEXPANDPSzmm1 {k1}{z}, zmm2/m512, "EVEX.512.66.0F38.W0 88 /r", "Expand packed single-precision floating-point values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VFIXUPIMMPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8, "EVEX.NDS.128.66.0F3A.W1 54 /r ib", "Fix up special numbers in float64 vector xmm1, float64 vector xmm2 and int64 vector xmm3/m128/m64bcst and store the result in xmm1, under writemask.")
INSTRUCTION_INPUT(VFIXUPIMMPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8, "EVEX.NDS.256.66.0F3A.W1 54 /r ib", "Fix up special numbers in float64 vector ymm1, float64 vector ymm2 and int64 vector ymm3/m256/m64bcst and store the result in ymm1, under writemask.")
INSTRUCTION_INPUT(VFIXUPIMMPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8, "EVEX.NDS.512.66.0F3A.W1 54 /r ib", "Fix up elements of float64 vector in zmm2 using int64 vector table in zmm3/m512/m64bcst, combine with preserved elements from zmm1, and store the result in zmm1.")
INSTRUCTION_INPUT(VFIXUPIMMPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8, "EVEX.NDS.128.66.0F3A.W0 54 /r", "Fix up special numbers in float32 vector xmm1, float32 vector xmm2 and int32 vector xmm3/m128/m32bcst and store the result in xmm1, under writemask.")
INSTRUCTION_INPUT(VFIXUPIMMPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8, "EVEX.NDS.256.66.0F3A.W0 54 /r", "Fix up special numbers in float32 vector ymm1, float32 vector ymm2 and int32 vector ymm3/m256/m32bcst and store the result in ymm1, under writemask.")
INSTRUCTION_INPUT(VFIXUPIMMPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8, "EVEX.NDS.512.66.0F3A.W0 54 /r ib", "Fix up elements of float32 vector in zmm2 using int32 vector table in zmm3/m512/m32bcst, combine with preserved elements from zmm1, and store the result in zmm1.")
INSTRUCTION_INPUT(VFIXUPIMMSDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W1 55 /r ib", "Fix up a float64 number in the low quadword element of xmm2 using scalar int32 table in xmm3/m64 and store the result in xmm1.")
INSTRUCTION_INPUT(VFIXUPIMMSSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W0 55 /r ib", "Fix up a float32 number in the low doubleword element in xmm2 using scalar int32 table in xmm3/m32 and store the result in xmm1.")
INSTRUCTION_INPUT(VFPCLASSPDk2 {k1}, xmm2/m128/m64bcst, imm8, "EVEX.128.66.0F3A.W1 66 /r ib", "
 NaN, +0, -0,
+Infinity, -Infinity, denormal, finite negative.  The immediate field provides a mask bit for each of these category tests.  The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VFPCLASSPDk2 {k1}, ymm2/m256/m64bcst, imm8, "EVEX.256.66.0F3A.W1 66 /r ib", "
 NaN, +0, -0,
+Infinity, -Infinity, denormal, finite negative.  The immediate field provides a mask bit for each of these category tests.  The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VFPCLASSPDk2 {k1}, zmm2/m512/m64bcst, imm8, "EVEX.512.66.0F3A.W1 66 /r ib", "
 NaN, +0, -0,
+Infinity, -Infinity, denormal, finite negative.  The immediate field provides a mask bit for each of these category tests.  The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VFPCLASSPSk2 {k1}, xmm2/m128/m32bcst, imm8, "EVEX.128.66.0F3A.W0 66 /r ib", "Tests the input for the following categories:  NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative.  The immediate field provides a mask bit for each of these category tests.  The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VFPCLASSPSk2 {k1}, ymm2/m256/m32bcst, imm8, "EVEX.256.66.0F3A.W0 66 /r ib", "Tests the input for the following categories:  NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative.  The immediate field provides a mask bit for each of these category tests.  The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VFPCLASSPSk2 {k1}, zmm2/m512/m32bcst, imm8, "EVEX.512.66.0F3A.W0 66 /r ib", "Tests the input for the following categories:  NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative.  The immediate field provides a mask bit for each of these category tests.  The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VFPCLASSSDk2 {k1}, xmm2/m64, imm8, "EVEX.LIG.66.0F3A.W1 67 /r ib", "Tests the input for the following categories: NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative. The immediate field provides a mask bit for each of these category tests. The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VFPCLASSSSk2 {k1}, xmm2/m32, imm8, "EVEX.LIG.66.0F3A.W0 67 /r", "Tests the input for the following categories: NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative. The immediate field provides a mask bit for each of these category tests. The masked test results are OR-ed together to form a mask result.")
INSTRUCTION_INPUT(VGETEXPPDxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F38.W1 42 /r", "Convert the exponent of packed double-precision floating-point values in the source operand to DP FP results representing unbiased integer exponents and stores the results in the destination register.")
INSTRUCTION_INPUT(VGETEXPPDymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F38.W1 42 /r", "Convert the exponent of packed double-precision floating-point values in the source operand to DP FP results representing unbiased integer exponents and stores the results in the destination register.")
INSTRUCTION_INPUT(VGETEXPPDzmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, "EVEX.512.66.0F38.W1 42 /r", "Convert the exponent of packed double-precision floating-point values in the source operand to DP FP results representing unbiased integer exponents and stores the results in the destination under writemask k1.")
INSTRUCTION_INPUT(VGETEXPPSxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.66.0F38.W0 42 /r", "Convert the exponent of packed single-precision floating-point values in the source operand to SP FP results representing unbiased integer exponents and stores the results in the destination register.")
INSTRUCTION_INPUT(VGETEXPPSymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.66.0F38.W0 42 /r", "Convert the exponent of packed single-precision floating-point values in the source operand to SP FP results representing unbiased integer exponents and stores the results in the destination register.")
INSTRUCTION_INPUT(VGETEXPPSzmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, "EVEX.512.66.0F38.W0 42 /r", "Convert the exponent of packed single-precision floating-point values in the source operand to SP FP results representing unbiased integer exponents and stores the results in the destination register.")
INSTRUCTION_INPUT(VGETEXPSDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, "EVEX.NDS.LIG.66.0F38.W1 43 /r", "Convert the biased exponent (bits 62:52) of the low double-precision floating-point value in xmm3/m64 to a DP FP value representing unbiased integer exponent. Stores the result to the low 64-bit of xmm1 under the writemask k1 and merge with the other elements of xmm2.")
INSTRUCTION_INPUT(VGETEXPSSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, "EVEX.NDS.LIG.66.0F38.W0 43 /r", "Convert the biased exponent (bits 30:23) of the low single-precision floating-point value in xmm3/m32 to a SP FP value representing unbiased integer exponent. Stores the result to xmm1 under the writemask k1 and merge with the other elements of xmm2.")
INSTRUCTION_INPUT(VGETMANTPDxmm1 {k1}{z}, xmm2/m128/m64bcst, imm8, "EVEX.128.66.0F3A.W1 26 /r ib", "Get Normalized Mantissa from float64 vector xmm2/m128/m64bcst and store the result in xmm1, using imm8 for sign control and mantissa interval normalization, under writemask.")
INSTRUCTION_INPUT(VGETMANTPDymm1 {k1}{z}, ymm2/m256/m64bcst, imm8, "EVEX.256.66.0F3A.W1 26 /r ib", "Get Normalized Mantissa from float64 vector ymm2/m256/m64bcst and store the result in ymm1, using imm8 for sign control and mantissa interval normalization, under writemask.")
INSTRUCTION_INPUT(VGETMANTPDzmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8, "EVEX.512.66.0F3A.W1 26 /r ib", "Get Normalized Mantissa from float64 vector zmm2/m512/m64bcst and store the result in zmm1, using imm8 for sign control and mantissa interval normalization, under writemask.")
INSTRUCTION_INPUT(VGETMANTPSxmm1 {k1}{z}, xmm2/m128/m32bcst, imm8, "EVEX.128.66.0F3A.W0 26 /r ib", "Get normalized mantissa from float32 vector xmm2/m128/m32bcst and store the result in xmm1, using imm8 for sign control and mantissa interval normalization, under writemask.")
INSTRUCTION_INPUT(VGETMANTPSymm1 {k1}{z}, ymm2/m256/m32bcst, imm8, "EVEX.256.66.0F3A.W0 26 /r ib", "Get normalized mantissa from float32 vector ymm2/m256/m32bcst and store the result in ymm1, using imm8 for sign control and mantissa interval normalization, under writemask.")
INSTRUCTION_INPUT(VGETMANTPSzmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8, "EVEX.512.66.0F3A.W0 26 /r ib", "Get normalized mantissa from float32 vector zmm2/m512/m32bcst and store the result in zmm1, using imm8 for sign control and mantissa interval normalization, under writemask.")
INSTRUCTION_INPUT(VGETMANTSDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W1 27 /r ib", "Extract the normalized mantissa of the low float64 element in xmm3/m64 using imm8 for sign control and mantissa interval normalization. Store the mantissa to xmm1 under the writemask k1 and merge with the other elements of xmm2.")
INSTRUCTION_INPUT(VGETMANTSSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W0 27 /r ib", "Extract the normalized mantissa from the low float32 element of xmm3/m32 using imm8 for sign control and mantissa interval normalization, store the mantissa to xmm1 under the writemask k1 and merge with the other elements of xmm2.")
INSTRUCTION_INPUT(VMASKMOVPSxmm1, xmm2, m128, "VEX.NDS.128.66.0F38.W0 2C /r", "Conditionally load packed single-precision values from m128 using mask in xmm2 and store in xmm1.")
INSTRUCTION_INPUT(VMASKMOVPSymm1, ymm2, m256, "VEX.NDS.256.66.0F38.W0 2C /r", "Conditionally load packed single-precision values from m256 using mask in ymm2 and store in ymm1.")
INSTRUCTION_INPUT(VMASKMOVPDxmm1, xmm2, m128, "VEX.NDS.128.66.0F38.W0 2D /r", "Conditionally load packed double-precision values from m128 using mask in xmm2 and store in xmm1.")
INSTRUCTION_INPUT(VMASKMOVPDymm1, ymm2, m256, "VEX.NDS.256.66.0F38.W0 2D /r", "Conditionally load packed double-precision values from m256 using mask in ymm2 and store in ymm1.")
INSTRUCTION_INPUT(VMASKMOVPSm128, xmm1, xmm2, "VEX.NDS.128.66.0F38.W0 2E /r", "Conditionally store packed single-precision values from xmm2 using mask in xmm1.")
INSTRUCTION_INPUT(VMASKMOVPSm256, ymm1, ymm2, "VEX.NDS.256.66.0F38.W0 2E /r", "Conditionally store packed single-precision values from ymm2 using mask in ymm1.")
INSTRUCTION_INPUT(VMASKMOVPDm128, xmm1, xmm2, "VEX.NDS.128.66.0F38.W0 2F /r", "Conditionally store packed double-precision values from xmm2 using mask in xmm1.")
INSTRUCTION_INPUT(VMASKMOVPDm256, ymm1, ymm2, "VEX.NDS.256.66.0F38.W0 2F /r", "Conditionally store packed double-precision values from ymm2 using mask in ymm1.")
INSTRUCTION_INPUT(VPBLENDDxmm1, xmm2, xmm3/m128, imm8, "VEX.NDS.128.66.0F3A.W0 02 /r ib", "Select dwords from xmm2 and xmm3/m128 from mask specified in imm8 and store the values into xmm1.")
INSTRUCTION_INPUT(VPBLENDDymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.W0 02 /r ib", "Select dwords from ymm2 and ymm3/m256 from mask specified in imm8 and store the values into ymm1.")
INSTRUCTION_INPUT(VPBROADCASTBxmm1, xmm2/m8, "VEX.128.66.0F38.W0 78 /r", "Broadcast a byte integer in the source operand to sixteen locations in xmm1.")
INSTRUCTION_INPUT(VPBROADCASTBymm1, xmm2/m8, "VEX.256.66.0F38.W0 78 /r", "Broadcast a byte integer in the source operand to thirty-two locations in ymm1.")
INSTRUCTION_INPUT(VPBROADCASTBxmm1{k1}{z}, xmm2/m8, "EVEX.128.66.0F38.W0 78 /r", "Broadcast a byte integer in the source operand to locations in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTBymm1{k1}{z}, xmm2/m8, "EVEX.256.66.0F38.W0 78 /r", "Broadcast a byte integer in the source operand to locations in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTBzmm1{k1}{z}, xmm2/m8, "EVEX.512.66.0F38.W0 78 /r", "Broadcast a byte integer in the source operand to 64 locations in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTWxmm1, xmm2/m16, "VEX.128.66.0F38.W0 79 /r", "Broadcast a word integer in the source operand to eight locations in xmm1.")
INSTRUCTION_INPUT(VPBROADCASTWymm1, xmm2/m16, "VEX.256.66.0F38.W0 79 /r", "Broadcast a word integer in the source operand to sixteen locations in ymm1.")
INSTRUCTION_INPUT(VPBROADCASTWxmm1{k1}{z}, xmm2/m16, "EVEX.128.66.0F38.W0 79 /r", "Broadcast a word integer in the source operand to locations in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTWymm1{k1}{z}, xmm2/m16, "EVEX.256.66.0F38.W0 79 /r", "Broadcast a word integer in the source operand to locations in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTWzmm1{k1}{z}, xmm2/m16, "EVEX.512.66.0F38.W0 79 /r", "Broadcast a word integer in the source operand to 32 locations in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTDxmm1, xmm2/m32, "VEX.128.66.0F38.W0 58 /r", "Broadcast a dword integer in the source operand to four locations in xmm1.")
INSTRUCTION_INPUT(VPBROADCASTDymm1, xmm2/m32, "VEX.256.66.0F38.W0 58 /r", "Broadcast a dword integer in the source operand to eight locations in ymm1.")
INSTRUCTION_INPUT(VPBROADCASTDxmm1 {k1}{z}, xmm2/m32, "EVEX.128.66.0F38.W0 58 /r", "Broadcast a dword integer in the source operand to locations in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTDymm1 {k1}{z}, xmm2/m32, "EVEX.256.66.0F38.W0 58 /r", "Broadcast a dword integer in the source operand to locations in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTDzmm1 {k1}{z}, xmm2/m32, "EVEX.512.66.0F38.W0 58 /r", "Broadcast a dword integer in the source operand to locations in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTQxmm1, xmm2/m64, "VEX.128.66.0F38.W0 59 /r", "Broadcast a qword element in source operand to two locations in xmm1.")
INSTRUCTION_INPUT(VPBROADCASTQymm1, xmm2/m64, "VEX.256.66.0F38.W0 59 /r", "Broadcast a qword element in source operand to four locations in ymm1.")
INSTRUCTION_INPUT(VPBROADCASTQxmm1 {k1}{z}, xmm2/m64, "EVEX.128.66.0F38.W1 59 /r", "Broadcast a qword element in source operand to locations in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTQymm1 {k1}{z}, xmm2/m64, "EVEX.256.66.0F38.W1 59 /r", "Broadcast a qword element in source operand to locations in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTQzmm1 {k1}{z}, xmm2/m64, "EVEX.512.66.0F38.W1 59 /r", "Broadcast a qword element in source operand to locations in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI32x2xmm1 {k1}{z}, xmm2/m64, "EVEX.128.66.0F38.W0 59 /r", "Broadcast two dword elements in source operand to locations in xmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI32x2ymm1 {k1}{z}, xmm2/m64, "EVEX.256.66.0F38.W0 59 /r", "Broadcast two dword elements in source operand to locations in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI32x2zmm1 {k1}{z}, xmm2/m64, "EVEX.512.66.0F38.W0 59 /r", "Broadcast two dword elements in source operand to locations in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI128ymm1, m128, "VEX.256.66.0F38.W0 5A /r", "Broadcast 128 bits of integer data in mem to low and high 128-bits in ymm1.")
INSTRUCTION_INPUT(VBROADCASTI32X4ymm1 {k1}{z}, m128, "EVEX.256.66.0F38.W0 5A /r", "Broadcast 128 bits of 4 doubleword integer data in mem to locations in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI32X4zmm1 {k1}{z}, m128, "EVEX.512.66.0F38.W0 5A /r", "Broadcast 128 bits of 4 doubleword integer data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI64X2ymm1 {k1}{z}, m128, "EVEX.256.66.0F38.W1 5A /r", "Broadcast 128 bits of 2 quadword integer data in mem to locations in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI64X2zmm1 {k1}{z}, m128, "EVEX.512.66.0F38.W1 5A /r", "Broadcast 128 bits of 2 quadword integer data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI32X8zmm1 {k1}{z}, m256, "EVEX.512.66.0F38.W0 5B /r", "Broadcast 256 bits of 8 doubleword integer data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VBROADCASTI64X4zmm1 {k1}{z}, m256, "EVEX.512.66.0F38.W1 5B /r", "Broadcast 256 bits of 4 quadword integer data in mem to locations in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPBROADCASTMB2Qxmm1, k1, "EVEX.128.F3.0F38.W1 2A /r", "Broadcast low byte value in k1 to two locations in xmm1.")
INSTRUCTION_INPUT(VPBROADCASTMB2Qymm1, k1, "EVEX.256.F3.0F38.W1 2A /r", "Broadcast low byte value in k1 to four locations in ymm1.")
INSTRUCTION_INPUT(VPBROADCASTMB2Qzmm1, k1, "EVEX.512.F3.0F38.W1 2A /r", "Broadcast low byte value in k1 to eight locations in zmm1.")
INSTRUCTION_INPUT(VPBROADCASTMW2Dxmm1, k1, "EVEX.128.F3.0F38.W0 3A /r", "Broadcast low word value in k1 to four locations in xmm1.")
INSTRUCTION_INPUT(VPBROADCASTMW2Dymm1, k1, "EVEX.256.F3.0F38.W0 3A /r", "Broadcast low word value in k1 to eight locations in ymm1.")
INSTRUCTION_INPUT(VPBROADCASTMW2Dzmm1, k1, "EVEX.512.F3.0F38.W0 3A /r", "Broadcast low word value in k1 to sixteen locations in zmm1.")
INSTRUCTION_INPUT(VPCOMPRESSDxmm1/m128 {k1}{z}, xmm2, "EVEX.128.66.0F38.W0 8B /r", "Compress packed doubleword integer values from xmm2 to xmm1/m128 using controlmask k1.")
INSTRUCTION_INPUT(VPCOMPRESSDymm1/m256 {k1}{z}, ymm2, "EVEX.256.66.0F38.W0 8B /r", "Compress packed doubleword integer values from ymm2 to ymm1/m256 using controlmask k1.")
INSTRUCTION_INPUT(VPCOMPRESSDzmm1/m512 {k1}{z}, zmm2, "EVEX.512.66.0F38.W0 8B /r", "Compress packed doubleword integer values from zmm2 to zmm1/m512 using controlmask k1.")
INSTRUCTION_INPUT(VPCOMPRESSQxmm1/m128 {k1}{z}, xmm2, "EVEX.128.66.0F38.W1 8B /r", "Compress packed quadword integer values from xmm2 to xmm1/m128 using controlmask k1.")
INSTRUCTION_INPUT(VPCOMPRESSQymm1/m256 {k1}{z}, ymm2, "EVEX.256.66.0F38.W1 8B /r", "Compress packed quadword integer values from ymm2 to ymm1/m256 using controlmask k1.")
INSTRUCTION_INPUT(VPCOMPRESSQzmm1/m512 {k1}{z}, zmm2, "EVEX.512.66.0F38.W1 8B /r", "Compress packed quadword integer values from zmm2 to zmm1/m512 using controlmask k1.")
INSTRUCTION_INPUT(VPERM2F128ymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.W0 06 /r ib", "Permute 128-bit floating-point fields in ymm2 and ymm3/mem using controls from imm8 and store result in ymm1.")
INSTRUCTION_INPUT(VPERM2I128ymm1, ymm2, ymm3/m256, imm8, "VEX.NDS.256.66.0F3A.W0 46 /r ib", "Permute 128-bit integer data in ymm2 and ymm3/mem using controls from imm8 and store result in ymm1.")
INSTRUCTION_INPUT(VPERMILPDxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.W0 0D /r", "Permute double-precision floating-point values in xmm2 using controls from xmm3/m128 and store result in xmm1.")
INSTRUCTION_INPUT(VPERMILPDymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.W0 0D /r", "Permute double-precision floating-point values in ymm2 using controls from ymm3/m256 and store result in ymm1.")
INSTRUCTION_INPUT(VPERMILPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F38.W1 0D /r", "Permute double-precision floating-point values in xmm2 using control from xmm3/m128/m64bcst and store the result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F38.W1 0D /r", "Permute double-precision floating-point values in ymm2 using control from ymm3/m256/m64bcst and store the result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F38.W1 0D /r", "Permute double-precision floating-point values in zmm2 using control from zmm3/m512/m64bcst and store the result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPDxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.W0 05 /r ib", "Permute double-precision floating-point values in xmm2/m128 using controls from imm8.")
INSTRUCTION_INPUT(VPERMILPDymm1, ymm2/m256, imm8, "VEX.256.66.0F3A.W0 05 /r ib", "Permute double-precision floating-point values in ymm2/m256 using controls from imm8.")
INSTRUCTION_INPUT(VPERMILPDxmm1 {k1}{z}, xmm2/m128/m64bcst, imm8, "EVEX.128.66.0F3A.W1 05 /r ib", "Permute double-precision floating-point values in xmm2/m128/m64bcst using controls from imm8 and store the result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPDymm1 {k1}{z}, ymm2/m256/m64bcst, imm8, "EVEX.256.66.0F3A.W1 05 /r ib", "Permute double-precision floating-point values in ymm2/m256/m64bcst using controls from imm8 and store the result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPDzmm1 {k1}{z}, zmm2/m512/m64bcst, imm8, "EVEX.512.66.0F3A.W1 05 /r ib", "Permute double-precision floating-point values in zmm2/m512/m64bcst using controls from imm8 and store the result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPSxmm1, xmm2, xmm3/m128, "VEX.NDS.128.66.0F38.W0 0C /r", "Permute single-precision floating-point values in xmm2 using controls from xmm3/m128 and store result in xmm1.")
INSTRUCTION_INPUT(VPERMILPSxmm1, xmm2/m128, imm8, "VEX.128.66.0F3A.W0 04 /r ib", "Permute single-precision floating-point values in xmm2/m128 using controls from imm8 and store result in xmm1.")
INSTRUCTION_INPUT(VPERMILPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.66.0F38.W0 0C /r", "Permute single-precision floating-point values in ymm2 using controls from ymm3/m256 and store result in ymm1.")
INSTRUCTION_INPUT(VPERMILPSymm1, ymm2/m256, imm8, "VEX.256.66.0F3A.W0 04 /r ib", "Permute single-precision floating-point values in ymm2/m256 using controls from imm8 and store result in ymm1.")
INSTRUCTION_INPUT(VPERMILPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.66.0F38.W0 0C /r", "Permute single-precision floating-point values xmm2 using control from xmm3/m128/m32bcst and store the result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F38.W0 0C /r", "Permute single-precision floating-point values ymm2 using control from ymm3/m256/m32bcst and store the result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.66.0F38.W0 0C /r", "Permute single-precision floating-point values zmm2 using control from zmm3/m512/m32bcst and store the result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPSxmm1 {k1}{z}, xmm2/m128/m32bcst, imm8, "EVEX.128.66.0F3A.W0 04 /r ib", "Permute single-precision floating-point values xmm2/m128/m32bcst using controls from imm8 and store the result in xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPSymm1 {k1}{z}, ymm2/m256/m32bcst, imm8, "EVEX.256.66.0F3A.W0 04 /r ib", "Permute single-precision floating-point values ymm2/m256/m32bcst using controls from imm8 and store the result in ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMILPSzmm1 {k1}{z}, zmm2/m512/m32bcst, imm8, "EVEX.512.66.0F3A.W0 04 /r ib", "Permute single-precision floating-point values zmm2/m512/m32bcst using controls from imm8 and store the result in zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPERMPDymm1, ymm2/m256, imm8, "VEX.256.66.0F3A.W1 01 /r ib", "Permute double-precision floating-point elements in ymm2/m256 using indices in imm8 and store the result in ymm1.")
INSTRUCTION_INPUT(VPERMPDymm1 {k1}{z}, ymm2/m256/m64bcst, imm8, "EVEX.256.66.0F3A.W1 01 /r ib", "Permute double-precision floating-point elements in ymm2/m256/m64bcst using indexes in imm8 and store the result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPERMPDzmm1 {k1}{z}, zmm2/m512/m64bcst, imm8, "EVEX.512.66.0F3A.W1 01 /r ib", "Permute double-precision floating-point elements in zmm2/m512/m64bcst using indices in imm8 and store the result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPERMPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F38.W1 16 /r", "Permute double-precision floating-point elements in ymm3/m256/m64bcst using indexes in ymm2 and store the result in ymm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPERMPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F38.W1 16 /r", "Permute double-precision floating-point elements in zmm3/m512/m64bcst using indices in zmm2 and store the result in zmm1 subject to writemask k1.")
INSTRUCTION_INPUT(VPERMPSymm1, ymm2, ymm3/m256, "VEX.256.66.0F38.W0 16 /r", "Permute single-precision floating-point elements in ymm3/m256 using indices in ymm2 and store the result in ymm1.")
INSTRUCTION_INPUT(VPERMPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F38.W0 16 /r", "Permute single-precision floating-point elements in ymm3/m256/m32bcst using indexes in ymm2 and store the result in ymm1 subject to write mask k1.")
INSTRUCTION_INPUT(VPERMPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.66.0F38.W0 16 /r", "Permute single-precision floating-point values in zmm3/m512/m32bcst using indices in zmm2 and store the result in zmm1 subject to write mask k1.")
INSTRUCTION_INPUT(VPERMQymm1, ymm2/m256, imm8, "VEX.256.66.0F3A.W1 00 /r ib", "Permute qwords in ymm2/m256 using indices in imm8 and store the result in ymm1.")
INSTRUCTION_INPUT(VPERMQymm1 {k1}{z}, ymm2/m256/m64bcst, imm8, "EVEX.256.66.0F3A.W1 00 /r ib", "Permute qwords in ymm2/m256/m64bcst using indexes in imm8 and store the result in ymm1.")
INSTRUCTION_INPUT(VPERMQzmm1 {k1}{z}, zmm2/m512/m64bcst, imm8, "EVEX.512.66.0F3A.W1 00 /r ib", "Permute qwords in zmm2/m512/m64bcst using indices in imm8 and store the result in zmm1.")
INSTRUCTION_INPUT(VPERMQymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F38.W1 36 /r", "Permute qwords in ymm3/m256/m64bcst using indexes in ymm2 and store the result in ymm1.")
INSTRUCTION_INPUT(VPERMQzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.NDS.512.66.0F38.W1 36 /r", "Permute qwords in zmm3/m512/m64bcst using indices in zmm2 and store the result in zmm1.")
INSTRUCTION_INPUT(VPEXPANDDxmm1 {k1}{z}, xmm2/m128, "EVEX.128.66.0F38.W0 89 /r", "Expand packed double-word integer values from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPEXPANDDymm1 {k1}{z}, ymm2/m256, "EVEX.256.66.0F38.W0 89 /r", "Expand packed double-word integer values from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPEXPANDDzmm1 {k1}{z}, zmm2/m512, "EVEX.512.66.0F38.W0 89 /r", "Expand packed double-word integer values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPEXPANDQxmm1 {k1}{z}, xmm2/m128, "EVEX.128.66.0F38.W1 89 /r", "Expand packed quad-word integer values from xmm2/m128 to xmm1 using writemask k1.")
INSTRUCTION_INPUT(VPEXPANDQymm1 {k1}{z}, ymm2/m256, "EVEX.256.66.0F38.W1 89 /r", "Expand packed quad-word integer values from ymm2/m256 to ymm1 using writemask k1.")
INSTRUCTION_INPUT(VPEXPANDQzmm1 {k1}{z}, zmm2/m512, "EVEX.512.66.0F38.W1 89 /r", "Expand packed quad-word integer values from zmm2/m512 to zmm1 using writemask k1.")
INSTRUCTION_INPUT(VPMASKMOVDxmm1, xmm2, m128, "VEX.NDS.128.66.0F38.W0 8C /r", "Conditionally load dword values from m128 using mask in xmm2 and store in xmm1.")
INSTRUCTION_INPUT(VPMASKMOVDymm1, ymm2, m256, "VEX.NDS.256.66.0F38.W0 8C /r", "Conditionally load dword values from m256 using mask in ymm2 and store in ymm1.")
INSTRUCTION_INPUT(VPMASKMOVQxmm1, xmm2, m128, "VEX.NDS.128.66.0F38.W1 8C /r", "Conditionally load qword values from m128 using mask in xmm2 and store in xmm1.")
INSTRUCTION_INPUT(VPMASKMOVQymm1, ymm2, m256, "VEX.NDS.256.66.0F38.W1 8C /r", "Conditionally load qword values from m256 using mask in ymm2 and store in ymm1.")
INSTRUCTION_INPUT(VPMASKMOVDm128, xmm1, xmm2, "VEX.NDS.128.66.0F38.W0 8E /r", "Conditionally store dword values from xmm2 using mask in xmm1.")
INSTRUCTION_INPUT(VPMASKMOVDm256, ymm1, ymm2, "VEX.NDS.256.66.0F38.W0 8E /r", "Conditionally store dword values from ymm2 using mask in ymm1.")
INSTRUCTION_INPUT(VPMASKMOVQm128, xmm1, xmm2, "VEX.NDS.128.66.0F38.W1 8E /r", "Conditionally store qword values from xmm2 using mask in xmm1.")
INSTRUCTION_INPUT(VPMASKMOVQm256, ymm1, ymm2, "VEX.NDS.256.66.0F38.W1 8E /r", "Conditionally store qword values from ymm2 using mask in ymm1.")
INSTRUCTION_INPUT(VRANGEPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8, "EVEX.NDS.128.66.0F3A.W1 50 /r ib", "Calculate two RANGE operation output value from 2 pairs of double-precision floating-point values in xmm2 and xmm3/m128/m32bcst, store the results to xmm1 under the writemask k1. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRANGEPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8, "EVEX.NDS.256.66.0F3A.W1 50 /r ib", "Calculate four RANGE operation output value from 4pairs of double-precision floating-point values in ymm2 and ymm3/m256/m32bcst, store the results to ymm1 under the writemask k1. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRANGEPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8, "EVEX.NDS.512.66.0F3A.W1 50 /r ib", "Calculate eight RANGE operation output value from 8 pairs of double-precision floating-point values in zmm2 and zmm3/m512/m32bcst, store the results to zmm1 under the writemask k1. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRANGEPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8, "EVEX.NDS.128.66.0F3A.W0 50 /r ib", "Calculate four RANGE operation output value from 4 pairs of single-precision floating-point values in xmm2 and xmm3/m128/m32bcst, store the results to xmm1 under the writemask k1. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRANGEPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8, "EVEX.NDS.256.66.0F3A.W0 50 /r ib", "Calculate eight RANGE operation output value from 8 pairs of single-precision floating-point values in ymm2 and ymm3/m256/m32bcst, store the results to ymm1 under the writemask k1. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRANGEPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8, "EVEX.NDS.512.66.0F3A.W0 50 /r ib", "Calculate 16 RANGE operation output value from 16 pairs of single-precision floating-point values in zmm2 and zmm3/m512/m32bcst, store the results to zmm1 under the writemask k1. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRANGESDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W1 51 /r", "Calculate a RANGE operation output value from 2 double-precision floating-point values in xmm2 and xmm3/m64, store the output to xmm1 under writemask. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRANGESSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W0 51 /r", "Calculate a RANGE operation output value from 2 single-precision floating-point values in xmm2 and xmm3/m32, store the output to xmm1 under writemask. Imm8 specifies the comparison and sign of the range operation.")
INSTRUCTION_INPUT(VRCP14PDxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F38.W1 4C /r", "Computes the approximate reciprocals of the packed double-precision floating-point values in xmm2/m128/m64bcst and stores the results in xmm1. Under writemask.")
INSTRUCTION_INPUT(VRCP14PDymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F38.W1 4C /r", "Computes the approximate reciprocals of the packed double-precision floating-point values in ymm2/m256/m64bcst and stores the results in ymm1. Under writemask.")
INSTRUCTION_INPUT(VRCP14PDzmm1 {k1}{z}, zmm2/m512/m64bcst, "EVEX.512.66.0F38.W1 4C /r", "Computes the approximate reciprocals of the packed double-precision floating-point values in zmm2/m512/m64bcst and stores the results in zmm1. Under writemask.")
INSTRUCTION_INPUT(VRCP14PSxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.66.0F38.W0 4C /r", "Computes the approximate reciprocals of the packed single-precision floating-point values in xmm2/m128/m32bcst and stores the results in xmm1. Under writemask.")
INSTRUCTION_INPUT(VRCP14PSymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.66.0F38.W0 4C /r", "Computes the approximate reciprocals of the packed single-precision floating-point values in ymm2/m256/m32bcst and stores the results in ymm1. Under writemask.")
INSTRUCTION_INPUT(VRCP14PSzmm1 {k1}{z}, zmm2/m512/m32bcst, "EVEX.512.66.0F38.W0 4C /r", "Computes the approximate reciprocals of the packed single-precision floating-point values in zmm2/m512/m32bcst and stores the results in zmm1. Under writemask.")
INSTRUCTION_INPUT(VRCP14SDxmm1 {k1}{z}, xmm2, xmm3/m64, "EVEX.NDS.LIG.66.0F38.W1 4D /r", "Computes the approximate reciprocal of the scalar double-precision floating-point value in xmm3/m64 and stores the result in xmm1 using writemask k1. Also, upper double-precision floating-point value (bits[127:64]) from xmm2 is copied to xmm1[127:64].")
INSTRUCTION_INPUT(VRCP14SSxmm1 {k1}{z}, xmm2, xmm3/m32, "EVEX.NDS.LIG.66.0F38.W0 4D /r", "Computes the approximate reciprocal of the scalar single-precision floating-point value in xmm3/m32 and stores the results in xmm1 using writemask k1. Also, upper double-precision floating-point value (bits[127:32]) from xmm2 is copied to xmm1[127:32].")
INSTRUCTION_INPUT(VRCP28PDzmm1 {k1}{z}, zmm2/m512/m64bcst {sae}, "EVEX.512.66.0F38.W1 CA /r", "Computes the approximate reciprocals ( &lt; 2^-28 relative error) of the packed double-precision floating-point values in zmm2/m512/m64bcst and stores the results in zmm1. Under writemask.")
INSTRUCTION_INPUT(VRCP28PSzmm1 {k1}{z}, zmm2/m512/m32bcst {sae}, "EVEX.512.66.0F38.W0 CA /r", "Computes the approximate reciprocals ( &lt; 2^-28 relative error) of the packed single-precision floating-point values in zmm2/m512/m32bcst and stores the results in zmm1. Under writemask.")
INSTRUCTION_INPUT(VRCP28SDxmm1 {k1}{z}, xmm2, xmm3/m64 {sae}, "EVEX.NDS.LIG.66.0F38.W1 CB /r", "Computes the approximate reciprocal ( &lt; 2^-28 relative error) of the scalar double-precision floating-point value in xmm3/m64 and stores the results in xmm1. Under writemask. Also, upper double-precision floating-point value (bits[127:64]) from xmm2 is copied to xmm1[127:64].")
INSTRUCTION_INPUT(VRCP28SSxmm1 {k1}{z}, xmm2, xmm3/m32 {sae}, "EVEX.NDS.LIG.66.0F38.W0 CB /r", "Computes the approximate reciprocal ( &lt; 2^-28 relative error) of the scalar single-precision floating-point value in xmm3/m32 and stores the results in xmm1. Under writemask. Also, upper 3 single-precision floating-point values (bits[127:32]) from xmm2 is copied to xmm1[127:32].")
INSTRUCTION_INPUT(VREDUCEPDxmm1 {k1}{z}, xmm2/m128/m64bcst, imm8, "EVEX.128.66.0F3A.W1 56 /r ib", "Perform reduction transformation on packed double-precision floating point values in xmm2/m128/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register under writemask k1.")
INSTRUCTION_INPUT(VREDUCEPDymm1 {k1}{z}, ymm2/m256/m64bcst, imm8, "EVEX.256.66.0F3A.W1 56 /r ib", "Perform reduction transformation on packed double-precision floating point values in ymm2/m256/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in ymm1 register under writemask k1.")
INSTRUCTION_INPUT(VREDUCEPDzmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8, "EVEX.512.66.0F3A.W1 56 /r ib", "Perform reduction transformation on double-precision floating point values in zmm2/m512/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in zmm1 register under writemask k1.")
INSTRUCTION_INPUT(VREDUCEPSxmm1 {k1}{z}, xmm2/m128/m32bcst, imm8, "EVEX.128.66.0F3A.W0 56 /r ib", "Perform reduction transformation on packed single-precision floating point values in xmm2/m128/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register under writemask k1.")
INSTRUCTION_INPUT(VREDUCEPSymm1 {k1}{z}, ymm2/m256/m32bcst, imm8, "EVEX.256.66.0F3A.W0 56 /r ib", "Perform reduction transformation on packed single-precision floating point values in ymm2/m256/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in ymm1 register under writemask k1.")
INSTRUCTION_INPUT(VREDUCEPSzmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8, "EVEX.512.66.0F3A.W0 56 /r ib", "Perform reduction transformation on packed single-precision floating point values in zmm2/m512/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in zmm1 register under writemask k1.")
INSTRUCTION_INPUT(VREDUCESDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W1 57 /r", "Perform a reduction transformation on a scalar double-precision floating point value in xmm3/m64 by subtracting a number of fraction bits specified by the imm8 field. Also, upper double precision floating-point value (bits[127:64]) from xmm2 are copied to xmm1[127:64]. Stores the result in xmm1 register.")
INSTRUCTION_INPUT(VREDUCESSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W0 57 /r /ib", "Perform a reduction transformation on a scalar single-precision floating point value in xmm3/m32 by subtracting a number of fraction bits specified by the imm8 field. Also, upper single precision floating-point values (bits[127:32]) from xmm2 are copied to xmm1[127:32]. Stores the result in xmm1 register.")
INSTRUCTION_INPUT(VRNDSCALEPDxmm1 {k1}{z}, xmm2/m128/m64bcst, imm8, "EVEX.128.66.0F3A.W1 09 /r ib", "Rounds packed double-precision floating point values in xmm2/m128/m64bcst to a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register. Under writemask.")
INSTRUCTION_INPUT(VRNDSCALEPDymm1 {k1}{z}, ymm2/m256/m64bcst, imm8, "EVEX.256.66.0F3A.W1 09 /r ib", "Rounds packed double-precision floating point values in ymm2/m256/m64bcst to a number of fraction bits specified by the imm8 field. Stores the result in ymm1 register. Under writemask.")
INSTRUCTION_INPUT(VRNDSCALEPDzmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8, "EVEX.512.66.0F3A.W1 09 /r ib", "Rounds packed double-precision floating-point values in zmm2/m512/m64bcst to a number of fraction bits specified by the imm8 field. Stores the result in zmm1 register using writemask k1.")
INSTRUCTION_INPUT(VRNDSCALEPSxmm1 {k1}{z}, xmm2/m128/m32bcst, imm8, "EVEX.128.66.0F3A.W0 08 /r ib", "Rounds packed single-precision floating point values in xmm2/m128/m32bcst to a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register. Under writemask.")
INSTRUCTION_INPUT(VRNDSCALEPSymm1 {k1}{z}, ymm2/m256/m32bcst, imm8, "EVEX.256.66.0F3A.W0 08 /r ib", "Rounds packed single-precision floating point values in ymm2/m256/m32bcst to a number of fraction bits specified by the imm8 field. Stores the result in ymm1 register. Under writemask.")
INSTRUCTION_INPUT(VRNDSCALEPSzmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8, "EVEX.512.66.0F3A.W0 08 /r ib", "Rounds packed single-precision floating-point values in zmm2/m512/m32bcst to a number of fraction bits specified by the imm8 field. Stores the result in zmm1 register using writemask.")
INSTRUCTION_INPUT(VRNDSCALESDxmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W1 0B /r ib", "Rounds scalar double-precision floating-point value in xmm3/m64 to a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register.")
INSTRUCTION_INPUT(VRNDSCALESSxmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8, "EVEX.NDS.LIG.66.0F3A.W0 0A /r ib", "Rounds scalar single-precision floating-point value in xmm3/m32 to a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register under writemask.")
INSTRUCTION_INPUT(VRSQRT14PDxmm1 {k1}{z}, xmm2/m128/m64bcst, "EVEX.128.66.0F38.W1 4E /r", "Computes the approximate reciprocal square roots of the packed double-precision floating-point values in xmm2/m128/m64bcst and stores the results in xmm1. Under writemask.")
INSTRUCTION_INPUT(VRSQRT14PDymm1 {k1}{z}, ymm2/m256/m64bcst, "EVEX.256.66.0F38.W1 4E /r", "Computes the approximate reciprocal square roots of the packed double-precision floating-point values in ymm2/m256/m64bcst and stores the results in ymm1. Under writemask.")
INSTRUCTION_INPUT(VRSQRT14PDzmm1 {k1}{z}, zmm2/m512/m64bcst, "EVEX.512.66.0F38.W1 4E /r", "Computes the approximate reciprocal square roots of the packed double-precision floating-point values in zmm2/m512/m64bcst and stores the results in zmm1 under writemask.")
INSTRUCTION_INPUT(VRSQRT14PSxmm1 {k1}{z}, xmm2/m128/m32bcst, "EVEX.128.66.0F38.W0 4E /r", "Computes the approximate reciprocal square roots of the packed single-precision floating-point values in xmm2/m128/m32bcst and stores the results in xmm1. Under writemask.")
INSTRUCTION_INPUT(VRSQRT14PSymm1 {k1}{z}, ymm2/m256/m32bcst, "EVEX.256.66.0F38.W0 4E /r", "Computes the approximate reciprocal square roots of the packed single-precision floating-point values in ymm2/m256/m32bcst and stores the results in ymm1. Under writemask.")
INSTRUCTION_INPUT(VRSQRT14PSzmm1 {k1}{z}, zmm2/m512/m32bcst, "EVEX.512.66.0F38.W0 4E /r", "Computes the approximate reciprocal square roots of the packed single-precision floating-point values in zmm2/m512/m32bcst and stores the results in zmm1. Under writemask.")
INSTRUCTION_INPUT(VRSQRT14SDxmm1 {k1}{z}, xmm2, xmm3/m64, "EVEX.NDS.LIG.66.0F38.W1 4F /r", "Computes the approximate reciprocal square root of the scalar double-precision floating-point value in xmm3/m64 and stores the result in the low quadword element of xmm1 using writemask k1. Bits[127:64] of xmm2 is copied to xmm1[127:64].")
INSTRUCTION_INPUT(VRSQRT14SSxmm1 {k1}{z}, xmm2, xmm3/m32, "EVEX.NDS.LIG.66.0F38.W0 4F /r", "Computes the approximate reciprocal square root of the scalar single-precision floating-point value in xmm3/m32 and stores the result in the low doubleword element of xmm1 using writemask k1. Bits[127:32] of xmm2 is copied to xmm1[127:32].")
INSTRUCTION_INPUT(VRSQRT28PDzmm1 {k1}{z}, zmm2/m512/m64bcst {sae}, "EVEX.512.66.0F38.W1 CC /r", "Computes approximations to the Reciprocal square root (&lt;2^-28 relative error) of the packed double-precision floating-point values from zmm2/m512/m64bcst and stores result in zmm1with writemask k1.")
INSTRUCTION_INPUT(VRSQRT28PSzmm1 {k1}{z}, zmm2/m512/m32bcst {sae}, "EVEX.512.66.0F38.W0 CC /r", "Computes approximations to the Reciprocal square root (&lt;2^-28 relative error) of the packed single-precision floating-point values from zmm2/m512/m32bcst and stores result in zmm1with writemask k1.")
INSTRUCTION_INPUT(VRSQRT28SDxmm1 {k1}{z}, xmm2, xmm3/m64 {sae}, "EVEX.NDS.LIG.66.0F38.W1 CD /r", "Computes approximate reciprocal square root (&lt;2^-28 relative error) of the scalar double-precision floating-point value from xmm3/m64 and stores result in xmm1with writemask k1. Also, upper double-precision floating-point value (bits[127:64]) from xmm2 is copied to xmm1[127:64].")
INSTRUCTION_INPUT(VRSQRT28SSxmm1 {k1}{z}, xmm2, xmm3/m32 {sae}, "EVEX.NDS.LIG.66.0F38.W0 CD /r", "Computes approximate reciprocal square root (&lt;2^-28 relative error) of the scalar single-precision floating-point value from xmm3/m32 and stores result in xmm1with writemask k1. Also, upper 3 single-precision floating-point value (bits[127:32]) from xmm2 is copied to xmm1[127:32].")
INSTRUCTION_INPUT(VSCALEFPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.NDS.128.66.0F38.W1 2C /r", "Scale the packed double-precision floating-point values in xmm2 using values from xmm3/m128/m64bcst. Under writemask k1.")
INSTRUCTION_INPUT(VSCALEFPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.NDS.256.66.0F38.W1 2C /r", "Scale the packed double-precision floating-point values in ymm2 using values from ymm3/m256/m64bcst. Under writemask k1.")
INSTRUCTION_INPUT(VSCALEFPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}, "EVEX.NDS.512.66.0F38.W1 2C /r", "Scale the packed double-precision floating-point values in zmm2 using values from zmm3/m512/m64bcst. Under writemask k1.")
INSTRUCTION_INPUT(VSCALEFPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.66.0F38.W0 2C /r", "Scale the packed single-precision floating-point values in xmm2 using values from xmm3/m128/m32bcst. Under writemask k1.")
INSTRUCTION_INPUT(VSCALEFPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.66.0F38.W0 2C /r", "Scale the packed single-precision values in ymm2 using floating point values from ymm3/m256/m32bcst. Under writemask k1.")
INSTRUCTION_INPUT(VSCALEFPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}, "EVEX.NDS.512.66.0F38.W0 2C /r", "Scale the packed single-precision floating-point values in zmm2 using floating-point values from zmm3/m512/m32bcst. Under writemask k1.")
INSTRUCTION_INPUT(VSCALEFSDxmm1 {k1}{z}, xmm2, xmm3/m64{er}, "EVEX.NDS.LIG.66.0F38.W1 2D /r", "Scale the scalar double-precision floating-point values in xmm2 using the value from xmm3/m64. Under writemask k1.")
INSTRUCTION_INPUT(VSCALEFSSxmm1 {k1}{z}, xmm2, xmm3/m32{er}, "EVEX.NDS.LIG.66.0F38.W0 2D /r", "Scale the scalar single-precision floating-point value in xmm2 using floating-point value from xmm3/m32. Under writemask k1.")
INSTRUCTION_INPUT(VZEROALL, "VEX.256.0F.WIG 77", "Zero all YMM registers.")
INSTRUCTION_INPUT(VZEROUPPER, "VEX.128.0F.WIG 77", "Zero upper 128 bits of all YMM registers.")
INSTRUCTION_INPUT(WBINVD, "0F 09", "Write back and flush Internal caches; initiate writing-back and flushing of external caches.")
INSTRUCTION_INPUT(WRMSR, "0F 30", "Write the value in EDX:EAX to MSR specified by ECX.")
INSTRUCTION_INPUT(WRPKRU, "0F 01 EF", "Writes EAX into PKRU.")
INSTRUCTION_INPUT(XABORTimm8, "C6 F8 ib", "Causes an RTM abort if in RTM execution")
INSTRUCTION_INPUT(XADDr/m8, r8, "0F C0 /r", "Exchange r8 and r/m8; load sum into r/m8.")
INSTRUCTION_INPUT(XADDr/m8, r8, "REX + 0F C0 /r", "Exchange r8 and r/m8; load sum into r/m8.")
INSTRUCTION_INPUT(XADDr/m16, r16, "0F C1 /r", "Exchange r16 and r/m16; load sum into r/m16.")
INSTRUCTION_INPUT(XADDr/m32, r32, "0F C1 /r", "Exchange r32 and r/m32; load sum into r/m32.")
INSTRUCTION_INPUT(XADDr/m64, r64, "REX.W + 0F C1 /r", "Exchange r64 and r/m64; load sum into r/m64.")
INSTRUCTION_INPUT(XBEGINrel16, "C7 F8", "Specifies the start of an RTM region. Provides a 16-bit relative offset to compute the address of the fallback instruction address at which execution resumes following an RTM abort.")
INSTRUCTION_INPUT(XBEGINrel32, "C7 F8", "Specifies the start of an RTM region. Provides a 32-bit relative offset to compute the address of the fallback instruction address at which execution resumes following an RTM abort.")
INSTRUCTION_INPUT(XCHGAX, r16, "90+rw", "Exchange r16 with AX.")
INSTRUCTION_INPUT(XCHGr16, AX, "90+rw", "Exchange AX with r16.")
INSTRUCTION_INPUT(XCHGEAX, r32, "90+rd", "Exchange r32 with EAX.")
INSTRUCTION_INPUT(XCHGRAX, r64, "REX.W + 90+rd", "Exchange r64 with RAX.")
INSTRUCTION_INPUT(XCHGr32, EAX, "90+rd", "Exchange EAX with r32.")
INSTRUCTION_INPUT(XCHGr64, RAX, "REX.W + 90+rd", "Exchange RAX with r64.")
INSTRUCTION_INPUT(XCHGr/m8, r8, "86 /r", "Exchange r8 (byte register) with byte from r/m8.")
INSTRUCTION_INPUT(XCHGr/m8, r8, "REX + 86 /r", "Exchange r8 (byte register) with byte from r/m8.")
INSTRUCTION_INPUT(XCHGr8, r/m8, "86 /r", "Exchange byte from r/m8 with r8 (byte register).")
INSTRUCTION_INPUT(XCHGr8, r/m8, "REX + 86 /r", "Exchange byte from r/m8 with r8 (byte register).")
INSTRUCTION_INPUT(XCHGr/m16, r16, "87 /r", "Exchange r16 with word from r/m16.")
INSTRUCTION_INPUT(XCHGr16, r/m16, "87 /r", "Exchange word from r/m16 with r16.")
INSTRUCTION_INPUT(XCHGr/m32, r32, "87 /r", "Exchange r32 with doubleword from r/m32.")
INSTRUCTION_INPUT(XCHGr/m64, r64, "REX.W + 87 /r", "Exchange r64 with quadword from r/m64.")
INSTRUCTION_INPUT(XCHGr32, r/m32, "87 /r", "Exchange doubleword from r/m32 with r32.")
INSTRUCTION_INPUT(XCHGr64, r/m64, "REX.W + 87 /r", "Exchange quadword from r/m64 with r64.")
INSTRUCTION_INPUT(XEND, "0F 01 D5", "Specifies the end of an RTM code region.")
INSTRUCTION_INPUT(XGETBV, "0F 01 D0", "Reads an XCR specified by ECX into EDX:EAX.")
INSTRUCTION_INPUT(XORAL, imm8, "34 ib", "AL XOR imm8.")
INSTRUCTION_INPUT(XORAX, imm16, "35 iw", "AX XOR imm16.")
INSTRUCTION_INPUT(XOREAX, imm32, "35 id", "EAX XOR imm32.")
INSTRUCTION_INPUT(XORRAX, imm32, "REX.W + 35 id", "RAX XOR imm32 (sign-extended).")
INSTRUCTION_INPUT(XORr/m8, imm8, "80 /6 ib", "r/m8 XOR imm8.")
INSTRUCTION_INPUT(XORr/m8, imm8, "REX + 80 /6 ib", "r/m8 XOR imm8.")
INSTRUCTION_INPUT(XORr/m16, imm16, "81 /6 iw", "r/m16 XOR imm16.")
INSTRUCTION_INPUT(XORr/m32, imm32, "81 /6 id", "r/m32 XOR imm32.")
INSTRUCTION_INPUT(XORr/m64, imm32, "REX.W + 81 /6 id", "r/m64 XOR imm32 (sign-extended).")
INSTRUCTION_INPUT(XORr/m16, imm8, "83 /6 ib", "r/m16 XOR imm8 (sign-extended).")
INSTRUCTION_INPUT(XORr/m32, imm8, "83 /6 ib", "r/m32 XOR imm8 (sign-extended).")
INSTRUCTION_INPUT(XORr/m64, imm8, "REX.W + 83 /6 ib", "r/m64 XOR imm8 (sign-extended).")
INSTRUCTION_INPUT(XORr/m8, r8, "30 /r", "r/m8 XOR r8.")
INSTRUCTION_INPUT(XORr/m8, r8, "REX + 30 /r", "r/m8 XOR r8.")
INSTRUCTION_INPUT(XORr/m16, r16, "31 /r", "r/m16 XOR r16.")
INSTRUCTION_INPUT(XORr/m32, r32, "31 /r", "r/m32 XOR r32.")
INSTRUCTION_INPUT(XORr/m64, r64, "REX.W + 31 /r", "r/m64 XOR r64.")
INSTRUCTION_INPUT(XORr8, r/m8, "32 /r", "r8 XOR r/m8.")
INSTRUCTION_INPUT(XORr8, r/m8, "REX + 32 /r", "r8 XOR r/m8.")
INSTRUCTION_INPUT(XORr16, r/m16, "33 /r", "r16 XOR r/m16.")
INSTRUCTION_INPUT(XORr32, r/m32, "33 /r", "r32 XOR r/m32.")
INSTRUCTION_INPUT(XORr64, r/m64, "REX.W + 33 /r", "r64 XOR r/m64.")
INSTRUCTION_INPUT(XORPDxmm1, xmm2/m128, "66 0F 57/r", "Return the bitwise logical XOR of packed double-precision floating-point values in xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VXORPDxmm1,xmm2, xmm3/m128, "VEX.128.66.0F.WIG 57 /r", "Return the bitwise logical XOR of packed double-precision floating-point values in xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VXORPDymm1, ymm2, ymm3/m256, "VEX.256.66.0F.WIG 57 /r", "Return the bitwise logical XOR of packed double-precision floating-point values in ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VXORPDxmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, "EVEX.128.66.0F.W1 57 /r", "Return the bitwise logical XOR of packed double-precision floating-point values in xmm2 and xmm3/m128/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VXORPDymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, "EVEX.256.66.0F.W1 57 /r", "Return the bitwise logical XOR of packed double-precision floating-point values in ymm2 and ymm3/m256/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(VXORPDzmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, "EVEX.512.66.0F.W1 57 /r", "Return the bitwise logical XOR of packed double-precision floating-point values in zmm2 and zmm3/m512/m64bcst subject to writemask k1.")
INSTRUCTION_INPUT(XORPSxmm1, xmm2/m128, "0F 57 /r", "Return the bitwise logical XOR of packed single-precision floating-point values in xmm1 and xmm2/mem.")
INSTRUCTION_INPUT(VXORPSxmm1,xmm2, xmm3/m128, "VEX.NDS.128.0F.WIG 57 /r", "Return the bitwise logical XOR of packed single-precision floating-point values in xmm2 and xmm3/mem.")
INSTRUCTION_INPUT(VXORPSymm1, ymm2, ymm3/m256, "VEX.NDS.256.0F.WIG 57 /r", "Return the bitwise logical XOR of packed single-precision floating-point values in ymm2 and ymm3/mem.")
INSTRUCTION_INPUT(VXORPSxmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, "EVEX.NDS.128.0F.W0 57 /r", "Return the bitwise logical XOR of packed single-precision floating-point values in xmm2 and xmm3/m128/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VXORPSymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, "EVEX.NDS.256.0F.W0 57 /r", "Return the bitwise logical XOR of packed single-precision floating-point values in ymm2 and ymm3/m256/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(VXORPSzmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, "EVEX.NDS.512.0F.W0 57 /r", "Return the bitwise logical XOR of packed single-precision floating-point values in zmm2 and zmm3/m512/m32bcst subject to writemask k1.")
INSTRUCTION_INPUT(XRSTORmem, "0F AE /5", "Restore state components specified by EDX:EAX from mem.")
INSTRUCTION_INPUT(XRSTOR64mem, "REX.W+ 0F AE /5", "Restore state components specified by EDX:EAX from mem.")
INSTRUCTION_INPUT(XRSTORSmem, "0F C7 /3", "Restore state components specified by EDX:EAX from mem.")
INSTRUCTION_INPUT(XRSTORS64mem, "REX.W+ 0F C7 /3", "Restore state components specified by EDX:EAX from mem.")
INSTRUCTION_INPUT(XSAVEmem, "0F AE /4", "Save state components specified by EDX:EAX to mem.")
INSTRUCTION_INPUT(XSAVE64mem, "REX.W+ 0F AE /4", "Save state components specified by EDX:EAX to mem.")
INSTRUCTION_INPUT(XSAVECmem, "0F C7 /4", "Save state components specified by EDX:EAX to mem with compaction.")
INSTRUCTION_INPUT(XSAVEC64mem, "REX.W+ 0F C7 /4", "Save state components specified by EDX:EAX to mem with compaction.")
INSTRUCTION_INPUT(XSAVEOPTmem, "0F AE /6", "Save state components specified by EDX:EAX to mem, optimizing if possible.")
INSTRUCTION_INPUT(XSAVEOPT64mem, "REX.W + 0F AE /6", "Save state components specified by EDX:EAX to mem, optimizing if possible.")
INSTRUCTION_INPUT(XSAVESmem, "0F C7 /5", "Save state components specified by EDX:EAX to mem with compaction, optimizing if possible.")
INSTRUCTION_INPUT(XSAVES64mem, "REX.W+ 0F C7 /5", "Save state components specified by EDX:EAX to mem with compaction, optimizing if possible.")
INSTRUCTION_INPUT(XSETBV, "0F 01 D1", "Write the value in EDX:EAX to the XCR specified by ECX.")
INSTRUCTION_INPUT(XTEST, "0F 01 D6", "Test if executing in a transactional region")
>>>>>>> Stashed changes
