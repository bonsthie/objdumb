INSTRUCTION_INPUT(ADD, 0, "add", "Adds two values")
INSTRUCTION_INPUT(SUB, 1, "sub", "Subtracts second value from the first")
INSTRUCTION_INPUT(MUL, 2, "mul", "Multiplies two values")
INSTRUCTION_INPUT(DIV, 3, "div", "Divides first value by the second")
INSTRUCTION_INPUT(MOV, 4, "mov", "Moves data from one place to another")
INSTRUCTION_INPUT(LOAD, 5, "load", "Loads data from memory")
INSTRUCTION_INPUT(STORE, 6, "store", "Stores data into memory")
INSTRUCTION_INPUT(AND, 7, "and", "Logical AND operation")
INSTRUCTION_INPUT(OR, 8, "or", "Logical OR operation")
INSTRUCTION_INPUT(XOR, 9, "xor", "Logical XOR operation")
INSTRUCTION_INPUT(SHL, 10, "shift_left", "Shifts bits to the left")
INSTRUCTION_INPUT(SHR, 11, "shift_right", "Shifts bits to the right")
INSTRUCTION_INPUT(JMP, 12, "jump", "Jumps to a new instruction address")
INSTRUCTION_INPUT(CMP, 13, "compare", "Compares two values")
INSTRUCTION_INPUT(CALL, 14, "call", "Calls a function or subroutine")
INSTRUCTION_INPUT(RET, 15, "return", "Returns from a function or subroutine")
INSTRUCTION_INPUT(PUSH, 16, "push", "Pushes a value onto the stack")
INSTRUCTION_INPUT(POP, 17, "pop", "Pops a value from the stack")
